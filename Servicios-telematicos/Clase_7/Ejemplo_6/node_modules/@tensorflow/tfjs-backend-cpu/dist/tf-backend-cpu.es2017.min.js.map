{"version":3,"file":"tf-backend-cpu.es2017.min.js","sources":["../../../../tfjs-backend-cpu/src/cpu_util.ts","../../../../tfjs-backend-cpu/src/backend_cpu.ts","../../../../tfjs-backend-cpu/src/kernels/Abs.ts","../../../../tfjs-backend-cpu/src/utils/binary_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Complex.ts","../../../../tfjs-backend-cpu/src/utils/zeros_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Identity.ts","../../../../tfjs-backend-cpu/src/kernels/Real.ts","../../../../tfjs-backend-cpu/src/kernels/Cast.ts","../../../../tfjs-backend-cpu/src/utils/binary_utils.ts","../../../../tfjs-backend-cpu/src/kernels/Add.ts","../../../../tfjs-backend-cpu/src/kernels/Bincount_impl.ts","../../../../tfjs-backend-cpu/src/utils/unary_impl.ts","../../../../tfjs-backend-cpu/src/utils/unary_utils.ts","../../../../tfjs-backend-cpu/src/kernels/Ceil.ts","../../../../tfjs-backend-cpu/src/kernels/Concat_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Equal.ts","../../../../tfjs-backend-cpu/src/kernels/Exp.ts","../../../../tfjs-backend-cpu/src/kernels/Expm1.ts","../../../../tfjs-backend-cpu/src/kernels/Floor.ts","../../../../tfjs-backend-cpu/src/kernels/GatherNd_Impl.ts","../../../../tfjs-backend-cpu/src/kernels/GatherV2_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Greater.ts","../../../../tfjs-backend-cpu/src/kernels/GreaterEqual.ts","../../../../tfjs-backend-cpu/src/kernels/Less.ts","../../../../tfjs-backend-cpu/src/kernels/LessEqual.ts","../../../../tfjs-backend-cpu/src/kernels/LinSpace_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Log.ts","../../../../tfjs-backend-cpu/src/kernels/Max_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Maximum.ts","../../../../tfjs-backend-cpu/src/kernels/Minimum.ts","../../../../tfjs-backend-cpu/src/kernels/Multiply.ts","../../../../tfjs-backend-cpu/src/kernels/Neg.ts","../../../../tfjs-backend-cpu/src/kernels/NotEqual.ts","../../../../tfjs-backend-cpu/src/kernels/Transpose_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Transpose.ts","../../../../tfjs-backend-cpu/src/kernels/Prod.ts","../../../../tfjs-backend-cpu/src/kernels/Range_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Rsqrt.ts","../../../../tfjs-backend-cpu/src/kernels/Scatter_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Sigmoid.ts","../../../../tfjs-backend-cpu/src/kernels/Slice.ts","../../../../tfjs-backend-cpu/src/kernels/SparseFillEmptyRows_impl.ts","../../../../tfjs-backend-cpu/src/kernels/SparseReshape_impl.ts","../../../../tfjs-backend-cpu/src/kernels/SparseSegmentReduction_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Sqrt.ts","../../../../tfjs-backend-cpu/src/kernels/SquaredDifference.ts","../../../../tfjs-backend-cpu/src/kernels/StridedSlice_impl.ts","../../../../tfjs-backend-cpu/src/kernels/StringNGrams_impl.ts","../../../../tfjs-backend-cpu/src/kernels/StringSplit_impl.ts","../../../../tfjs-backend-cpu/src/kernels/StringToHashBucketFast_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Sub.ts","../../../../tfjs-backend-cpu/src/kernels/Tile_impl.ts","../../../../tfjs-backend-cpu/src/kernels/TopK_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Unique_impl.ts","../../../../tfjs-backend-cpu/src/base.ts","../../../../tfjs-backend-cpu/src/kernels/Elu.ts","../../../../tfjs-backend-cpu/src/kernels/LeakyRelu.ts","../../../../tfjs-backend-cpu/src/kernels/Prelu.ts","../../../../tfjs-backend-cpu/src/kernels/Relu.ts","../../../../tfjs-backend-cpu/src/kernels/Relu6.ts","../../../../tfjs-backend-cpu/src/utils/fused_utils.ts","../../../../tfjs-backend-cpu/src/kernels/Reshape.ts","../../../../tfjs-backend-cpu/src/kernels/BatchMatMul.ts","../../../../tfjs-backend-cpu/src/kernels/_FusedMatMul.ts","../../../../tfjs-backend-cpu/src/kernels/Acos.ts","../../../../tfjs-backend-cpu/src/kernels/Acosh.ts","../../../../tfjs-backend-cpu/src/kernels/AddN.ts","../../../../tfjs-backend-cpu/src/kernels/All.ts","../../../../tfjs-backend-cpu/src/kernels/Any.ts","../../../../tfjs-backend-cpu/src/kernels/ArgMax.ts","../../../../tfjs-backend-cpu/src/kernels/ArgMin.ts","../../../../tfjs-backend-cpu/src/kernels/Asin.ts","../../../../tfjs-backend-cpu/src/kernels/Asinh.ts","../../../../tfjs-backend-cpu/src/kernels/Atan.ts","../../../../tfjs-backend-cpu/src/kernels/Atan2.ts","../../../../tfjs-backend-cpu/src/kernels/Atanh.ts","../../../../tfjs-backend-cpu/src/utils/pool_utils.ts","../../../../tfjs-backend-cpu/src/kernels/AvgPool.ts","../../../../tfjs-backend-cpu/src/kernels/AvgPool3D.ts","../../../../tfjs-backend-cpu/src/kernels/AvgPool3DGrad.ts","../../../../tfjs-backend-cpu/src/kernels/AvgPoolGrad.ts","../../../../tfjs-backend-cpu/src/kernels/BatchNorm.ts","../../../../tfjs-backend-cpu/src/kernels/BatchToSpaceND.ts","../../../../tfjs-backend-cpu/src/kernels/Bincount.ts","../../../../tfjs-backend-cpu/src/kernels/BroadcastArgs.ts","../../../../tfjs-backend-cpu/src/kernels/ClipByValue.ts","../../../../tfjs-backend-cpu/src/kernels/ComplexAbs.ts","../../../../tfjs-backend-cpu/src/kernels/Imag.ts","../../../../tfjs-backend-cpu/src/kernels/Concat.ts","../../../../tfjs-backend-cpu/src/kernels/Conv2D.ts","../../../../tfjs-backend-cpu/src/kernels/Conv2DBackpropFilter.ts","../../../../tfjs-backend-cpu/src/kernels/Conv2DBackpropInput.ts","../../../../tfjs-backend-cpu/src/kernels/Conv3D.ts","../../../../tfjs-backend-cpu/src/kernels/Conv3DBackpropFilterV2.ts","../../../../tfjs-backend-cpu/src/kernels/Conv3DBackpropInputV2.ts","../../../../tfjs-backend-cpu/src/kernels/Cos.ts","../../../../tfjs-backend-cpu/src/kernels/Cosh.ts","../../../../tfjs-backend-cpu/src/kernels/CropAndResize.ts","../../../../tfjs-backend-cpu/src/kernels/Cumprod.ts","../../../../tfjs-backend-cpu/src/kernels/Cumsum.ts","../../../../tfjs-backend-cpu/src/kernels/DenseBincount.ts","../../../../tfjs-backend-cpu/src/kernels/DepthToSpace.ts","../../../../tfjs-backend-cpu/src/kernels/DepthwiseConv2dNative.ts","../../../../tfjs-backend-cpu/src/kernels/DepthwiseConv2dNativeBackpropFilter.ts","../../../../tfjs-backend-cpu/src/kernels/DepthwiseConv2dNativeBackpropInput.ts","../../../../tfjs-backend-cpu/src/kernels/Diag.ts","../../../../tfjs-backend-cpu/src/kernels/Dilation2D.ts","../../../../tfjs-backend-cpu/src/kernels/Dilation2DBackpropFilter.ts","../../../../tfjs-backend-cpu/src/kernels/Dilation2DBackpropInput.ts","../../../../tfjs-backend-cpu/src/kernels/Sum.ts","../../../../tfjs-backend-cpu/src/kernels/Einsum.ts","../../../../tfjs-backend-cpu/src/kernels/EluGrad.ts","../../../../tfjs-backend-cpu/src/kernels/Erf.ts","../../../../tfjs-backend-cpu/src/kernels/ExpandDims.ts","../../../../tfjs-backend-cpu/src/kernels/RealDiv.ts","../../../../tfjs-backend-cpu/src/utils/fft_utils.ts","../../../../tfjs-backend-cpu/src/kernels/FFT.ts","../../../../tfjs-backend-cpu/src/kernels/Fill.ts","../../../../tfjs-backend-cpu/src/kernels/FlipLeftRight.ts","../../../../tfjs-backend-cpu/src/kernels/FloorDiv.ts","../../../../tfjs-backend-cpu/src/kernels/FusedConv2D.ts","../../../../tfjs-backend-cpu/src/kernels/FusedDepthwiseConv2D.ts","../../../../tfjs-backend-cpu/src/kernels/GatherNd.ts","../../../../tfjs-backend-cpu/src/kernels/GatherV2.ts","../../../../tfjs-backend-cpu/src/kernels/IFFT.ts","../../../../tfjs-backend-cpu/src/kernels/IsFinite.ts","../../../../tfjs-backend-cpu/src/kernels/IsInf.ts","../../../../tfjs-backend-cpu/src/kernels/IsNaN.ts","../../../../tfjs-backend-cpu/src/kernels/LinSpace.ts","../../../../tfjs-backend-cpu/src/kernels/Log1p.ts","../../../../tfjs-backend-cpu/src/kernels/LogicalAnd.ts","../../../../tfjs-backend-cpu/src/kernels/LogicalNot.ts","../../../../tfjs-backend-cpu/src/kernels/LogicalOr.ts","../../../../tfjs-backend-cpu/src/kernels/LRN.ts","../../../../tfjs-backend-cpu/src/kernels/LRNGrad.ts","../../../../tfjs-backend-cpu/src/kernels/Max.ts","../../../../tfjs-backend-cpu/src/kernels/MaxPool.ts","../../../../tfjs-backend-cpu/src/kernels/MaxPool3D.ts","../../../../tfjs-backend-cpu/src/kernels/MaxPool3DGrad.ts","../../../../tfjs-backend-cpu/src/kernels/MaxPoolGrad.ts","../../../../tfjs-backend-cpu/src/kernels/MaxPoolWithArgmax.ts","../../../../tfjs-backend-cpu/src/kernels/MaxPoolWithArgmax_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Mean.ts","../../../../tfjs-backend-cpu/src/kernels/Min.ts","../../../../tfjs-backend-cpu/src/kernels/MirrorPad.ts","../../../../tfjs-backend-cpu/src/kernels/Mod.ts","../../../../tfjs-backend-cpu/src/kernels/Softmax.ts","../../../../tfjs-backend-cpu/src/kernels/Multinomial.ts","../../../../tfjs-backend-cpu/src/kernels/NonMaxSuppressionV3.ts","../../../../tfjs-backend-cpu/src/kernels/NonMaxSuppressionV4.ts","../../../../tfjs-backend-cpu/src/kernels/NonMaxSuppressionV5.ts","../../../../tfjs-backend-cpu/src/kernels/OneHot.ts","../../../../tfjs-backend-cpu/src/kernels/ZerosLike.ts","../../../../tfjs-backend-cpu/src/kernels/OnesLike.ts","../../../../tfjs-backend-cpu/src/kernels/Pack.ts","../../../../tfjs-backend-cpu/src/kernels/PadV2.ts","../../../../tfjs-backend-cpu/src/kernels/Pow.ts","../../../../tfjs-backend-cpu/src/kernels/Range.ts","../../../../tfjs-backend-cpu/src/kernels/Reciprocal.ts","../../../../tfjs-backend-cpu/src/kernels/ResizeBilinear.ts","../../../../tfjs-backend-cpu/src/kernels/ResizeBilinearGrad.ts","../../../../tfjs-backend-cpu/src/kernels/ResizeNearestNeighbor.ts","../../../../tfjs-backend-cpu/src/kernels/ResizeNearestNeighborGrad.ts","../../../../tfjs-backend-cpu/src/kernels/Reverse.ts","../../../../tfjs-backend-cpu/src/kernels/RotateWithOffset.ts","../../../../tfjs-backend-cpu/src/kernels/Round.ts","../../../../tfjs-backend-cpu/src/kernels/ScatterNd.ts","../../../../tfjs-backend-cpu/src/kernels/SearchSorted_impl.ts","../../../../tfjs-backend-cpu/src/kernels/SearchSorted.ts","../../../../tfjs-backend-cpu/src/kernels/Select.ts","../../../../tfjs-backend-cpu/src/kernels/Selu.ts","../../../../tfjs-backend-cpu/src/kernels/Sign.ts","../../../../tfjs-backend-cpu/src/kernels/Sin.ts","../../../../tfjs-backend-cpu/src/kernels/Sinh.ts","../../../../tfjs-backend-cpu/src/kernels/Softplus.ts","../../../../tfjs-backend-cpu/src/kernels/SpaceToBatchND.ts","../../../../tfjs-backend-cpu/src/kernels/SparseFillEmptyRows.ts","../../../../tfjs-backend-cpu/src/kernels/SparseReshape.ts","../../../../tfjs-backend-cpu/src/kernels/SparseSegmentMean.ts","../../../../tfjs-backend-cpu/src/kernels/SparseSegmentSum.ts","../../../../tfjs-backend-cpu/src/kernels/SparseToDense.ts","../../../../tfjs-backend-cpu/src/kernels/SplitV.ts","../../../../tfjs-backend-cpu/src/kernels/Square.ts","../../../../tfjs-backend-cpu/src/kernels/Step.ts","../../../../tfjs-backend-cpu/src/kernels/StridedSlice.ts","../../../../tfjs-backend-cpu/src/kernels/StringNGrams.ts","../../../../tfjs-backend-cpu/src/kernels/StringSplit.ts","../../../../tfjs-backend-cpu/src/kernels/StringToHashBucketFast.ts","../../../../tfjs-backend-cpu/src/kernels/Tan.ts","../../../../tfjs-backend-cpu/src/kernels/Tanh.ts","../../../../tfjs-backend-cpu/src/kernels/Tile.ts","../../../../tfjs-backend-cpu/src/kernels/TopK.ts","../../../../tfjs-backend-cpu/src/kernels/Transform.ts","../../../../tfjs-backend-cpu/src/kernels/Unique.ts","../../../../tfjs-backend-cpu/src/kernels/Unpack.ts","../../../../tfjs-backend-cpu/src/kernels/UnsortedSegmentSum.ts","../../../../tfjs-backend-cpu/src/register_all_kernels.ts","../../../../tfjs-backend-cpu/src/version.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nexport function assertNotComplex(\n    tensor: TensorInfo|TensorInfo[], opName: string): void {\n  if (!Array.isArray(tensor)) {\n    tensor = [tensor];\n  }\n  tensor.forEach(t => {\n    if (t != null) {\n      util.assert(\n          t.dtype !== 'complex64',\n          () => `${\n              opName} does not support complex64 tensors in the CPU backend.`);\n    }\n  });\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendTimingInfo, buffer, DataStorage, DataType, engine, env, kernel_impls, KernelBackend, Rank, ShapeMap, Tensor, Tensor2D, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nconst whereImpl = kernel_impls.whereImpl;\nimport {assertNotComplex} from './cpu_util';\n\ninterface DataId {}\n\nexport interface TensorData<D extends DataType> {\n  values?: backend_util.BackendValues;\n  dtype: D;\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensors, with a parent joining the two with the\n  // complexTensorInfos field.\n  complexTensorInfos?: {real: TensorInfo, imag: TensorInfo};\n  // refCount keeps track of how many tensors reference it. Used for memory\n  // management.\n  refCount: number;\n}\n\nexport class MathBackendCPU extends KernelBackend {\n  public blockSize = 48;\n\n  data: DataStorage<TensorData<DataType>>;\n  private firstUse = true;\n  private static nextDataId = 0;\n  private nextDataId(): number {\n    return MathBackendCPU.nextDataId++;\n  }\n\n  constructor() {\n    super();\n    this.data = new DataStorage(this, engine());\n  }\n\n  write(values: backend_util.BackendValues, shape: number[], dtype: DataType):\n      DataId {\n    if (this.firstUse) {\n      this.firstUse = false;\n      if (env().get('IS_NODE')) {\n        backend_util.warn(\n            '\\n============================\\n' +\n            'Hi, looks like you are running TensorFlow.js in ' +\n            'Node.js. To speed things up dramatically, install our node ' +\n            'backend, visit https://github.com/tensorflow/tfjs-node for more details. ' +\n            '\\n============================');\n      }\n    }\n    const dataId = {id: this.nextDataId()};\n\n    this.data.set(dataId, {values, dtype, refCount: 1});\n\n    return dataId;\n  }\n\n  /**\n   * Create a data bucket in cpu backend.\n   * @param shape Shape of the `TensorInfo`.\n   * @param dtype DType of the `TensorInfo`.\n   * @param values The value of the `TensorInfo` stored as a flattened array.\n   */\n  makeTensorInfo(\n      shape: number[], dtype: DataType,\n      values?: backend_util.BackendValues|string[]): TensorInfo {\n    let outId;\n    if (dtype === 'string' && values != null && values.length > 0 &&\n        util.isString(values[0])) {\n      const encodedValues =\n          (values as {} as string[]).map(d => util.encodeString(d));\n\n      outId = this.write(encodedValues, shape, dtype);\n    } else {\n      outId = this.write(values as TypedArray, shape, dtype);\n    }\n\n    return {dataId: outId, shape, dtype};\n  }\n\n  /** Return refCount of a `TensorData`. */\n  refCount(dataId: DataId): number {\n    if (this.data.has(dataId)) {\n      const tensorData = this.data.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n\n  /** Increase refCount of a `TensorData`. */\n  incRef(dataId: DataId): void {\n    const tensorData = this.data.get(dataId);\n    tensorData.refCount++;\n  }\n\n  /** Decrease refCount of a `TensorData`. */\n  decRef(dataId: DataId): void {\n    if (this.data.has(dataId)) {\n      const tensorData = this.data.get(dataId);\n      tensorData.refCount--;\n    }\n  }\n\n  move(\n      dataId: DataId, values: backend_util.BackendValues, shape: number[],\n      dtype: DataType, refCount: number): void {\n    this.data.set(dataId, {values, dtype, refCount});\n  }\n\n  numDataIds(): number {\n    return this.data.numDataIds();\n  }\n\n  async read(dataId: DataId): Promise<backend_util.BackendValues> {\n    return this.readSync(dataId);\n  }\n  readSync(dataId: DataId): backend_util.BackendValues {\n    const {dtype, complexTensorInfos} = this.data.get(dataId);\n\n    if (dtype === 'complex64') {\n      const realValues =\n          this.readSync(complexTensorInfos.real.dataId) as Float32Array;\n      const imagValues =\n          this.readSync(complexTensorInfos.imag.dataId) as Float32Array;\n      return backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    }\n\n    return this.data.get(dataId).values;\n  }\n\n  bufferSync<R extends Rank, D extends DataType>(t: TensorInfo):\n      TensorBuffer<R, D> {\n    const data = this.readSync(t.dataId);\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        const strings = (data as Uint8Array[]).map(d => util.decodeString(d));\n        return buffer(t.shape as ShapeMap[R], t.dtype, strings) as\n            TensorBuffer<R, D>;\n      } catch {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape as ShapeMap[R], t.dtype, data as TypedArray) as\n        TensorBuffer<R, D>;\n  }\n\n  makeOutput<T extends Tensor>(\n      values: backend_util.BackendValues, shape: number[], dtype: DataType): T {\n    return engine().makeTensorFromTensorInfo(\n               this.makeTensorInfo(shape, dtype, values), this) as T;\n  }\n\n  /**\n   * Dispose the memory if the dataId has 0 refCount. Return true if the memory\n   * is released or memory is not managed in this backend, false if memory is\n   * not cleared.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n  disposeData(dataId: DataId, force = false): boolean {\n    if (this.data.has(dataId)) {\n      this.data.get(dataId).refCount--;\n      if (!force && this.data.get(dataId).refCount > 0) {\n        return false;\n      }\n\n      const {complexTensorInfos} = this.data.get(dataId);\n\n      if (complexTensorInfos != null) {\n        this.disposeData(complexTensorInfos.real.dataId, true);\n        this.disposeData(complexTensorInfos.imag.dataId, true);\n      }\n\n      this.data.delete(dataId);\n    }\n    return true;\n  }\n\n  disposeIntermediateTensorInfo(tensorInfo: TensorInfo): void {\n    this.disposeData(tensorInfo.dataId);\n  }\n\n  async time(f: () => void): Promise<BackendTimingInfo> {\n    const start = util.now();\n    f();\n    const kernelMs = util.now() - start;\n    return {kernelMs};\n  }\n\n  memory() {\n    return {\n      // Unreliable due to automatic gc. The numbers above are cumulative.\n      unreliable: true,\n      reasons:\n          ['The reported memory is an upper bound. Due to automatic garbage ' +\n           'collection, the true allocated memory may be less.']\n    };\n  }\n\n  where(condition: Tensor): Tensor2D {\n    assertNotComplex([condition], 'where');\n\n    const condVals = this.readSync(condition.dataId) as TypedArray;\n    return whereImpl(condition.shape, condVals);\n  }\n\n  dispose() {}\n\n  floatPrecision(): 16|32 {\n    return 32;\n  }\n\n  /** Returns the smallest representable number.  */\n  epsilon(): number {\n    return super.epsilon();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, AbsInputs, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function simpleAbsImpl(vals: TypedArray): Float32Array {\n  const resultValues = new Float32Array(vals.length);\n  for (let i = 0; i < vals.length; ++i) {\n    resultValues[i] = Math.abs(vals[i]);\n  }\n  return resultValues;\n}\n\nexport const abs = (args: {inputs: AbsInputs, backend: MathBackendCPU}) => {\n  const {x} = args.inputs;\n  const cpuBackend = args.backend;\n\n  assertNotComplex(x, 'abs');\n\n  let resultValues = new Float32Array(util.sizeFromShape(x.shape));\n  const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n  resultValues = simpleAbsImpl(values);\n\n  return cpuBackend.makeOutput(resultValues, x.shape, x.dtype);\n};\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'cpu',\n  kernelFunc: abs as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, DataValues, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleBinaryKernelImpl, SimpleBinaryOperation} from './binary_types';\n\n/**\n * Template that creates implementation for binary ops. Supports broadcast.\n */\nexport function createSimpleBinaryKernelImpl(op: SimpleBinaryOperation):\n    SimpleBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aVals: DataValues,\n          bVals: DataValues, dtype: DataType): [TypedArray, number[]] => {\n    const newShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    const resultRank = newShape.length;\n    const resultStrides = util.computeStrides(newShape);\n    const resultSize = util.sizeFromShape(newShape);\n\n    const result =\n        util.getTypedArrayFromDType(dtype as NumericDataType, resultSize);\n\n    const aRank = aShape.length;\n    const bRank = bShape.length;\n\n    const aStrides = util.computeStrides(aShape);\n    const bStrides = util.computeStrides(bShape);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, newShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, newShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < result.length; ++i) {\n        result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n      }\n    } else {\n      for (let i = 0; i < result.length; ++i) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        result[i] = op(aVals[aIndex], bVals[bIndex]);\n      }\n    }\n\n    return [result, newShape];\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Complex, ComplexInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function complex(args: {inputs: ComplexInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {real, imag} = inputs;\n\n  const realVals = backend.data.get(real.dataId).values as TypedArray;\n  const imagVals = backend.data.get(imag.dataId).values as TypedArray;\n\n  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n\n  const complex = backend.data.get(complexInfo.dataId);\n\n  // The complex tensor owns the underlying real and imag tensorInfos, only the\n  // complex tensor tracks refCount, when complexData is disposed the\n  // underlying tensorData will be disposed.\n  complex.complexTensorInfos = {\n    real: backend.makeTensorInfo(real.shape, 'float32', realVals),\n    imag: backend.makeTensorInfo(imag.shape, 'float32', imagVals)\n  };\n\n  return complexInfo;\n}\n\nexport const complexConfig: KernelConfig = {\n  kernelName: Complex,\n  backendName: 'cpu',\n  kernelFunc: complex as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TensorInfo, util} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {complex} from '../kernels/Complex';\n\n/**\n * Generates a tensorInfo with all zeros value.\n * @param backend cpu backend.\n * @param shape Shape for the zeros tensor.\n * @param dtype Optional. If set, the result has this dtype.\n */\nexport function zeros(\n    backend: MathBackendCPU, shape: number[],\n    dtype: DataType = 'float32'): TensorInfo {\n  if (dtype === 'complex64') {\n    const real = zeros(backend, shape, 'float32');\n    const imag = zeros(backend, shape, 'float32');\n\n    return complex({inputs: {real, imag}, backend});\n  }\n\n  const values = util.makeZerosTypedArray(util.sizeFromShape(shape), dtype);\n\n  return backend.makeTensorInfo(shape, dtype, values);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Identity, IdentityInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function identity(\n    args: {inputs: IdentityInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  backend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: x.shape, dtype: x.dtype};\n}\n\nexport const identityConfig: KernelConfig = {\n  kernelName: Identity,\n  backendName: 'cpu',\n  kernelFunc: identity as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Real, RealInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function real(args: {inputs: RealInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const real = backend.data.get(input.dataId).complexTensorInfos.real;\n  const realVal = backend.data.get(real.dataId).values;\n\n  // When complex tensor is disposed, its underlying parts will be disposed too.\n  // Make new tensor out of the real value of the complex. This makes sure the\n  // value is still accessible even if complex tensor is disposed.\n  return backend.makeTensorInfo(real.shape, real.dtype, realVal);\n}\n\nexport const realConfig: KernelConfig = {\n  kernelName: Real,\n  backendName: 'cpu',\n  kernelFunc: real as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Cast, CastAttrs, CastInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {zeros} from '../utils/zeros_impl';\n\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {real} from './Real';\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendCPU, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    const zerosTensorInfo = zeros(backend, x.shape, x.dtype);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensorInfo}, backend});\n\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  if (dtype === 'int32') {\n    const values = backend.data.get(x.dataId).values as TypedArray;\n    const resultValues = Int32Array.from(values);\n    return backend.makeTensorInfo(x.shape, 'int32', resultValues);\n  }\n\n  if (dtype === 'bool') {\n    // This is essentially the result of notEqual(x, 0). We avoid using\n    // kernel notEqual to avoid circular dependency, i.e. binary_utils ->\n    // cast -> notEqual -> binary_utils.\n    const xVals = backend.data.get(x.dataId).values as TypedArray;\n    const zero = util.toTypedArray([0], x.dtype);\n\n    const [resultData, resultShape] = createSimpleBinaryKernelImpl(\n        (a, b) => (a !== b) ? 1 : 0)(x.shape, [], xVals, zero, 'bool');\n\n    return backend.makeTensorInfo(resultShape, 'bool', resultData);\n  }\n\n  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'cpu',\n  kernelFunc: cast as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, DataType, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {cast} from '../kernels/Cast';\nimport {complex} from '../kernels/Complex';\n\nimport {ComplexBinaryKernelImpl, ComplexBinaryOperation, SimpleBinaryKernelImpl} from './binary_types';\n\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param name Kernel name.\n * @param binaryKernelImpl A `SimpleBinaryKernelImpl` for the kernel.\n * @param binaryKernelComplexImpl Optional. If exists, represents a\n *     `ComplexBinaryKernelImpl` for the kernel, will be used when input dtype\n *     is `complex64`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc(\n    name: string, simpleImpl: SimpleBinaryKernelImpl,\n    complexImpl?: ComplexBinaryKernelImpl, dtype?: DataType): KernelFunc {\n  if (complexImpl == null) {\n    return ({inputs, backend}) => {\n      const {a, b} = inputs as BinaryInputs;\n      const cpuBackend = backend as MathBackendCPU;\n\n      assertNotComplex([a, b], name);\n\n      const aVals = cpuBackend.data.get(a.dataId).values as TypedArray;\n      const bVals = cpuBackend.data.get(b.dataId).values as TypedArray;\n\n      const decodedAVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(aVals as any as Uint8Array[]) :\n          aVals;\n      const decodedBVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(bVals as any as Uint8Array[]) :\n          bVals;\n      const $dtype = dtype || a.dtype;\n\n      const [resultData, resultShape] =\n          simpleImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    };\n  }\n\n  return ({inputs, backend}) => {\n    const {a, b} = inputs as BinaryInputs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n      const $aComplex = cast(\n          {inputs: {x: a}, backend: cpuBackend, attrs: {dtype: 'complex64'}});\n\n      const $aComplexVals = cpuBackend.data.get($aComplex.dataId);\n\n      const aReal = $aComplexVals.complexTensorInfos.real;\n      const aImag = $aComplexVals.complexTensorInfos.imag;\n\n      const aRealVals =\n          cpuBackend.data.get(aReal.dataId).values as Float32Array;\n      const aImagVals =\n          cpuBackend.data.get(aImag.dataId).values as Float32Array;\n\n      const $bComplex = cast(\n          {inputs: {x: b}, backend: cpuBackend, attrs: {dtype: 'complex64'}});\n\n      const $bComplexVals = cpuBackend.data.get($bComplex.dataId);\n\n      const bReal = $bComplexVals.complexTensorInfos.real;\n      const bImag = $bComplexVals.complexTensorInfos.imag;\n\n      const bRealVals =\n          cpuBackend.data.get(bReal.dataId).values as Float32Array;\n      const bImagVals =\n          cpuBackend.data.get(bImag.dataId).values as Float32Array;\n\n      const [resultRealData, resultImagData, resultShape] = complexImpl(\n          a.shape, b.shape, aRealVals, aImagVals, bRealVals, bImagVals);\n\n      const resultReal =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', resultRealData);\n\n      const resultImag =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', resultImagData);\n\n      const result = complex(\n          {inputs: {real: resultReal, imag: resultImag}, backend: cpuBackend});\n\n      cpuBackend.disposeIntermediateTensorInfo($aComplex);\n      cpuBackend.disposeIntermediateTensorInfo($bComplex);\n      cpuBackend.disposeIntermediateTensorInfo(resultReal);\n      cpuBackend.disposeIntermediateTensorInfo(resultImag);\n\n      return result;\n    } else {\n      const aVals = cpuBackend.data.get(a.dataId).values as TypedArray;\n      const bVals = cpuBackend.data.get(b.dataId).values as TypedArray;\n\n      const $dtype = dtype || a.dtype;\n\n      const [resultData, resultShape] =\n          simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\n\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    }\n  };\n}\n\n/**\n * Template that creates the complex type implementation for binary ops.\n * Supports broadcast.\n */\nexport function createComplexBinaryKernelImpl(op: ComplexBinaryOperation):\n    ComplexBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aRealVals: Float32Array,\n          aImagVals: Float32Array, bRealVals: Float32Array,\n          bImagVals: Float32Array): [TypedArray, TypedArray, number[]] => {\n    const resultShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const resultSize = util.sizeFromShape(resultShape);\n    const resultRank = resultShape.length;\n    const resultStrides = util.computeStrides(resultShape);\n\n    const resultRealVals = util.getTypedArrayFromDType('float32', resultSize);\n    const resultImagVals = util.getTypedArrayFromDType('float32', resultSize);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, resultShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, resultShape);\n\n    const aVals = backend_util.mergeRealAndImagArrays(aRealVals, aImagVals);\n    const bVals = backend_util.mergeRealAndImagArrays(bRealVals, bImagVals);\n\n    const aRank = aShape.length;\n    const aStrides = util.computeStrides(aShape);\n\n    const bRank = bShape.length;\n    const bStrides = util.computeStrides(bShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const aIdx = i % aVals.length;\n        const bIdx = i % bVals.length;\n\n        const result =\n            op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2],\n               bVals[bIdx * 2 + 1]);\n\n        resultRealVals[i] = result.real;\n        resultImagVals[i] = result.imag;\n      }\n    } else {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        const opResult =\n            op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2],\n               bVals[bIndex * 2 + 1]);\n\n        resultRealVals[i] = opResult.real;\n        resultImagVals[i] = opResult.imag;\n      }\n    }\n    return [resultRealVals, resultImagVals, resultShape];\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Add, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const addImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => a + b));\nexport const addComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal + bReal, imag: aImag + bImag};\n    }));\n\nexport const add = binaryKernelFunc(Add, addImpl, addComplexImpl);\n\nexport const addConfig: KernelConfig = {\n  kernelName: Add,\n  backendName: 'cpu',\n  kernelFunc: add\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function bincountImpl(\n    xVals: TypedArray, weightsVals: TypedArray, weightsDtype: DataType,\n    weightsShape: number[], size: number): TypedArray {\n  const weightsSize = util.sizeFromShape(weightsShape);\n  const outVals = util.makeZerosTypedArray(size, weightsDtype) as TypedArray;\n\n  for (let i = 0; i < xVals.length; i++) {\n    const value = xVals[i];\n    if (value < 0) {\n      throw new Error('Input x must be non-negative!');\n    }\n\n    if (value >= size) {\n      continue;\n    }\n\n    if (weightsSize > 0) {\n      outVals[value] += weightsVals[i];\n    } else {\n      outVals[value] += 1;\n    }\n  }\n\n  return outVals;\n}\n\nexport function bincountReduceImpl<R extends Rank>(\n    xBuf: TensorBuffer<R>, weightsBuf: TensorBuffer<R>, size: number,\n    binaryOutput = false): TensorBuffer<R> {\n  const numRows = xBuf.shape[0];\n  const numCols = xBuf.shape[1];\n\n  const outBuf = buffer([numRows, size], weightsBuf.dtype);\n\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      const value = xBuf.get(i, j);\n      if (value < 0) {\n        throw new Error('Input x must be non-negative!');\n      }\n\n      if (value >= size) {\n        continue;\n      }\n\n      if (binaryOutput) {\n        outBuf.set(1, i, value);\n      } else {\n        if (weightsBuf.size > 0) {\n          outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n        } else {\n          outBuf.set(outBuf.get(i, value) + 1, i, value);\n        }\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NumericDataType, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates implementation for unary op.\n */\nexport function createSimpleUnaryImpl(op: SimpleUnaryOperation):\n    SimpleUnaryImpl {\n  return (values, dtype, attrs) => {\n    const newValues =\n        util.getTypedArrayFromDType(dtype as NumericDataType, values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return newValues;\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelFunc, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param name Kernel name.\n * @param op A `SimpleUnaryOperation` for the kernel.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFunc(\n    name: string, op: SimpleUnaryOperation, dtype?: DataType): KernelFunc {\n  return ({inputs, attrs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    assertNotComplex(x, name);\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend as MathBackendCPU;\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const xSize = util.sizeFromShape(x.shape);\n    const $dtype = dtype || x.dtype;\n    const newValues = util.getArrayFromDType($dtype, xSize);\n    for (let i = 0; i < xSize; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n\n/**\n * Template that creates a `KernelFunc` for unary ops from the given\n * `SimpleUnaryImpl`..\n * @param name Kernel name.\n * @param unaryImpl A `SimpleUnaryImpl` that implements the op.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFuncFromImpl(\n    name: string, unaryImpl: SimpleUnaryImpl, dtype?: DataType): KernelFunc {\n  return ({inputs, attrs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    assertNotComplex(x, name);\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend as MathBackendCPU;\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const $dtype = dtype || x.dtype;\n    const newValues = unaryImpl(values, $dtype, attrs);\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Ceil, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const ceilImpl = createSimpleUnaryImpl((xi) => Math.ceil(xi));\nexport const ceil = unaryKernelFuncFromImpl(Ceil, ceilImpl);\n\nexport const ceilConfig: KernelConfig = {\n  kernelName: Ceil,\n  backendName: 'cpu',\n  kernelFunc: ceil,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function concatImpl(\n    inputs: Array<{vals: BackendValues, shape: number[]}>, outShape: number[],\n    dtype: DataType, simplyConcat: boolean): TypedArray|string[] {\n  const outVals = util.getArrayFromDType(dtype, util.sizeFromShape(outShape));\n\n  if (simplyConcat && dtype !== 'string') {\n    // Use built-in TypedArray.set() method for speed.\n    let offset = 0;\n    inputs.forEach(input => {\n      const size = util.sizeFromShape(input.shape);\n\n      (outVals as TypedArray).set(input.vals as TypedArray, offset);\n      offset += size;\n    });\n  } else {\n    let colOffset = 0;\n\n    inputs.forEach(input => {\n      const decodedData = dtype === 'string' ?\n          backend_util.fromUint8ToStringArray(input.vals as Uint8Array[]) :\n          input.vals as TypedArray;\n\n      let tIdx = 0;\n\n      for (let row = 0; row < input.shape[0]; ++row) {\n        const resIdx = row * outShape[1] + colOffset;\n        for (let col = 0; col < input.shape[1]; ++col) {\n          outVals[resIdx + col] = decodedData[tIdx++];\n        }\n      }\n\n      colOffset += input.shape[1];\n    });\n  }\n\n  return outVals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Equal, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const equalImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a === b) ? 1 : 0);\nexport const equal =\n    binaryKernelFunc(Equal, equalImpl, null /* complexImpl */, 'bool');\n\nexport const equalConfig: KernelConfig = {\n  kernelName: Equal,\n  backendName: 'cpu',\n  kernelFunc: equal\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Exp, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expImpl = createSimpleUnaryImpl((xi) => Math.exp(xi));\nexport const exp = unaryKernelFuncFromImpl(Exp, expImpl, 'float32');\n\nexport const expConfig: KernelConfig = {\n  kernelName: Exp,\n  backendName: 'cpu',\n  kernelFunc: exp,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Expm1, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expm1Impl = createSimpleUnaryImpl((xi) => Math.expm1(xi));\nexport const expm1 = unaryKernelFuncFromImpl(Expm1, expm1Impl);\n\nexport const expm1Config: KernelConfig = {\n  kernelName: Expm1,\n  backendName: 'cpu',\n  kernelFunc: expm1,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Floor, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const floorImpl = createSimpleUnaryImpl((xi) => Math.floor(xi));\nexport const floor = unaryKernelFuncFromImpl(Floor, floorImpl);\n\nexport const floorConfig: KernelConfig = {\n  kernelName: Floor,\n  backendName: 'cpu',\n  kernelFunc: floor,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function gatherNdImpl<R extends Rank>(\n    indicesData: TypedArray, paramsBuf: TensorBuffer<R>, dtype: DataType,\n    numSlices: number, sliceRank: number, sliceSize: number, strides: number[],\n    paramsShape: number[], paramsSize: number): TensorBuffer<R> {\n  const outBuf = buffer([numSlices, sliceSize], dtype);\n\n  for (let i = 0; i < numSlices; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      flattenIndex += dim * strides[j];\n      index.push(dim);\n    }\n    if (flattenIndex < 0 || flattenIndex >= paramsSize / sliceSize) {\n      throw new Error(\n          `Invalid indices: ${index} does not index into ${paramsShape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      outBuf.values[i * sliceSize + k] =\n          paramsBuf.get(...paramsBuf.indexToLoc(flattenIndex * sliceSize + k));\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function gatherV2Impl<R extends Rank, D extends DataType>(\n    xBuf: TensorBuffer<R, D>, indicesBuf: TensorBuffer<R, D>,\n    flattenOutputShape: number[]): TensorBuffer<R, D> {\n  const outBuf = buffer(flattenOutputShape, xBuf.dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const newLoc = outBuf.indexToLoc(i);\n\n    const originalLoc: number[] = newLoc.slice();\n    const batchIdx = originalLoc[0];\n    const indicesIdx = originalLoc[2];\n    const indicesIndex = indicesBuf.locToIndex([batchIdx, indicesIdx]);\n    originalLoc[2] = indicesBuf.values[indicesIndex] as number;\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    if (0 <= originalIndex && originalIndex < xBuf.values.length) {\n      outBuf.values[i] = xBuf.values[originalIndex];\n    } // Else, index is out of bounds, so leave the default zero val in outBuf.\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Greater, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a > b) ? 1 : 0);\nexport const greater =\n    binaryKernelFunc(Greater, greaterImpl, null /* complexImpl */, 'bool');\n\nexport const greaterConfig: KernelConfig = {\n  kernelName: Greater,\n  backendName: 'cpu',\n  kernelFunc: greater\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GreaterEqual, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a >= b) ? 1 : 0);\nexport const greaterEqual = binaryKernelFunc(\n    GreaterEqual, greaterEqualImpl, null /* complexImpl */, 'bool');\n\nexport const greaterEqualConfig: KernelConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'cpu',\n  kernelFunc: greaterEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Less} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a < b) ? 1 : 0);\nexport const less =\n    binaryKernelFunc(Less, lessImpl, null /* complexImpl */, 'bool');\n\nexport const lessConfig: KernelConfig = {\n  kernelName: Less,\n  backendName: 'cpu',\n  kernelFunc: less\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LessEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a <= b) ? 1 : 0);\nexport const lessEqual =\n    binaryKernelFunc(LessEqual, lessEqualImpl, null /* complexImpl */, 'bool');\n\nexport const lessEqualConfig: KernelConfig = {\n  kernelName: LessEqual,\n  backendName: 'cpu',\n  kernelFunc: lessEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function linSpaceImpl(\n    start: number, stop: number, num: number): TypedArray {\n  const step = (stop - start) / (num - 1);\n\n  const values = util.makeZerosTypedArray(num, 'float32');\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const logImpl = createSimpleUnaryImpl((xi) => Math.log(xi));\nexport const log = unaryKernelFuncFromImpl(Log, logImpl);\n\nexport const logConfig: KernelConfig = {\n  kernelName: Log,\n  backendName: 'cpu',\n  kernelFunc: log,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function maxImpl(\n    aVals: TypedArray, reduceSize: number, outShape: number[],\n    dtype: DataType): TypedArray {\n  const vals = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (Number.isNaN(value) ||\n          value > max) {  // comparison with NaN always return false\n        max = value;\n      }\n    }\n    vals[i] = max;\n  }\n  return vals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Maximum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const maximumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.max(aValue as number, bValue as number)));\nexport const maximum = binaryKernelFunc(Maximum, maximumImpl);\n\nexport const maximumConfig: KernelConfig = {\n  kernelName: Maximum,\n  backendName: 'cpu',\n  kernelFunc: maximum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Minimum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const minimumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.min(aValue as number, bValue as number)));\nexport const minimum = binaryKernelFunc(Minimum, minimumImpl);\n\nexport const minimumConfig: KernelConfig = {\n  kernelName: Minimum,\n  backendName: 'cpu',\n  kernelFunc: minimum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Multiply} from '@tensorflow/tfjs-core';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const multiplyImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue * bValue));\nexport const multiplyComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {\n        real: aReal * bReal - aImag * bImag,\n        imag: aReal * bImag + aImag * bReal\n      };\n    }));\n\nexport const multiply =\n    binaryKernelFunc(Multiply, multiplyImpl, multiplyComplexImpl);\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'cpu',\n  kernelFunc: multiply\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelConfig, KernelFunc, Neg, TensorInfo, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {multiplyImpl} from './Multiply';\n\nexport function negImpl(xVals: TypedArray, xShape: number[], xDtype: DataType):\n    [TypedArray, number[]] {\n  const minusOne =\n      util.createScalarValue(-1 as {} as 'float32', xDtype) as TypedArray;\n  return multiplyImpl([], xShape, minusOne, xVals, xDtype);\n}\n\nexport function neg(args: {inputs: UnaryInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  assertNotComplex(x, 'neg');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [res, newShape] = negImpl(xVals, x.shape, x.dtype);\n\n  return backend.makeTensorInfo(newShape, x.dtype, res);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'cpu',\n  kernelFunc: neg as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NotEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const notEqualImpl =\n    createSimpleBinaryKernelImpl(((a, b) => (a !== b) ? 1 : 0));\nexport const notEqual =\n    binaryKernelFunc(NotEqual, notEqualImpl, null /* complexOp */, 'bool');\n\nexport const notEqualConfig: KernelConfig = {\n  kernelName: NotEqual,\n  backendName: 'cpu',\n  kernelFunc: notEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {util} from '@tensorflow/tfjs-core';\n\nexport function transposeImpl(\n    xVals: TypedArray, xShape: number[], dtype: DataType, perm: number[],\n    newShape: number[]): TypedArray {\n  const xRank = xShape.length;\n  const xSize = util.sizeFromShape(xShape);\n  const xStrides = util.computeStrides(xShape);\n  const newStrides = util.computeStrides(newShape);\n\n  const result = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(newShape));\n\n  for (let i = 0; i < xSize; ++i) {\n    const loc = util.indexToLoc(i, xRank, xStrides);\n\n    // Permute location.\n    const newLoc: number[] = new Array(loc.length);\n    for (let i = 0; i < newLoc.length; i++) {\n      newLoc[i] = loc[perm[i]];\n    }\n\n    const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n    result[newIndex] = xVals[i];\n  }\n  return result;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transpose, TransposeAttrs, TransposeInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {transposeImpl} from './Transpose_impl';\n\nexport function transpose(args: {\n  inputs: TransposeInputs,\n  attrs: TransposeAttrs,\n  backend: MathBackendCPU\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {x} = inputs;\n  const {perm} = attrs;\n\n  assertNotComplex(x, 'transpose');\n\n  const xRank = x.shape.length;\n\n  const newShape: number[] = new Array(xRank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n\n  const values = backend.data.get(x.dataId).values as TypedArray;\n  const result = transposeImpl(values, x.shape, x.dtype, perm, newShape);\n\n  const dataId = backend.write(result, newShape, x.dtype);\n  return {dataId, shape: newShape, dtype: x.dtype};\n}\n\nexport const transposeConfig: KernelConfig = {\n  kernelName: Transpose,\n  backendName: 'cpu',\n  kernelFunc: transpose as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function prodImpl(\n    xShape: number[], xDtype: DataType, xVals: TypedArray,\n    reductionAxes: number[]):\n    {outVals: TypedArray, outShape: number[], outDtype: DataType} {\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(xShape, reductionAxes);\n  const outDtype = upcastType(xDtype, 'int32');\n  const outVals = util.makeZerosTypedArray(\n                      util.sizeFromShape(outShape), outDtype) as TypedArray;\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  for (let i = 0; i < outVals.length; ++i) {\n    const offset = i * reduceSize;\n    let prod = 1;\n    for (let j = 0; j < reduceSize; ++j) {\n      prod *= xVals[offset + j];\n    }\n    outVals[i] = prod;\n  }\n\n  return {outVals, outShape, outDtype};\n}\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: MathBackendCPU, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'prod');\n\n  const xRank = x.shape.length;\n  const axes = util.parseAxisParam(axis, x.shape);\n\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n  let reductionAxes = axes;\n  let permutedX = x;\n  const intermediateTensorInfos = [];\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n    intermediateTensorInfos.push(permutedX);\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  const xVals = backend.data.get(permutedX.dataId).values as TypedArray;\n  const {outVals, outShape, outDtype} =\n      prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);\n\n  let resultShape = outShape;\n  if (keepDims) {\n    resultShape = backend_util.expandShapeToKeepDim(outShape, axes);\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(resultShape, outDtype, outVals);\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'cpu',\n  kernelFunc: prod as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataTypeMap, util} from '@tensorflow/tfjs-core';\n\nexport function rangeImpl(\n    start: number, stop: number, step: number,\n    dtype: 'float32'|'int32'): DataTypeMap['float32' | 'int32'] {\n  const sameStartStop = start === stop;\n  const increasingRangeNegativeStep = start < stop && step < 0;\n  const decreasingRangePositiveStep = stop < start && step > 1;\n\n  if (sameStartStop || increasingRangeNegativeStep ||\n      decreasingRangePositiveStep) {\n    return util.makeZerosTypedArray(0, dtype);\n  }\n\n  const numElements = Math.abs(Math.ceil((stop - start) / step));\n  const values = util.makeZerosTypedArray(numElements, dtype);\n\n  if (stop < start && step === 1) {\n    // Auto adjust the step's sign if it hasn't been set\n    // (or was set to 1)\n    step = -1;\n  }\n\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Rsqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const rsqrtImpl = createSimpleUnaryImpl((xi) => 1 / Math.sqrt(xi));\nexport const rsqrt = unaryKernelFuncFromImpl(Rsqrt, rsqrtImpl);\n\nexport const rsqrtConfig: KernelConfig = {\n  kernelName: Rsqrt,\n  backendName: 'cpu',\n  kernelFunc: rsqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {buffer, Rank, ShapeMap, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\ninterface DefaultValueTypeMap {\n  bool: boolean;\n  int32: number;\n  float32: number;\n  string: string;\n}\n\nexport function\nscatterImpl<R extends Rank, D extends 'float32'|'int32'|'bool'|'string'>(\n    indices: TensorBuffer<R, 'int32'>, updates: TensorBuffer<R, D>,\n    shape: number[], outputSize: number, sliceSize: number, numUpdates: number,\n    sliceRank: number, strides: number[], defaultValue: DefaultValueTypeMap[D],\n    sumDupeIndices: boolean): TensorBuffer<R, D> {\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  const indicesData = indices.values as TypedArray;\n  const updatesData = updates.values;\n\n  if (outputSize === 0) {\n    return buffer(shape as ShapeMap[R], updates.dtype);\n  }\n\n  const outBuf = buffer(flattenShape, updates.dtype);\n  if (typeof defaultValue === 'string') {\n    (outBuf.values as string[]).fill(defaultValue);\n  } else if (typeof defaultValue === 'number') {\n    (outBuf.values as TypedArray).fill(defaultValue);\n  } else if (typeof defaultValue === 'boolean') {\n    (outBuf.values as TypedArray).fill(+defaultValue);\n  }\n\n  for (let i = 0; i < numUpdates; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      index.push(dim);\n      flattenIndex += dim * strides[j];\n    }\n\n    if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n      throw new Error(`Invalid indices: ${index} does not index into ${shape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      if (sumDupeIndices) {\n        (outBuf.values as TypedArray)[flattenIndex * sliceSize + k] +=\n            (updatesData as TypedArray)[i * sliceSize + k];\n      } else {\n        outBuf.values[flattenIndex * sliceSize + k] = updates.rank === 0 ?\n            updatesData[0] :\n            updatesData[i * sliceSize + k];\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sigmoid} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sigmoidImpl =\n    createSimpleUnaryImpl((xi) => 1 / (1 + Math.exp(-xi)));\nexport const sigmoid =\n    unaryKernelFunc(Sigmoid, (xi) => 1 / (1 + Math.exp(-xi)));\n\nexport const sigmoidConfig: KernelConfig = {\n  kernelName: Sigmoid,\n  backendName: 'cpu',\n  kernelFunc: sigmoid,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, buffer, DataType, KernelConfig, KernelFunc, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function sliceImpl(\n    vals: BackendValues, begin: number[], size: number[], shape: number[],\n    dtype: DataType): BackendValues {\n  const isContinous = slice_util.isSliceContinous(shape, begin, size);\n  const length = util.sizeFromShape(size);\n  const xStrides = util.computeStrides(shape);\n\n  if (isContinous) {\n    const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n\n    if (dtype === 'string') {\n      return (vals as Uint8Array[]).slice(flatOffset, flatOffset + length);\n    }\n\n    return (vals as TypedArray).subarray(flatOffset, flatOffset + length);\n  }\n\n  const decodedData = dtype === 'string' ?\n      backend_util.fromUint8ToStringArray(vals as Uint8Array[]) :\n      vals as TypedArray;\n\n  const inBuf = buffer(shape, dtype, decodedData);\n  const outBuf = buffer(size, dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.map((idx: number, j) => idx + begin[j]);\n    outBuf.set(inBuf.get(...inLoc), ...outLoc);\n  }\n\n  if (dtype === 'string') {\n    return backend_util.fromStringArrayToUint8(outBuf.values as string[]);\n  }\n  return outBuf.values as TypedArray;\n}\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: MathBackendCPU, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  assertNotComplex(x, 'slice');\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  const vals = backend.data.get(x.dataId).values;\n  const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n  return backend.makeTensorInfo($size, x.dtype, outVals);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'cpu',\n  kernelFunc: slice as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseFillEmptyRowsImpl(\n    indices: TypedArray, indicesShape: number[], indicesDType: DataType,\n    values: TypedArray, valuesDType: DataType, denseShape: TypedArray,\n    defaultValue: number):\n    [TypedArray, number[], TypedArray, boolean[], number[]] {\n  const indicesCount = indicesShape[0];\n  const denseRows = denseShape[0];\n\n  const emptyRowIndicator: boolean[] = new Array(denseRows);\n  const reverseIndexMap: number[] = new Array(indicesCount);\n\n  const rank = indicesShape[1];\n\n  if (denseRows === 0) {\n    if (indicesCount !== 0) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsIndicesDenseShapeMismatch(\n              indicesCount));\n    }\n    const outputIndices = util.getArrayFromDType(indicesDType, 0) as TypedArray;\n    const outputValues = util.getArrayFromDType(valuesDType, 0) as TypedArray;\n    return [\n      outputIndices, [0, rank], outputValues, emptyRowIndicator, reverseIndexMap\n    ];\n  }\n\n  let rowsAreOrdered = true;\n  let lastIndicesRow = 0;\n  const csrOffset: number[] = new Array(denseRows).fill(0);\n\n  for (let i = 0; i < indicesCount; ++i) {\n    // indices is a 2d tensor with shape of [N, rank]\n    const row = indices[i * rank];\n    if (row < 0) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsNegativeIndexErrorMessage(i, row));\n    }\n    if (row >= denseRows) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(\n              i, row, denseRows));\n    }\n    ++csrOffset[row];\n    rowsAreOrdered = rowsAreOrdered && (row >= lastIndicesRow);\n    lastIndicesRow = row;\n  }\n\n  let allRowsFull = true;\n  for (let row = 0; row < denseRows; ++row) {\n    // csrOffset here describes the number of elements in this dense row\n    const rowEmpty = (csrOffset[row] === 0);\n    emptyRowIndicator[row] = rowEmpty;\n    allRowsFull = allRowsFull && !rowEmpty;\n    // In filled version, each row has at least one element.\n    csrOffset[row] = Math.max(csrOffset[row], 1);\n    // Update csrOffset to represent the number of elements up to and\n    // including denseRows + 1:\n    //  csrOffset[0] == #{elements of row 0}\n    //  csrOffset[1] == #{elements of row 1} + #{elements of row 0}\n    //  ..\n    //  csrOffset[i] == starting index for elements in row i + 1.\n    if (row > 0) {\n      csrOffset[row] += csrOffset[row - 1];\n    }\n  }\n\n  if (allRowsFull && rowsAreOrdered) {\n    const outputIndices: TypedArray = indices;\n    const outputValues: TypedArray = values;\n    for (let i = 0; i < indicesCount; ++i) {\n      reverseIndexMap[i] = i;\n    }\n    return [\n      outputIndices, [indicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  } else {\n    const fullIndicesCount = csrOffset[denseRows - 1];\n    const outputIndices =\n        util.getArrayFromDType(indicesDType, fullIndicesCount * rank) as\n        TypedArray;\n    const outputValues =\n        util.getArrayFromDType(valuesDType, fullIndicesCount) as TypedArray;\n    const filledCount: number[] = new Array(denseRows).fill(0);\n\n    // Fill in values for rows that are not missing\n    for (let i = 0; i < indicesCount; ++i) {\n      // indices is a 2d tensor with shape of [N, rank]\n      const row = indices[i * rank];\n      const offset = filledCount[row];\n      const outputI = ((row === 0) ? 0 : csrOffset[row - 1]) + offset;\n      filledCount[row]++;  // Increment the filled count for this row.\n      for (let j = 0; j < rank; ++j) {\n        // indices and outputIndices are 2d tensors with shape of [N, rank]\n        outputIndices[outputI * rank + j] = indices[i * rank + j];\n      }\n      outputValues[outputI] = values[i];\n      // We'll need this reverse index map to backprop correctly.\n      reverseIndexMap[i] = outputI;\n    }\n\n    // Fill in values for rows that are missing\n    for (let row = 0; row < denseRows; ++row) {\n      const rowCount = filledCount[row];\n      if (rowCount === 0) {  // We haven't filled this row\n        const startingIndex = (row === 0) ? 0 : csrOffset[row - 1];\n        // Remaining index values were set to zero already.\n        // Just need to set the row index in the right location.\n        // outputIndices is a 2d tensor with shape of [N, rank]\n        outputIndices[startingIndex * rank + 0] = row;\n        for (let col = 1; col < rank; ++col) {\n          outputIndices[startingIndex * rank + col] = 0;\n        }\n        outputValues[startingIndex] = defaultValue;\n      }\n    }\n    return [\n      outputIndices, [fullIndicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseReshapeImpl(\n    inputIndices: TypedArray, inputIndicesShape: number[], inputDType: DataType,\n    inputShape: number[],\n    targetShape: number[]): [TypedArray, number[], number[]] {\n  const denseSize = util.sizeFromShape(inputShape);\n  const nnz = inputIndicesShape[0];\n  const outputRank = targetShape.length;\n\n  // Compute the output shape. Determine product of specified dimensions, and\n  // find the index of the unspecified one.\n  const outputShape: number[] = [];\n  let product = 1;\n  let unknownIndex = -1;\n  for (let d = 0; d < outputRank; ++d) {\n    const size = targetShape[d];\n    if (size === -1) {\n      if (unknownIndex !== -1) {\n        throw new Error(\n            backend_util\n                .getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(\n                    unknownIndex, d));\n      }\n      unknownIndex = d;\n      outputShape.push(1);\n    } else {\n      if (size < 0) {\n        throw new Error(\n            backend_util.getSparseReshapeNegativeOutputDimErrorMessage(\n                d, size));\n      }\n      product *= size;\n      outputShape.push(size);\n    }\n  }\n  if (unknownIndex !== -1) {\n    if (product <= 0) {\n      throw new Error(\n          backend_util.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());\n    }\n    const missing = Math.trunc(denseSize / product);\n    if (product * missing !== denseSize) {\n      throw new Error(\n          backend_util.getSparseReshapeInputOutputMultipleErrorMessage(\n              inputShape, outputShape));\n    }\n\n    outputShape[unknownIndex] = missing;\n  }\n  const outputSize = util.sizeFromShape(outputShape);\n  if (outputSize !== denseSize) {\n    throw new Error(\n        backend_util.getSparseReshapeInputOutputMismatchErrorMessage(\n            inputShape, outputShape));\n  }\n\n  const inputRank = inputShape.length;\n  const inputStrides: number[] = [];\n  if (inputRank > 0) {\n    inputStrides[inputRank - 1] = 1;\n    for (let d = inputRank - 2; d >= 0; --d) {\n      inputStrides[d] = inputStrides[d + 1] * inputShape[d + 1];\n    }\n  }\n\n  const outputStrides: number[] = [];\n  if (outputRank > 0) {\n    outputStrides[outputRank - 1] = 1;\n    for (let d = outputRank - 2; d >= 0; --d) {\n      outputStrides[d] = outputStrides[d + 1] * outputShape[d + 1];\n    }\n  }\n\n  const newIndices =\n      util.getArrayFromDType(inputDType, nnz * outputRank) as TypedArray;\n  for (let i = 0; i < nnz; ++i) {\n    let id = 0;\n    for (let j = 0; j < inputRank; ++j) {\n      // inputIndices is a 2d tensor with shape of [nnz, inputRank]\n      id += inputIndices[i * inputRank + j] * inputStrides[j];\n    }\n    for (let j = 0; j < outputRank; ++j) {\n      // newIndices is a 2d tensor with shape of [nnz, outputRank]\n      newIndices[i * outputRank + j] = Math.trunc(id / outputStrides[j]);\n      id %= outputStrides[j];\n    }\n  }\n  return [newIndices, [nnz, outputRank], outputShape];\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseSegmentReductionImpl(\n    input: TypedArray, inputShape: number[], inputDType: DataType,\n    indices: TypedArray, segmentIds: TypedArray, isMean = false,\n    defaultValue = 0): [TypedArray, number[]] {\n  const numIndices = indices.length;\n\n  // Flatten the array to two dimensions\n  const inputFlat: number[] = [inputShape[0], input.length / inputShape[0]];\n  const numCol = inputFlat[1];\n  // Note that the current implementation assumes that segmentIds values are\n  // sorted.\n  const lastSegmentIdPlusOne =\n      numIndices > 0 ? segmentIds[numIndices - 1] + 1 : 0;\n  const outputRows = lastSegmentIdPlusOne;\n\n  if (outputRows < 0) {\n    throw new Error(\n        backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());\n  }\n\n  const outputShape = inputShape.slice();\n  outputShape[0] = outputRows;\n\n  const outputLength =\n      outputShape.reduce((product, value) => product * value, 1);\n  // Output array is initialized with the value 0 by default.\n  const output = util.getArrayFromDType(inputDType, outputLength) as TypedArray;\n\n  // Note that we do not initialize the output buffer with a default value, so\n  // we need to explicitly set missing indices to the default value.\n  if (numIndices === 0) {\n    if (outputRows > 0) {\n      output.fill(defaultValue);\n    }\n    return [output, outputShape];\n  }\n\n  if (outputRows <= 0) {\n    throw new Error(\n        backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());\n  }\n\n  let start = 0, end = 1;\n  // Index from which the output is not initialized.\n  let uninitializedIndex = 0;\n  let outIndex = segmentIds[start];\n\n  while (true) {\n    // We initialize nextIndex to 0 to avoid may be uninitialized warning\n    let nextIndex = 0;\n    if (end < numIndices) {\n      nextIndex = segmentIds[end];\n      if (outIndex === nextIndex) {\n        ++end;\n        continue;\n      }\n      // We have a new segment here.  Verify that the segment ids are growing.\n      if (outIndex >= nextIndex) {\n        throw new Error(backend_util\n            .getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage());\n      }\n    }\n\n    if (outIndex < 0 || outIndex >= outputRows) {\n      throw new Error(\n          backend_util.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(\n              outIndex, outputRows));\n    }\n\n    // If there is a gap between two indices, we need to set that gap to the\n    // default value.\n    if (outIndex > uninitializedIndex) {\n      output.fill(defaultValue, uninitializedIndex * numCol, outIndex * numCol);\n    }\n\n    for (let i = start; i < end; ++i) {\n      const index = indices[i];\n      if (index < 0 || index >= inputFlat[0]) {\n        throw new Error(\n            backend_util.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(\n                i, indices[i], inputFlat[0]));\n      }\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] += input[index * numCol + j];\n      }\n    }\n\n    if (isMean) {\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] /= end - start;\n      }\n    }\n\n    start = end;\n    ++end;\n    uninitializedIndex = outIndex + 1;\n    outIndex = nextIndex;\n    if (end > numIndices) {\n      break;\n    }\n  }\n\n  // Fill the gap at the end with the default value.\n  if (uninitializedIndex < outputRows) {\n    output.fill(defaultValue, uninitializedIndex * numCol, outputRows * numCol);\n  }\n\n  return [output, outputShape];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sqrtImpl = createSimpleUnaryImpl((xi) => Math.sqrt(xi));\nexport const sqrt = unaryKernelFunc(Sqrt, (xi) => Math.sqrt(xi));\n\nexport const sqrtConfig: KernelConfig = {\n  kernelName: Sqrt,\n  backendName: 'cpu',\n  kernelFunc: sqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SquaredDifference} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const squaredDifferenceImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => {\n      const diff = a - b;\n      return diff * diff;\n    }));\nexport const squaredDifference =\n    binaryKernelFunc(SquaredDifference, squaredDifferenceImpl);\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'cpu',\n  kernelFunc: squaredDifference\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function stridedSliceImpl<R extends Rank>(\n    outShape: number[], xBuf: TensorBuffer<R>, strides: number[],\n    begin: number[]): TensorBuffer<R> {\n  const outBuf = buffer(outShape, xBuf.dtype);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const loc = outBuf.indexToLoc(i);\n\n    const newLoc: number[] = new Array(loc.length);\n    for (let j = 0; j < newLoc.length; j++) {\n      newLoc[j] = loc[j] * strides[j] + begin[j];\n    }\n    outBuf.set(xBuf.get(...newLoc), ...loc);\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * The StringNGramsOp class creates ngrams from ragged string data.\n * The constructor contains all attributes related to the operation such as\n * padding widths and strings, and the compute function can be used to\n * compute the ngrams for different ragged tensor inputs.\n */\nclass StringNGramsOp {\n  private separator: Uint8Array;\n  private nGramWidths: number[];\n  private padWidth: number;\n  private leftPad: Uint8Array;\n  private rightPad: Uint8Array;\n  private preserveShort: boolean;\n\n  constructor(\n      separator: string, nGramWidths: number[], leftPad: string,\n      rightPad: string, padWidth: number, preserveShortSequences: boolean) {\n    this.separator = util.encodeString(separator);\n    this.nGramWidths = nGramWidths;\n    this.leftPad = util.encodeString(leftPad);\n    this.rightPad = util.encodeString(rightPad);\n    this.padWidth = padWidth;\n    this.preserveShort = preserveShortSequences;\n  }\n\n  private getPadWidth(nGramWidth: number) {\n    // Ngrams can be padded with either a fixed pad width or a dynamic pad\n    // width depending on the 'padWidth' arg, but in no case should the padding\n    // ever be wider than 'nGramWidth' - 1.\n    return Math.min(\n        this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);\n  }\n\n  private getNumNGrams(length: number, nGramWidth: number) {\n    const padWidth = this.getPadWidth(nGramWidth);\n    return Math.max(0, ((length + 2 * padWidth) - nGramWidth) + 1);\n  }\n\n  private createNGrams(\n      data: Uint8Array[], splitIndex: number, output: Uint8Array[],\n      outputStartIndex: number, numNGrams: number, nGramWidth: number) {\n    for (let nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex) {\n      const padWidth = this.getPadWidth(nGramWidth);\n      const leftPadding = Math.max(0, padWidth - nGramIndex);\n      const rightPadding =\n          Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));\n      const numTokens = nGramWidth - (leftPadding + rightPadding);\n      const dataStartIndex =\n          splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth);\n\n      // Calculate the total expected size of the nGram so we can reserve the\n      // correct amount of space in the string.\n      let nGramSize = 0;\n      // Size of the left padding.\n      nGramSize += leftPadding * this.leftPad.length;\n      // Size of the tokens.\n      for (let n = 0; n < numTokens; ++n) {\n        nGramSize += data[dataStartIndex + n].length;\n      }\n      // Size of the right padding.\n      nGramSize += rightPadding * this.rightPad.length;\n      // Size of the separators.\n      const numSeparators = leftPadding + rightPadding + numTokens - 1;\n      nGramSize += numSeparators * this.separator.length;\n\n      // Build the nGram.\n      output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);\n      const nGram = output[outputStartIndex + nGramIndex];\n\n      let nextNGramIndex = 0;\n      const appendToNGram = (str: Uint8Array) =>\n          str.forEach((value) => nGram[nextNGramIndex++] = value);\n\n      for (let n = 0; n < leftPadding; ++n) {\n        appendToNGram(this.leftPad);\n        appendToNGram(this.separator);\n      }\n      // Only output first numTokens - 1 pairs of data and separator\n      for (let n = 0; n < numTokens - 1; ++n) {\n        appendToNGram(data[dataStartIndex + n]);\n        appendToNGram(this.separator);\n      }\n      // Handle case when there are no tokens or no right padding as these\n      // can result in consecutive separators.\n      if (numTokens > 0) {\n        // If we have tokens, then output last and then pair each separator\n        // with the right padding that follows, to ensure nGram ends either with\n        // the token or with the right pad.\n        appendToNGram(data[dataStartIndex + numTokens - 1]);\n        for (let n = 0; n < rightPadding; ++n) {\n          appendToNGram(this.separator);\n          appendToNGram(this.rightPad);\n        }\n      } else {\n        // If we don't have tokens, then the last item inserted into the nGram\n        // has been the separator from the left padding loop above. Hence,\n        // output right pad and separator and make sure to finish with a\n        // padding, not a separator.\n        for (let n = 0; n < rightPadding - 1; ++n) {\n          appendToNGram(this.rightPad);\n          appendToNGram(this.separator);\n        }\n        appendToNGram(this.rightPad);\n      }\n    }\n  }\n\n  // Data and splits together form the definition of the ragged tensor,\n  // where data is 1 dimensional and contains the values of the tensor\n  // and splits denotes the indices at which each row starts.\n  public compute(data: Uint8Array[], splits: Int32Array):\n      [Uint8Array[], Int32Array] {\n    // Validate that the splits are valid indices into data, only if there are\n    // splits specified.\n    const inputDataSize = data.length;\n    const splitsSize = splits.length;\n    if (splitsSize > 0) {\n      let prevSplit = splits[0];\n      if (prevSplit !== 0) {\n        throw new Error(`First split value must be 0, got ${prevSplit}`);\n      }\n      for (let i = 1; i < splitsSize; ++i) {\n        let validSplits = splits[i] >= prevSplit;\n        validSplits = validSplits && (splits[i] <= inputDataSize);\n        if (!validSplits) {\n          throw new Error(`Invalid split value ${splits[i]}, must be in [${\n              prevSplit}, ${inputDataSize}]`);\n        }\n        prevSplit = splits[i];\n      }\n      if (prevSplit !== inputDataSize) {\n        throw new Error(`Last split value must be data size. Expected ${\n            inputDataSize}, got ${prevSplit}`);\n      }\n    }\n\n    const numBatchItems = splitsSize - 1;\n    const nGramsSplits = util.getArrayFromDType('int32', splitsSize);\n    // If there is no data or size, return an empty ragged tensor.\n    if (inputDataSize === 0 || splitsSize === 0) {\n      const empty: Uint8Array[] = new Array(inputDataSize);\n      for (let i = 0; i <= numBatchItems; ++i) {\n        nGramsSplits[i] = 0;\n      }\n      return [empty, nGramsSplits];\n    }\n\n    nGramsSplits[0] = 0;\n    for (let i = 1; i <= numBatchItems; ++i) {\n      const length = splits[i] - splits[i - 1];\n      let numNGrams = 0;\n      this.nGramWidths.forEach((nGramWidth) => {\n        numNGrams += this.getNumNGrams(length, nGramWidth);\n      });\n      if (this.preserveShort && length > 0 && numNGrams === 0) {\n        numNGrams = 1;\n      }\n      nGramsSplits[i] = nGramsSplits[i - 1] + numNGrams;\n    }\n\n    const nGrams: Uint8Array[] = new Array(nGramsSplits[numBatchItems]);\n\n    for (let i = 0; i < numBatchItems; ++i) {\n      const splitIndex = splits[i];\n      let outputStartIdx = nGramsSplits[i];\n      this.nGramWidths.forEach((nGramWidth) => {\n        const length = splits[i + 1] - splits[i];\n        const numNGrams = this.getNumNGrams(length, nGramWidth);\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n        outputStartIdx += numNGrams;\n      });\n      // If we're preserving short sequences, check to see if no sequence was\n      // generated by comparing the current output start idx to the original\n      // one (nGramSplitsdata). If no ngrams were generated, then they will\n      // be equal (since we increment outputStartIdx by numNGrams every\n      // time we create a set of ngrams.)\n      if (this.preserveShort && outputStartIdx === nGramsSplits[i]) {\n        const dataLength = splits[i + 1] - splits[i];\n        // One legitimate reason to not have any ngrams when this.preserveShort\n        // is true is if the sequence itself is empty. In that case, move on.\n        if (dataLength === 0) {\n          continue;\n        }\n        // We don't have to worry about dynamic padding sizes here: if padding\n        // was dynamic, every sequence would have had sufficient padding to\n        // generate at least one nGram.\n        const nGramWidth = dataLength + 2 * this.padWidth;\n        const numNGrams = 1;\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n      }\n    }\n    return [nGrams, nGramsSplits];\n  }\n}\n\nexport function stringNGramsImpl(\n    data: Uint8Array[], dataSplits: Int32Array, separator: string,\n    nGramWidths: number[], leftPad: string, rightPad: string, padWidth: number,\n    preserveShortSequences: boolean): [Uint8Array[], Int32Array] {\n  return new StringNGramsOp(\n             separator, nGramWidths, leftPad, rightPad, padWidth,\n             preserveShortSequences)\n      .compute(data, dataSplits);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction split(\n    str: Uint8Array, delimiters: Uint8Array, skipEmpty: boolean,\n    result: Uint8Array[]): void {\n  if (!str.length) {\n    return;\n  }\n  // When the delimiter is empty, the input is split into individual characters.\n  if (delimiters.length === 0) {\n    for (let i = 0; i < str.length; ++i) {\n      result.push(str.subarray(i, i + 1));\n    }\n    return;\n  }\n  // When there is one delimiter, the input is split only at that delimiter.\n  if (delimiters.length === 1) {\n    const delimiter = delimiters[0];\n    let f = str.indexOf(delimiter);\n    while (f !== -1) {\n      const token = str.subarray(0, f);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      str = str.subarray(f + 1);\n      f = str.indexOf(delimiter);\n    }\n    if (!skipEmpty || str.length !== 0) {\n      result.push(str);\n    }\n    return;\n  }\n  // When there are multiple delimiters, the input is split at every instance\n  // one of the delimiters appears.\n  let tokenStart = 0;\n  for (let i = 0; i < str.length + 1; i++) {\n    if ((i === str.length) || (delimiters.indexOf(str[i]) !== -1)) {\n      const token = str.subarray(tokenStart, i);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      tokenStart = i + 1;\n    }\n  }\n}\n\nexport function stringSplitImpl(\n    input: Uint8Array[], delimiter: Uint8Array,\n    skipEmpty: boolean): [TypedArray, Uint8Array[], [number, number]] {\n  const batchSize = input.length;\n\n  // Empty delimiter means split the input character by character.\n  const tokens: Uint8Array[] = [];\n\n  let outputSize = 0;\n  let maxNumEntries = 0;\n  const numIndices: number[] = new Array(batchSize);\n  for (let i = 0; i < batchSize; ++i) {\n    const prevTokensLength = tokens.length;\n    split(input[i], delimiter, skipEmpty, tokens);\n    const nEntries = tokens.length - prevTokensLength;\n    numIndices[i] = nEntries;\n    outputSize += nEntries;\n    maxNumEntries = Math.max(maxNumEntries, nEntries);\n  }\n\n  const indices = util.getArrayFromDType('int32', outputSize * 2) as TypedArray;\n  const values: Uint8Array[] = new Array(outputSize);\n  const shape: [number, number] = [batchSize, maxNumEntries];\n\n  let c = 0;\n  for (let i = 0; i < batchSize; ++i) {\n    for (let j = 0; j < numIndices[i]; ++j) {\n      // indices is a 2d tensor with shape of [outputSize, 2]\n      indices[c * 2] = i;\n      indices[c * 2 + 1] = j;\n      values[c] = tokens[c];\n      ++c;\n    }\n  }\n\n  return [indices, values, shape];\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function stringToHashBucketFastImpl(\n    input: Uint8Array[], numBuckets: number): TypedArray {\n  const output = util.getArrayFromDType('int32', input.length) as TypedArray;\n\n  for (let i = 0; i < input.length; ++i) {\n    output[i] =\n        util.fingerPrint64(input[i]).modulo(numBuckets).getLowBitsUnsigned();\n  }\n\n  return output;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sub} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const subImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue - bValue));\nexport const subComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal - bReal, imag: aImag - bImag};\n    }));\nexport const sub = binaryKernelFunc(Sub, subImpl, subComplexImpl);\n\nexport const subConfig: KernelConfig = {\n  kernelName: Sub,\n  backendName: 'cpu',\n  kernelFunc: sub\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\n/**\n * An implementation of the tile kernel shared between webgl and cpu for string\n * tensors only.\n */\n\nexport function tileImpl<R extends Rank>(\n    xBuf: TensorBuffer<R, DataType>,\n    reps: number[]): TensorBuffer<R, DataType> {\n  const newShape: number[] = new Array(xBuf.rank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = xBuf.shape[i] * reps[i];\n  }\n  const result = buffer(newShape, xBuf.dtype);\n  for (let i = 0; i < result.values.length; ++i) {\n    const newLoc = result.indexToLoc(i);\n\n    const originalLoc: number[] = new Array(xBuf.rank);\n    for (let j = 0; j < originalLoc.length; j++) {\n      originalLoc[j] = newLoc[j] % xBuf.shape[j];\n    }\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    result.values[i] = xBuf.values[originalIndex];\n  }\n  return result as TensorBuffer<R, DataType>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** An implementation of the TopK kernel shared between webgl and cpu. */\n\nimport {buffer, NumericDataType, Rank, ShapeMap, Tensor, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\ntype Pair = {\n  value: number,\n  index: number\n};\n\nconst comparePair = (a: Pair, b: Pair) => {\n  const valueDiff = b.value - a.value;\n  return valueDiff === 0 ? a.index - b.index : valueDiff;\n};\n\n/**\n * Partitions array where all elements smaller than the (k+1) smallest element\n * are found to the left of it, and all larger to the right of it.\n * Based on the Floyd-Rivest Algorithm, ref:\n * https://en.wikipedia.org/wiki/Floyd%E2%80%93Rivest_algorithm\n * @param array: Array to partition\n * @param left: Left index for the interval\n * @param right: Right index for the interval\n * @param k: Desired index value, where array[k] is the (k+1)th smallest element\n *           when left = 0\n */\nfunction select(array: Pair[], k: number, left = 0, right = array.length - 1) {\n  while (right > left) {\n    // Use select recursively to sample a smaller set of size s\n    // the arbitrary constants 600 and 0.5 are used in the original\n    // version to minimize execution time.\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const i = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * Math.sign(i - n / 2);\n      const newLeft = Math.max(left, Math.floor(k - i * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - i) * s / n + sd));\n      select(array, k, newLeft, newRight);\n    }\n    // partition the elements between left and right around t\n    const t = array[k];\n    let i = left;\n    let j = right;\n\n    util.swap(array, left, k);\n\n    if (comparePair(array[right], t) > 0) {\n      util.swap(array, left, right);\n    }\n    while (i < j) {\n      util.swap(array, i, j);\n      i++;\n      j--;\n      while (comparePair(array[i], t) < 0) {\n        i = i + 1;\n      }\n      while (comparePair(array[j], t) > 0) {\n        j = j - 1;\n      }\n    }\n    if (comparePair(array[left], t) === 0) {\n      util.swap(array, left, j);\n    } else {\n      j = j + 1;\n      util.swap(array, j, right);\n    }\n    // Adjust left and right towards the boundaries of the subset\n    // containing the (k - left + 1)th smallest element.\n    if (j <= k) {\n      left = j + 1;\n    }\n    if (k <= j) {\n      right = j - 1;\n    }\n  }\n}\n\nexport function topKImpl<T extends Tensor, R extends Rank>(\n    x: TypedArray, xShape: number[], xDtype: NumericDataType, k: number,\n    sorted: boolean):\n    [TensorBuffer<R, NumericDataType>, TensorBuffer<R, 'int32'>] {\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const lastDim = xShape[xShape.length - 1];\n  const [batch, size] = [x.length / lastDim, lastDim];\n  const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n  const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = x.subarray(offset, offset + size);\n\n    let valAndInd: Pair[] = new Array(vals.length);\n    vals.forEach(\n        (value: number, index: number) => valAndInd[index] = {value, index});\n\n    if (k < valAndInd.length) {\n      select(valAndInd, k);\n      valAndInd = valAndInd.slice(0, k);\n    }\n\n    if (sorted) {\n      valAndInd.sort(comparePair);\n    }\n    \n    const outOffset = b * k;\n    const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n    const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n    for (let i = 0; i < k; i++) {\n      topKVals[i] = valAndInd[i].value;\n      topKIndices[i] = valAndInd[i].index;\n    }\n  }\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const outputShape = xShape.slice();\n  outputShape[outputShape.length - 1] = k;\n\n  return [\n    buffer(outputShape as ShapeMap[R], xDtype, allTopKVals),\n    buffer(outputShape as ShapeMap[R], 'int32', allTopKIndices)\n  ];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendValues, DataType, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function uniqueImpl(\n    values: BackendValues, axis: number, shape: number[], dtype: DataType): {\n  outputValues: BackendValues,\n  outputShape: number[],\n  indices: BackendValues\n} {\n  // Normalize and validate axis.\n  const $axis = util.parseAxisParam(axis, shape)[0];\n\n  // Calculate the new shape that is suitable for extracting data along the\n  // given axis.\n  //\n  // The rank is 3.\n  // The size of the 1st dimension is the size of all the axes < the given axis.\n  // The size of the 2nd dimension is the same as the size of the given axis.\n  // The size of the 3rd dimension is the size of all the axes > the given axis.\n  //\n  // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\n  // newShape would be: [2*3, 5, 4].\n  //\n  // Note that this is not the final output shape. This will be the shape for an\n  // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\n  // values along the given axis. To demonstrate how it works, consider the\n  // following example:\n  //\n  // Input: a 3D tensor, with shape [1, 2, 3]\n  // [\n  //   [\n  //      [1,2,3],\n  //      [4,5,6]\n  //   ]\n  // ]\n  // Axis: 2 (the last axis).\n  // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\n  //\n  // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\n  // 1*2. The re-shaped data would look like:\n  //\n  // [\n  //   [\n  //     [1], [2], [3]\n  //   ],\n  //   [\n  //     [4], [5], [6]\n  //   ]\n  // ]\n  //\n  // Then, we can construct a 3-level nested loop by the following dimension\n  // order to extract the values along the axis (dimension1):\n  // i: dimension1       // 0,1,2 (newShape[1])\n  //   m: dimension0     // 0,1   (newShape[0])\n  //     n: dimension2   // 0     (newShape[2])\n  //\n  //                       m, i, n\n  //                      ---------\n  // Iteration 0: data at [0, 0, 0] => \"1\"\n  // Iteration 1: data at [1, 0, 0] => \"4\"\n  // We got [1,4].\n  // Iteration 2: data at [0, 1, 0] => \"2\"\n  // Iteration 3: data at [1, 1, 0] => \"5\"\n  // We got [2,5].\n  // Iteration 4: data at [0, 2, 0] => \"3\"\n  // Iteration 5: data at [1, 2, 0] => \"6\"\n  // We got [3,6].\n  const newShape = [1, shape[0], 1];\n  for (let i = 0; i < $axis; i++) {\n    newShape[0] *= shape[i];\n  }\n  newShape[1] = shape[$axis];\n  for (let i = $axis + 1; i < shape.length; i++) {\n    newShape[2] *= shape[i];\n  }\n\n  // A map from unique elements (their string representations) to their values\n  // in \"indices\" (below).\n  const uniqueElements: {[key: string]: number} = {};\n  // The indices of each unique element in the original tensor along the given\n  // axis. It is 1D and has the same size as the given axis.\n  const indices = new Int32Array(shape[$axis]);\n  // Create a buffer so we can easily extract value at a given location.\n  const inputBuffer = new TensorBuffer(newShape, dtype, values as TypedArray);\n  // The indices along the given axis that have unique elements. This is a\n  // de-duped version of \"indices\" above.\n  const uniqueIndices: number[] = [];\n  const is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n  for (let i = 0; i < shape[$axis]; i++) {\n    // Extract values along the axis.\n    let element: string;\n    if (is1DTensor) {\n      // Fast path for 1D tensor input.\n      element = values[i].toString();\n    } else {\n      const axisValues = [];\n      for (let m = 0; m < newShape[0]; m++) {\n        for (let n = 0; n < newShape[2]; n++) {\n          axisValues.push(inputBuffer.get(m, i, n));\n        }\n      }\n      element = axisValues.join(',');\n    }\n\n    // Dedup and update various indices.\n    if (uniqueElements[element] !== undefined) {\n      indices[i] = uniqueElements[element];\n    } else {\n      const uniqueIndex = Object.keys(uniqueElements).length;\n      uniqueElements[element] = uniqueIndex;\n      indices[i] = uniqueIndex;\n      uniqueIndices.push(i);\n    }\n  }\n\n  // Now we know where each of the unique elements are located along the axis\n  // (uniqueIndices). Extract them from input buffer and store them in the\n  // output buffer.\n  const outputTmpShape = newShape.slice();\n  outputTmpShape[1] = Object.keys(uniqueElements).length;\n  const outputBuffer = new TensorBuffer(outputTmpShape, dtype);\n  uniqueIndices.forEach((uniqueElementIndex, i) => {\n    for (let m = 0; m < newShape[0]; m++) {\n      for (let n = 0; n < newShape[2]; n++) {\n        outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);\n      }\n    }\n  });\n\n  // The output shape can be calculated from the input shape with the size of\n  // the given axis replaced by the number of unique elements along that axis.\n  const outputShape = shape.slice();\n  outputShape[$axis] = outputTmpShape[1];\n\n  return {\n    outputValues: outputBuffer.values as BackendValues,\n    outputShape,\n    indices,\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/*\n * base.ts contains all the exports from tfjs-backend-cpu\n * without auto-kernel registration\n */\nimport {registerBackend} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from './backend_cpu';\nimport * as shared from './shared';\n\nexport {MathBackendCPU} from './backend_cpu';\nexport {version as version_cpu} from './version';\nexport {shared};\n\n// Side effects for default initialization of MathBackendCPU\nregisterBackend('cpu', () => new MathBackendCPU(), 1 /* priority */);\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Elu, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const elu =\n    unaryKernelFunc(Elu, (xi) => xi >= 0 ? xi : (Math.exp(xi) - 1));\n\nexport const eluConfig: KernelConfig = {\n  kernelName: Elu,\n  backendName: 'cpu',\n  kernelFunc: elu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LeakyRelu, LeakyReluAttrs, LeakyReluInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function leakyRelu(args: {\n  inputs: LeakyReluInputs,\n  backend: MathBackendCPU,\n  attrs: LeakyReluAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {alpha} = attrs;\n\n  assertNotComplex([x], 'leakyRelu');\n\n  const xSize = util.sizeFromShape(x.shape);\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const outVals = util.getTypedArrayFromDType('float32', xSize);\n\n  for (let i = 0; i < xVals.length; i++) {\n    outVals[i] = xVals[i] < 0 ? alpha * xVals[i] : xVals[i];\n  }\n\n  return backend.makeTensorInfo(x.shape, 'float32', outVals);\n}\n\nexport const leakyReluConfig: KernelConfig = {\n  kernelName: LeakyRelu,\n  backendName: 'cpu',\n  kernelFunc: leakyRelu as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Prelu, PreluInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\n\nconst preluImpl = createSimpleBinaryKernelImpl(\n    (xValue: number, aValue: number) => xValue < 0 ? aValue * xValue : xValue);\n\nexport function prelu(args: {inputs: PreluInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x, alpha} = inputs;\n\n  assertNotComplex([x, alpha], 'prelu');\n\n  const aVals = backend.data.get(x.dataId).values as TypedArray;\n  const bVals = backend.data.get(alpha.dataId).values as TypedArray;\n\n  const [resultData, resultShape] =\n      preluImpl(x.shape, alpha.shape, aVals, bVals, 'float32');\n\n  return backend.makeTensorInfo(resultShape, 'float32', resultData);\n}\n\nexport const preluConfig: KernelConfig = {\n  kernelName: Prelu,\n  backendName: 'cpu',\n  kernelFunc: prelu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Relu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const relu = unaryKernelFunc(Relu, (xi) => Math.max(0, xi));\n\nexport const reluConfig: KernelConfig = {\n  kernelName: Relu,\n  backendName: 'cpu',\n  kernelFunc: relu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Relu6} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const relu6 =\n    unaryKernelFunc(Relu6, (xi) => Math.min(Math.max(0, xi), 6));\n\nexport const relu6Config: KernelConfig = {\n  kernelName: Relu6,\n  backendName: 'cpu',\n  kernelFunc: relu6,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {elu} from '../kernels/Elu';\nimport {identity} from '../kernels/Identity';\nimport {leakyRelu} from '../kernels/LeakyRelu';\nimport {prelu} from '../kernels/Prelu';\nimport {relu} from '../kernels/Relu';\nimport {relu6} from '../kernels/Relu6';\nimport {sigmoid} from '../kernels/Sigmoid';\n\nexport function applyActivation(\n    backend: MathBackendCPU, x: TensorInfo, activation: backend_util.Activation,\n    preluActivationWeights?: TensorInfo, leakyreluAlpha?: number): TensorInfo {\n  if (activation === 'linear') {\n    return identity({inputs: {x}, backend});\n  } else if (activation === 'relu') {\n    return relu({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'elu') {\n    return elu({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'relu6') {\n    return relu6({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'prelu') {\n    return prelu({inputs: {x, alpha: preluActivationWeights}, backend});\n  } else if (activation === 'leakyrelu') {\n    return leakyRelu({inputs: {x}, backend, attrs: {alpha: leakyreluAlpha}});\n  } else if (activation === 'sigmoid') {\n    return sigmoid({inputs: {x}, backend}) as TensorInfo;\n  }\n  throw new Error(\n      `Activation ${activation} has not been implemented for the CPU backend.`);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reshape, ReshapeAttrs, ReshapeInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function reshape(\n    args:\n        {inputs: ReshapeInputs, backend: MathBackendCPU, attrs: ReshapeAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {shape} = attrs;\n\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n\n  util.assert(\n      xSize === $xSize,\n      () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n          `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n          `shape must have the same number of elements.`);\n\n  backend.incRef(x.dataId);\n\n  const xData = backend.data.get(x.dataId);\n\n  if (xData.complexTensorInfos != null) {\n    const real = xData.complexTensorInfos.real;\n    const imag = xData.complexTensorInfos.imag;\n\n    real.shape = $shape;\n    imag.shape = $shape;\n  }\n\n  return {dataId: x.dataId, shape: $shape, dtype: x.dtype};\n}\n\nexport const reshapeConfig: KernelConfig = {\n  kernelName: Reshape,\n  backendName: 'cpu',\n  kernelFunc: reshape as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BatchMatMul, BatchMatMulAttrs, BatchMatMulInputs, broadcast_util, buffer, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {reshape} from './Reshape';\n\nexport function batchMatMul(args: {\n  inputs: BatchMatMulInputs,\n  attrs: BatchMatMulAttrs,\n  backend: MathBackendCPU\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b} = inputs;\n  const {transposeA, transposeB} = attrs;\n\n  assertNotComplex([a, b], 'matMul');\n\n  const aRank = a.shape.length;\n  const bRank = b.shape.length;\n\n  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n\n  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n\n  const outerDimsA = a.shape.slice(0, -2);\n  const outerDimsB = b.shape.slice(0, -2);\n\n  const batchDimA = util.sizeFromShape(outerDimsA);\n  const batchDimB = util.sizeFromShape(outerDimsB);\n\n  const outShapeOuterDims = broadcast_util.assertAndGetBroadcastShape(\n      a.shape.slice(0, -2), b.shape.slice(0, -2));\n  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n\n  util.assert(\n      innerShapeA === innerShapeB,\n      () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n          `${innerShapeB}) of Tensors with shapes ${a.shape} and ` +\n          `${b.shape} and transposeA=${transposeA}` +\n          ` and transposeB=${transposeB} must match.`);\n\n  const a3dShape = transposeA ? [batchDimA, innerShapeA, outerShapeA] :\n                                [batchDimA, outerShapeA, innerShapeA];\n  const b3dShape = transposeB ? [batchDimB, outerShapeB, innerShapeB] :\n                                [batchDimB, innerShapeB, outerShapeB];\n\n  // The rest of the implementation is designed to operate on rank-3 tensors\n  const a3d = reshape({inputs: {x: a}, backend, attrs: {shape: a3dShape}});\n  const b3d = reshape({inputs: {x: b}, backend, attrs: {shape: b3dShape}});\n\n  const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];\n  const leftDim = transposeA ? a3d.shape[2] : a3d.shape[1];\n  const rightDim = transposeB ? b3d.shape[1] : b3d.shape[2];\n  const batchDim = Math.max(batchDimA, batchDimB);\n\n  const a3dValues = backend.data.get(a3d.dataId).values as TypedArray;\n  const b3dValues = backend.data.get(b3d.dataId).values as TypedArray;\n\n  const a3dStrides = util.computeStrides(a3d.shape);\n  const b3dStrides = util.computeStrides(b3d.shape);\n\n  const [aBatch, aOuterStep, aInnerStep] = transposeA ?\n      [a3dStrides[0], 1, a3dStrides[1]] :\n      [a3dStrides[0], a3dStrides[1], 1];\n  const [bInnerStep, bOuterStep, bBatch] = transposeB ?\n      [1, b3dStrides[1], b3dStrides[0]] :\n      [b3dStrides[1], 1, b3dStrides[0]];\n\n  const size = leftDim * rightDim;\n  const result = buffer([batchDim, leftDim, rightDim], a3d.dtype);\n\n  const resVals = result.values as TypedArray;\n  const blockSize = backend.blockSize;\n\n  for (let bi = 0; bi < batchDim; bi++) {\n    for (let i0 = 0; i0 < leftDim; i0 += blockSize) {\n      for (let j0 = 0; j0 < rightDim; j0 += blockSize) {\n        for (let k0 = 0; k0 < sharedDim; k0 += blockSize) {\n          // for when blockSize doesn't evenly divide the input\n          const iBlock = Math.min(i0 + blockSize, leftDim);\n          const jBlock = Math.min(j0 + blockSize, rightDim);\n          const kBlock = Math.min(k0 + blockSize, sharedDim);\n\n          for (let i = i0; i < iBlock; i++) {\n            for (let j = j0; j < jBlock; j++) {\n              let sum = 0.0;\n\n              for (let k = k0; k < kBlock; k++) {\n                const batchOffsetA = Math.min(bi, batchDimA - 1) * aBatch;\n                const batchOffsetB = Math.min(bi, batchDimB - 1) * bBatch;\n                const aVal =\n                    a3dValues[batchOffsetA + i * aOuterStep + k * aInnerStep];\n                const bVal =\n                    b3dValues[k * bInnerStep + j * bOuterStep + batchOffsetB];\n                sum += aVal * bVal;\n              }\n              resVals[bi * size + (i * rightDim + j)] += sum;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  backend.disposeIntermediateTensorInfo(a3d);\n  backend.disposeIntermediateTensorInfo(b3d);\n\n  // set correct shape on output.\n  return backend.makeTensorInfo(\n      outShape, result.dtype, result.values as TypedArray);\n}\n\nexport const batchMatMulConfig: KernelConfig = {\n  kernelName: BatchMatMul,\n  backendName: 'cpu',\n  kernelFunc: batchMatMul as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\n\nimport {add} from './Add';\nimport {batchMatMul} from './BatchMatMul';\n\nexport function _fusedMatMul(args: {\n  inputs: _FusedMatMulInputs,\n  attrs: _FusedMatMulAttrs,\n  backend: MathBackendCPU\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b, bias, preluActivationWeights} = inputs;\n  const {transposeA, transposeB, activation, leakyreluAlpha} = attrs;\n\n  let current;\n  let addRes;\n  let activationRes;\n\n  const intermediates: TensorInfo[] = [];\n\n  const matMulRes =\n      batchMatMul({inputs: {a, b}, attrs: {transposeA, transposeB}, backend});\n  current = matMulRes;\n\n  if (bias) {\n    addRes = add({inputs: {a: current, b: bias}, backend}) as TensorInfo;\n    intermediates.push(current);\n    current = addRes;\n  }\n  if (activation) {\n    activationRes = applyActivation(\n        backend, current, activation, preluActivationWeights, leakyreluAlpha);\n    intermediates.push(current);\n    current = activationRes;\n  }\n\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return current;\n}\n\nexport const _fusedMatMulConfig: KernelConfig = {\n  kernelName: _FusedMatMul,\n  backendName: 'cpu',\n  kernelFunc: _fusedMatMul as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const acos = unaryKernelFunc(Acos, (xi) => Math.acos(xi));\n\nexport const acosConfig: KernelConfig = {\n  kernelName: Acos,\n  backendName: 'cpu',\n  kernelFunc: acos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const acosh = unaryKernelFunc(Acosh, (xi) => Math.acosh(xi));\n\nexport const acoshConfig: KernelConfig = {\n  kernelName: Acosh,\n  backendName: 'cpu',\n  kernelFunc: acosh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AddN, AddNInputs, buffer, KernelConfig, KernelFunc, Tensor, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function addN(args: {inputs: AddNInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const tensors = inputs as Tensor[];\n\n  assertNotComplex(inputs, 'addN');\n\n  const vals =\n      tensors.map(t => backend.data.get(t.dataId).values as TypedArray);\n  const outBuf = buffer(tensors[0].shape, tensors[0].dtype as 'float32');\n  const outVals = outBuf.values;\n  for (let i = 0; i < tensors.length; i++) {\n    const currVals = vals[i];\n    for (let j = 0; j < outVals.length; j++) {\n      outVals[j] += currVals[j];\n    }\n  }\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const addNConfig: KernelConfig = {\n  kernelName: AddN,\n  backendName: 'cpu',\n  kernelFunc: addN as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {All, AllAttrs, AllInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function all(\n    args: {inputs: AllInputs, backend: MathBackendCPU, attrs: AllAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'all');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('all', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let all = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      all = all && value;\n    }\n    vals[i] = all;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const allConfig: KernelConfig = {\n  kernelName: All,\n  backendName: 'cpu',\n  kernelFunc: all as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Any, AnyAttrs, AnyInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function any(\n    args: {inputs: AnyInputs, backend: MathBackendCPU, attrs: AnyAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'any');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('any', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let anyVal = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      anyVal = anyVal || value;\n    }\n    vals[i] = anyVal;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const anyConfig: KernelConfig = {\n  kernelName: Any,\n  backendName: 'cpu',\n  kernelFunc: any as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMax, ArgMaxAttrs, ArgMaxInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function argMax(\n    args: {inputs: ArgMaxInputs, backend: MathBackendCPU, attrs: ArgMaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  assertNotComplex(x, 'argMax');\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  axes = [axes[0]];\n  backend_util.assertAxesAreInnerMostDims('argMax', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n\n  const outSize = util.sizeFromShape(outShape);\n  const vals = util.makeZerosTypedArray(outSize, 'int32');\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    let maxIndex = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value > max) {\n        max = value;\n        maxIndex = j;\n      }\n    }\n    vals[i] = maxIndex;\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(outShape, 'int32', vals);\n}\n\nexport const argMaxConfig: KernelConfig = {\n  kernelName: ArgMax,\n  backendName: 'cpu',\n  kernelFunc: argMax as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMin, ArgMinAttrs, ArgMinInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function argMin(\n    args: {inputs: ArgMinInputs, backend: MathBackendCPU, attrs: ArgMinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  assertNotComplex(x, 'argMin');\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  axes = [axes[0]];\n  backend_util.assertAxesAreInnerMostDims('argMin', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n\n  const outSize = util.sizeFromShape(outShape);\n  const vals = util.makeZerosTypedArray(outSize, 'int32');\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let min = aVals[offset];\n    let minIndex = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value < min) {\n        min = value;\n        minIndex = j;\n      }\n    }\n    vals[i] = minIndex;\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(outShape, 'int32', vals);\n}\n\nexport const argMinConfig: KernelConfig = {\n  kernelName: ArgMin,\n  backendName: 'cpu',\n  kernelFunc: argMin as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asin, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const asin = unaryKernelFunc(Asin, (xi) => Math.asin(xi));\n\nexport const asinConfig: KernelConfig = {\n  kernelName: Asin,\n  backendName: 'cpu',\n  kernelFunc: asin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asinh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const asinh = unaryKernelFunc(Asinh, (xi) => Math.asinh(xi));\n\nexport const asinhConfig: KernelConfig = {\n  kernelName: Asinh,\n  backendName: 'cpu',\n  kernelFunc: asinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const atan = unaryKernelFunc(Atan, (xi) => Math.atan(xi));\n\nexport const atanConfig: KernelConfig = {\n  kernelName: Atan,\n  backendName: 'cpu',\n  kernelFunc: atan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan2, KernelConfig} from '@tensorflow/tfjs-core';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const atan2Impl = createSimpleBinaryKernelImpl(\n    (aValue, bValue) => Math.atan2(aValue as number, bValue as number));\n\nexport const atan2 = binaryKernelFunc(Atan2, atan2Impl);\n\nexport const atan2Config: KernelConfig = {\n  kernelName: Atan2,\n  backendName: 'cpu',\n  kernelFunc: atan2,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atanh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const atanh = unaryKernelFunc(Atanh, (xi) => Math.atanh(xi));\n\nexport const atanhConfig: KernelConfig = {\n  kernelName: Atanh,\n  backendName: 'cpu',\n  kernelFunc: atanh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, DataType, Rank, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function pool(\n    xValues: TypedArray, xShape: number[], dtype: DataType, strides: number[],\n    convInfo: backend_util.Conv2DInfo,\n    poolType: 'max'|'avg'): TensorBuffer<Rank, DataType> {\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const initialValue =\n      (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                            Number.POSITIVE_INFINITY);\n\n  const output = buffer(convInfo.outShape, dtype);\n  const outputVals = output.values;\n\n  const outputBatchStrides =\n      convInfo.outShape[1] * convInfo.outShape[2] * convInfo.outShape[3];\n  const outputRowStrides = convInfo.outShape[2] * convInfo.outShape[3];\n  const outputColStrides = convInfo.outShape[3];\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const outputBatchOffset = b * outputBatchStrides;\n    const inputBatchOffset = b * strides[0];\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        const xRMin = Math.max(0, xRCorner);\n        const xRMax =\n            Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        const outputRowOffset = outputBatchOffset + yR * outputRowStrides;\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          const xCMin = Math.max(0, xCCorner);\n          const xCMax =\n              Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let minMaxValue = initialValue;\n          let avgValue = 0;\n          let count = 0;\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const xROffset = inputBatchOffset + xR * strides[1];\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const xCOffset = xROffset + xC * strides[2];\n              const pixel = xValues[xCOffset + d];\n              if ((poolType === 'max' && pixel > minMaxValue)) {\n                minMaxValue = pixel;\n              } else if (poolType === 'avg') {\n                avgValue += pixel;\n                count++;\n              }\n            }\n            if (isNaN(minMaxValue)) {\n              break;\n            }\n          }\n          const outputOffset = outputRowOffset + yC * outputColStrides + d;\n          outputVals[outputOffset] =\n              poolType === 'avg' ? avgValue / count : minMaxValue;\n        }\n      }\n    }\n  }\n  return output;\n}\n\nexport function maxPoolPositions(\n    xValues: TypedArray, xShape: number[], dtype: DataType,\n    convInfo: backend_util.Conv2DInfo, flattenPositions = false,\n    includeBatchInIndex = false): TensorBuffer<Rank, 'int32'> {\n  const maxPositions = buffer(convInfo.outShape, 'int32');\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const xBuf = buffer(xShape, dtype, xValues);\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        let xRMin = xRCorner;\n        while (xRMin < 0) {\n          xRMin += dilationHeight;\n        }\n        // const xRMin = Math.max(0, xRCorner);\n        const xRMax =\n            Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          let xCMin = xCCorner;\n          while (xCMin < 0) {\n            xCMin += dilationWidth;\n          }\n          const xCMax =\n              Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let maxValue = Number.NEGATIVE_INFINITY;\n          let maxPosition = -1;\n\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const wR = xR - xRCorner;\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const wC = xC - xCCorner;\n              const pixel = xBuf.get(b, xR, xC, d);\n              if (pixel > maxValue) {\n                maxValue = pixel as number;\n                if (flattenPositions) {\n                  maxPosition = includeBatchInIndex ?\n                      ((b * convInfo.inHeight + xR) * convInfo.inWidth + xC) *\n                              convInfo.inChannels +\n                          d :\n                      (xR * convInfo.inWidth + xC) * convInfo.inChannels + d;\n                } else {\n                  maxPosition = wR * effectiveFilterWidth + wC;\n                }\n              }\n            }\n          }\n          maxPositions.set(maxPosition, b, yR, yC, d);\n        }\n      }\n    }\n  }\n  return maxPositions;\n}\n\nexport function pool3d(\n    xValues: TypedArray, xShape: number[], dtype: DataType, strides: number[],\n    convInfo: backend_util.Conv3DInfo,\n    poolType: 'max'|'avg'): TensorBuffer<Rank, DataType> {\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = convInfo.padInfo.front;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const initialValue =\n      (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                            Number.POSITIVE_INFINITY);\n\n  const output = buffer(convInfo.outShape, dtype);\n  const outputVals = output.values;\n\n  const outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] *\n      convInfo.outShape[3] * convInfo.outShape[4];\n  const outputDepthStrides =\n      convInfo.outShape[2] * convInfo.outShape[3] * convInfo.outShape[4];\n  const outputRowStrides = convInfo.outShape[3] * convInfo.outShape[4];\n  const outputColStrides = convInfo.outShape[4];\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    const outputBatchOffset = batch * outputBatchStrides;\n    const inputBatchOffset = batch * strides[0];\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n        const xDepthCorner = yDepth * strideDepth - padFront;\n        let xDepthMin = xDepthCorner;\n        while (xDepthMin < 0) {\n          xDepthMin += dilationDepth;\n        }\n        const xDepthMax =\n            Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n        const outputDepthOffset =\n            outputBatchOffset + yDepth * outputDepthStrides;\n        for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n          const xRowCorner = yRow * strideHeight - padTop;\n          let xRowMin = xRowCorner;\n          while (xRowMin < 0) {\n            xRowMin += dilationHeight;\n          }\n          const xRowMax =\n              Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n          const outputRowOffset = outputDepthOffset + yRow * outputRowStrides;\n          for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n            const xColCorner = yCol * strideWidth - padLeft;\n            let xColMin = xColCorner;\n            while (xColMin < 0) {\n              xColMin += dilationWidth;\n            }\n            const xColMax =\n                Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n            // Shader code begins\n            const outputColOffset = outputRowOffset + yCol * outputColStrides;\n            let minMaxValue = initialValue;\n            let avgValue = 0;\n            let count = 0;\n            for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                 xDepth += dilationDepth) {\n              const xDepthOffset = inputBatchOffset + xDepth * strides[1];\n              for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                const xRowOffset = xDepthOffset + xRow * strides[2];\n                for (let xCol = xColMin; xCol < xColMax;\n                     xCol += dilationWidth) {\n                  const xColOffset = xRowOffset + xCol * strides[3];\n                  const pixel = xValues[xColOffset + channel];\n                  if ((poolType === 'max' && pixel > minMaxValue)) {\n                    minMaxValue = pixel;\n                  } else if (poolType === 'avg') {\n                    avgValue += pixel;\n                    count++;\n                  }\n                  if (isNaN(minMaxValue)) {\n                    break;\n                  }\n                }\n                if (isNaN(minMaxValue)) {\n                  break;\n                }\n              }\n              if (isNaN(minMaxValue)) {\n                break;\n              }\n            }\n            const outputOffset = outputColOffset + channel;\n            outputVals[outputOffset] =\n                poolType === 'avg' ? avgValue / count : minMaxValue;\n          }\n        }\n      }\n    }\n  }\n\n  return output;\n}\n\nexport function maxPool3dPositions(\n    xBuf: TensorBuffer<Rank, DataType>,\n    convInfo: backend_util.Conv3DInfo): TensorBuffer<Rank, DataType> {\n  const maxPositions = buffer(convInfo.outShape, 'int32');\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = convInfo.padInfo.front;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n        const xDepthCorner = yDepth * strideDepth - padFront;\n        let xDepthMin = xDepthCorner;\n        while (xDepthMin < 0) {\n          xDepthMin += dilationDepth;\n        }\n        const xDepthMax =\n            Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n        for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n          const xRowCorner = yRow * strideHeight - padTop;\n          let xRowMin = xRowCorner;\n          while (xRowMin < 0) {\n            xRowMin += dilationHeight;\n          }\n          const xRowMax =\n              Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n          for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n            const xColCorner = yCol * strideWidth - padLeft;\n            let xColMin = xColCorner;\n            while (xColMin < 0) {\n              xColMin += dilationWidth;\n            }\n            const xColMax =\n                Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n\n            // Shader code begins\n            let maxValue = Number.NEGATIVE_INFINITY;\n            let maxPosition = -1;\n\n            for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                 xDepth += dilationDepth) {\n              const wDepth = xDepth - xDepthCorner;\n              for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                const wRow = xRow - xRowCorner;\n                for (let xCol = xColMin; xCol < xColMax;\n                     xCol += dilationWidth) {\n                  const wCol = xCol - xColCorner;\n                  const pixel = xBuf.get(batch, xDepth, xRow, xCol, channel);\n                  if (pixel >= maxValue) {\n                    maxValue = pixel as number;\n                    maxPosition =\n                        wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                        wRow * effectiveFilterHeight + wCol;\n                  }\n                }\n              }\n            }\n\n            maxPositions.set(maxPosition, batch, yDepth, yRow, yCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return maxPositions;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool, AvgPoolAttrs, AvgPoolInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool} from '../utils/pool_utils';\nimport {identity} from './Identity';\n\nexport function avgPool(\n    args:\n        {inputs: AvgPoolInputs, backend: MathBackendCPU, attrs: AvgPoolAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'avgPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in avgPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  let res: TensorInfo;\n\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    res = identity({inputs: {x}, backend});\n  } else {\n    const xValues = backend.data.get(x.dataId).values as TypedArray;\n    const strides = util.computeStrides(x.shape);\n    const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'avg');\n    res = backend.makeTensorInfo(\n        convInfo.outShape, x.dtype, buffer.values as TypedArray);\n  }\n  return res;\n}\n\nexport const avgPoolConfig: KernelConfig = {\n  kernelName: AvgPool,\n  backendName: 'cpu',\n  kernelFunc: avgPool as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPool3D, AvgPool3DAttrs, AvgPool3DInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool3d} from '../utils/pool_utils';\n\nexport function avgPool3D(args: {\n  inputs: AvgPool3DInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat} = attrs;\n\n  assertNotComplex(x, 'avgPool3d');\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode, dataFormat);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = pool3d(\n      xValues, x.shape, x.dtype, util.computeStrides(x.shape), convInfo, 'avg');\n\n  return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);\n}\n\nexport const avgPool3DConfig: KernelConfig = {\n  kernelName: AvgPool3D,\n  backendName: 'cpu',\n  kernelFunc: avgPool3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPool3DGrad, AvgPool3DGradAttrs, AvgPool3DGradInputs, backend_util, buffer, KernelConfig, KernelFunc, Rank, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function avgPool3DGrad(args: {\n  inputs: AvgPool3DGradInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, input], 'avgPool3DGrad');\n\n  const convInfo = backend_util.computePool3DInfo(\n      input.shape as [number, number, number, number, number], filterSize,\n      strides, 1 /* dilations */, pad, dimRoundingMode);\n\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterDepth = convInfo.filterDepth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(input.shape, 'float32');\n\n  const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n\n  const dyBuf = backend.bufferSync<Rank, 'float32'>(dy);\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n        for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n          for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n            // Shader code begins.\n            const dyDepthCorner = dxDepth - padFront;\n            const dyRowCorner = dxRow - padTop;\n            const dyColCorner = dxCol - padLeft;\n            let dotProd = 0;\n            for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                 wDepth += dilationDepth) {\n              const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n              if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                  Math.floor(dyDepth) !== dyDepth) {\n                continue;\n              }\n              for (let wRow = 0; wRow < effectiveFilterHeight;\n                   wRow += dilationHeight) {\n                const dyRow = (dyRowCorner + wRow) / strideHeight;\n                if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                    Math.floor(dyRow) !== dyRow) {\n                  continue;\n                }\n                for (let wCol = 0; wCol < effectiveFilterWidth;\n                     wCol += dilationWidth) {\n                  const dyCol = (dyColCorner + wCol) / strideWidth;\n                  if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                      Math.floor(dyCol) !== dyCol) {\n                    continue;\n                  }\n\n                  const pixel =\n                      dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                  dotProd += pixel;\n                }\n              }\n            }\n            dx.set(\n                dotProd * avgMultiplier, batch, dxDepth, dxRow, dxCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const avgPool3DGradConfig: KernelConfig = {\n  kernelName: AvgPool3DGrad,\n  backendName: 'cpu',\n  kernelFunc: avgPool3DGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPoolGrad, AvgPoolGradAttrs, AvgPoolGradInputs, backend_util, buffer, KernelConfig, KernelFunc, Rank, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function avgPoolGrad(args: {\n  inputs: AvgPoolGradInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  assertNotComplex([dy, input], 'avgPoolGrad');\n  const {filterSize, strides, pad} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad);\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx =\n      buffer<Rank.R4>(x.shape as [number, number, number, number], 'float32');\n\n  const avgMultiplier = 1 / (filterHeight * filterWidth);\n\n  const dyData = backend.data.get(dy.dataId).values as Float32Array;\n  const dyBuf = buffer<Rank.R4>(\n      dy.shape as [number, number, number, number], 'float32', dyData);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          // Shader code begins.\n          const dyRCorner = dxR - padTop;\n          const dyCCorner = dxC - padLeft;\n          let dotProd = 0;\n          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            const dyR = (dyRCorner + wR) / strideHeight;\n            if (dyR < 0 || dyR >= convInfo.outHeight ||\n                Math.floor(dyR) !== dyR) {\n              continue;\n            }\n            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              const dyC = (dyCCorner + wC) / strideWidth;\n              if (dyC < 0 || dyC >= convInfo.outWidth ||\n                  Math.floor(dyC) !== dyC) {\n                continue;\n              }\n\n              const pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel;\n            }\n          }\n          dx.set(dotProd * avgMultiplier, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const avgPoolGradConfig: KernelConfig = {\n  kernelName: AvgPoolGrad,\n  backendName: 'cpu',\n  kernelFunc: avgPoolGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedBatchNorm, FusedBatchNormAttrs, FusedBatchNormInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function batchNorm(args: {\n  inputs: FusedBatchNormInputs,\n  backend: MathBackendCPU,\n  attrs: FusedBatchNormAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, scale, offset, mean, variance} = inputs;\n\n  util.assert(\n      mean.shape.length === variance.shape.length,\n      () => 'Batch normalization gradient requires mean and variance to have ' +\n          'equal ranks.');\n  util.assert(\n      offset == null || mean.shape.length === offset.shape.length,\n      () => 'Batch normalization gradient requires mean and offset to have ' +\n          'equal ranks.');\n  util.assert(\n      scale == null || mean.shape.length === scale.shape.length,\n      () => 'Batch normalization gradient requires mean and scale to have ' +\n          'equal ranks.');\n\n  assertNotComplex([x, mean, variance, scale, offset], 'batchNorm');\n\n  let {varianceEpsilon} = attrs;\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const mVals = backend.data.get(mean.dataId).values as TypedArray;\n  const varVals = backend.data.get(variance.dataId).values as TypedArray;\n  const sVals = scale ? backend.data.get(scale.dataId).values as TypedArray :\n                        new Float32Array([1]);\n  const offVals = offset ?\n      backend.data.get(offset.dataId).values as TypedArray :\n      new Float32Array([0]);\n  const outVals = new Float32Array(xVals.length);\n\n  const offValsLength = offVals.length;\n  const sValsLength = sVals.length;\n  const varValsLength = varVals.length;\n  const mValsLength = mVals.length;\n\n  let offi = 0;\n  let mi = 0;\n  let si = 0;\n  let vi = 0;\n  for (let i = 0; i < xVals.length; ++i) {\n    outVals[i] = offVals[offi++] +\n        (xVals[i] - mVals[mi++]) * sVals[si++] /\n            Math.sqrt(varVals[vi++] + varianceEpsilon);\n    if (offi >= offValsLength) {\n      offi = 0;\n    }\n    if (mi >= mValsLength) {\n      mi = 0;\n    }\n    if (si >= sValsLength) {\n      si = 0;\n    }\n    if (vi >= varValsLength) {\n      vi = 0;\n    }\n  }\n  return backend.makeTensorInfo(x.shape, x.dtype, outVals);\n}\n\nexport const batchNormConfig: KernelConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'cpu',\n  kernelFunc: batchNorm as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BatchToSpaceND, BatchToSpaceNDAttrs, BatchToSpaceNDInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {transpose} from './Transpose';\n\nexport function batchToSpaceND(args: {\n  inputs: BatchToSpaceNDInputs,\n  backend: MathBackendCPU,\n  attrs: BatchToSpaceNDAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, crops} = attrs;\n\n  assertNotComplex([x], 'batchToSpaceND');\n\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted =\n      backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords =\n      backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize =\n      backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n  const xReshaped = reshape({inputs: {x}, backend, attrs: {shape: reshaped}});\n  const xTransposed =\n      transpose({inputs: {x: xReshaped}, backend, attrs: {perm: permuted}});\n  const xTransposedReshaped = reshape(\n      {inputs: {x: xTransposed}, backend, attrs: {shape: reshapedPermuted}});\n  const result = slice({\n    inputs: {x: xTransposedReshaped},\n    backend,\n    attrs: {begin: sliceBeginCoords, size: sliceSize}\n  });\n\n  backend.disposeIntermediateTensorInfo(xReshaped);\n  backend.disposeIntermediateTensorInfo(xTransposed);\n  backend.disposeIntermediateTensorInfo(xTransposedReshaped);\n\n  return result;\n}\n\nexport const batchToSpaceNDConfig: KernelConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'cpu',\n  kernelFunc: batchToSpaceND as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Bincount, BincountAttrs, BincountInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {bincountImpl} from './Bincount_impl';\n\nexport function bincount(args: {\n  inputs: BincountInputs,\n  backend: MathBackendCPU,\n  attrs: BincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size} = attrs;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const weightsVals = backend.data.get(weights.dataId).values as TypedArray;\n\n  const outVals =\n      bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n  return backend.makeTensorInfo([size], weights.dtype, outVals);\n}\n\nexport const bincountConfig: KernelConfig = {\n  kernelName: Bincount,\n  backendName: 'cpu',\n  kernelFunc: bincount as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BroadcastArgs, BroadcastArgsInputs, KernelConfig, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function broadcastArgs(args: {\n  inputs: BroadcastArgsInputs,\n  backend: MathBackendCPU,\n}): TensorInfo {\n  const {inputs, backend} = args;\n  const {s0, s1} = inputs;\n\n  const s0Vals = backend.data.get(s0.dataId).values as TypedArray;\n  const s1Vals = backend.data.get(s1.dataId).values as TypedArray;\n\n  const broadcastShape = backend_util.assertAndGetBroadcastShape(\n      Array.from(s0Vals), Array.from(s1Vals));\n\n  return backend.makeTensorInfo(\n      [broadcastShape.length], 'int32', Int32Array.from(broadcastShape));\n}\n\nexport const broadcastArgsConfig: KernelConfig = {\n  kernelName: BroadcastArgs,\n  backendName: 'cpu',\n  kernelFunc: broadcastArgs\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ClipByValue, ClipByValueAttrs, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const clipByValue = unaryKernelFunc(ClipByValue, (xi, attrs) => {\n  const clipAttrs = attrs as {} as ClipByValueAttrs;\n  if (xi > clipAttrs.clipValueMax) {\n    return clipAttrs.clipValueMax;\n  }\n  return xi < clipAttrs.clipValueMin ? clipAttrs.clipValueMin : xi;\n});\n\nexport const clipByValueConfig: KernelConfig = {\n  kernelName: ClipByValue,\n  backendName: 'cpu',\n  kernelFunc: clipByValue,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ComplexAbs, ComplexAbsInputs, KernelConfig, KernelFunc, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const complexAbs =\n    (args: {inputs: ComplexAbsInputs, backend: MathBackendCPU}) => {\n      const {x} = args.inputs;\n      const cpuBackend = args.backend;\n      const resultValues = new Float32Array(util.sizeFromShape(x.shape));\n      const complexVals = cpuBackend.data.get(x.dataId);\n      const real = complexVals.complexTensorInfos.real;\n      const imag = complexVals.complexTensorInfos.imag;\n      const realVals = cpuBackend.data.get(real.dataId).values as Float32Array;\n      const imagVals = cpuBackend.data.get(imag.dataId).values as Float32Array;\n      for (let i = 0; i < realVals.length; i++) {\n        const real = realVals[i];\n        const imag = imagVals[i];\n        resultValues[i] = Math.hypot(real, imag);\n      }\n\n      return cpuBackend.makeOutput(resultValues, x.shape, 'float32');\n    };\n\nexport const complexAbsConfig: KernelConfig = {\n  kernelName: ComplexAbs,\n  backendName: 'cpu',\n  kernelFunc: complexAbs as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Imag, ImagInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function imag(args: {inputs: ImagInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const imag = backend.data.get(input.dataId).complexTensorInfos.imag;\n  const imagVal = backend.data.get(imag.dataId).values;\n\n  // When complex tensor is disposed, its underlying parts will be disposed too.\n  // Make new tensor out of the imag value of the complex. This makes sure the\n  // value is still accessible even if complex tensor is disposed.\n  return backend.makeTensorInfo(imag.shape, imag.dtype, imagVal);\n}\n\nexport const imagConfig: KernelConfig = {\n  kernelName: Imag,\n  backendName: 'cpu',\n  kernelFunc: imag as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Concat, ConcatAttrs, ConcatInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {complex} from './Complex';\nimport {concatImpl} from './Concat_impl';\nimport {identity} from './Identity';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {reshape} from './Reshape';\n\nexport function concat(\n    args: {inputs: ConcatInputs, backend: MathBackendCPU, attrs: ConcatAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n  let outShape = backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  }\n\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n  if ($inputs.length === 1) {\n    return identity({inputs: {x: $inputs[0]}, backend});\n  }\n\n  const shapes = $inputs.map(t => t.shape);\n  backend_util.assertParamsConsistent(shapes, $axis);\n\n  if ($inputs[0].dtype === 'complex64') {\n    const reals = $inputs.map((t) => real({inputs: {input: t}, backend}));\n    const imags = $inputs.map((t) => imag({inputs: {input: t}, backend}));\n\n    const realConcated = concat({inputs: reals, backend, attrs: {axis: $axis}});\n    const imagConcated = concat({inputs: imags, backend, attrs: {axis: $axis}});\n\n    const result =\n        complex({inputs: {real: realConcated, imag: imagConcated}, backend});\n\n    reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n    imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n    backend.disposeIntermediateTensorInfo(realConcated);\n    backend.disposeIntermediateTensorInfo(imagConcated);\n\n    return result;\n  }\n\n  // Any concat of n-dimensional tensors across any axis can be reduced to\n  // a concatenation of two-dimensional tensors across the axis 1 by first\n  // partitioning the axes of the original tensors into those less than the\n  // axis to be concatenated and the rest. Then reshape the tensors\n  // into a two-dimensional tensor by collapsing these two sets of axes and\n  // concatenate the resulting matrices across the axis 1, finally reshaping\n  // the result to have the proper shape.\n  const inputs2D = $inputs.map(t => {\n    const innerSize = util.sizeFromShape(t.shape.slice($axis));\n    const shape = [-1, innerSize];\n    return reshape({inputs: {x: t}, backend, attrs: {shape}});\n  });\n\n  const inputsValShapes = inputs2D.map(t => {\n    return {vals: backend.data.get(t.dataId).values, shape: t.shape};\n  });\n\n  // Concats 2d tensors along axis=1.\n  outShape =\n      backend_util.computeOutShape(inputs2D.map(t => t.shape), 1 /* axis */);\n  const simplyConcat = inputs2D[0].shape[0] === 1;\n  const outVals =\n      concatImpl(inputsValShapes, outShape, inputs[0].dtype, simplyConcat);\n\n  const finalOutShape =\n      backend_util.computeOutShape($inputs.map(t => t.shape), $axis);\n\n  const outInfo =\n      backend.makeTensorInfo(finalOutShape, inputs[0].dtype, outVals);\n\n  inputs2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return outInfo;\n}\n\nexport const concatConfig: KernelConfig = {\n  kernelName: Concat,\n  backendName: 'cpu',\n  kernelFunc: concat as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2D, Conv2DAttrs, Conv2DInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2D(\n    args: {inputs: Conv2DInputs, backend: MathBackendCPU, attrs: Conv2DAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dataFormat, dilations, dimRoundingMode} = attrs;\n\n  assertNotComplex([x, filter], 'conv2d');\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const padLeft = convInfo.padInfo.left;\n  const padTop = convInfo.padInfo.top;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const xBatchStride = xStrides[0];\n  const xRowStride = isChannelsLast ? xStrides[1] : xStrides[2];\n  const xColStride = isChannelsLast ? xStrides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : xStrides[1];\n  const yBatchStride = y.strides[0];\n  const yRowStride = isChannelsLast ? y.strides[1] : y.strides[2];\n  const yColStride = isChannelsLast ? y.strides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : y.strides[1];\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xBatchStride;\n    const yOffset1 = b * yBatchStride;\n    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n      const yOffset2 = yOffset1 + yR * yRowStride;\n      const xRCorner = yR * convInfo.strideHeight - padTop;\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const xR = xRCorner + wR * dilationHeight;\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n        const wOffset1 = wR * filterStrides[0];\n        const xOffset2 = xOffset1 + xR * xRowStride;\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const yOffset3 = yOffset2 + yC * yColStride;\n          const xCCorner = yC * convInfo.strideWidth - padLeft;\n          for (let wC = 0; wC < filterWidth; ++wC) {\n            const xC = xCCorner + wC * dilationWidth;\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wC * filterStrides[1];\n            const xOffset3 = xOffset2 + xC * xColStride;\n            let wOffset3 = wOffset2;\n            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              const xVal = xVals[xOffset3 + d1 * xChannelStride];\n              for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                yVals[yOffset3 + d2 * yChannelStride] +=\n                    xVal * wVals[wOffset3 + d2];\n              }\n              wOffset3 += convInfo.outChannels;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, yVals);\n}\n\nexport const conv2DConfig: KernelConfig = {\n  kernelName: Conv2D,\n  backendName: 'cpu',\n  kernelFunc: conv2D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropFilter, Conv2DBackpropFilterAttrs, Conv2DBackpropFilterInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2DBackpropFilter(args: {\n  inputs: Conv2DBackpropFilterInputs,\n  backend: MathBackendCPU,\n  attrs: Conv2DBackpropFilterAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, dataFormat, dimRoundingMode, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'conv2dBackpropFilter');\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad, dimRoundingMode, false /* depthwise */,\n      $dataFormat);\n\n  const {strideHeight, strideWidth, filterHeight, filterWidth} = convInfo;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const dW = new TensorBuffer(convInfo.filterShape, 'float32');\n\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const dyVals = backend.data.get(dy.dataId).values as TypedArray;\n\n  const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n  const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n\n  for (let wR = 0; wR < filterHeight; ++wR) {\n    const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n    const yRMax = Math.min(\n        convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n    for (let wC = 0; wC < filterWidth; ++wC) {\n      const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n      const yCMax = Math.min(\n          convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n      for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n        for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n          let dotProd = 0;\n          for (let b = 0; b < convInfo.batchSize; ++b) {\n            for (let yR = yRMin; yR < yRMax; ++yR) {\n              const xR = wR + yR * strideHeight - topPad;\n              for (let yC = yCMin; yC < yCMax; ++yC) {\n                const xC = wC + yC * strideWidth - leftPad;\n                if (isChannelsLast) {\n                  dotProd += (xBuf.get(b, xR, xC, d1) as number) *\n                      (dyBuf.get(b, yR, yC, d2) as number);\n                } else {\n                  dotProd += (xBuf.get(b, d1, xR, xC) as number) *\n                      (dyBuf.get(b, d2, yR, yC) as number);\n                }\n              }\n            }\n          }\n          dW.set(dotProd, wR, wC, d1, d2);\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\n\nexport const conv2DBackpropFilterConfig: KernelConfig = {\n  kernelName: Conv2DBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropFilter as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropInput, Conv2DBackpropInputAttrs, Conv2DBackpropInputInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2DBackpropInput(args: {\n  inputs: Conv2DBackpropInputInputs,\n  backend: MathBackendCPU,\n  attrs: Conv2DBackpropInputAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {inputShape, strides, pad, dataFormat, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, filter], 'conv2dBackpropInput');\n\n  const filterStrides = util.computeStrides(filter.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n\n  let $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  $dataFormat = convInfo.dataFormat;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n  const isChannelsLast = $dataFormat === 'channelsLast';\n  const xBatchStride = dx.strides[0];\n  const xRowStride = isChannelsLast ? dx.strides[1] : dx.strides[2];\n  const xColStride = isChannelsLast ? dx.strides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : dx.strides[1];\n  const yBatchStride = dyStrides[0];\n  const yRowStride = isChannelsLast ? dyStrides[1] : dyStrides[2];\n  const yColStride = isChannelsLast ? dyStrides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : dyStrides[1];\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax =\n            Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax =\n              Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n          let dotProd = 0;\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset =\n                  yBatchStride * b + yRowStride * yR + yColStride * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                  fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (let d2 = 0; d2 < outChannels; ++d2) {\n                const pixel = dyValues[dyOffset + yChannelStride * d2];\n                const weight = fltValues[fltOffset + d2];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n          const dxOffset = xBatchStride * b + xRowStride * xR +\n              xColStride * xC + xChannelStride * d1;\n          dxValues[dxOffset] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const conv2DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropInput as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3D, Conv3DAttrs, Conv3DInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3D(\n    args: {inputs: Conv3DInputs, backend: MathBackendCPU, attrs: Conv3DAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  assertNotComplex([x, filter], 'conv3d');\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number],\n      filter.shape as [number, number, number, number, number], strides,\n      dilations, pad);\n\n  const {\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    dilationDepth,\n    dilationHeight,\n    dilationWidth,\n    padInfo\n  } = convInfo;\n  const padFront = padInfo.front;\n  const padLeft = padInfo.left;\n  const padTop = padInfo.top;\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xStrides[0];\n    const yOffset1 = b * y.strides[0];\n    for (let yF = 0; yF < convInfo.outDepth; ++yF) {\n      const yOffset2 = yOffset1 + yF * y.strides[1];\n      const xFCorner = yF * convInfo.strideDepth - padFront;\n      for (let wF = 0; wF < filterDepth; ++wF) {\n        const xF = xFCorner + wF * dilationDepth;\n        if (xF < 0 || xF >= convInfo.inDepth) {\n          continue;\n        }\n        const wOffset1 = wF * filterStrides[0];\n        const xOffset2 = xOffset1 + xF * xStrides[1];\n\n        for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n          const yOffset3 = yOffset2 + yR * y.strides[2];\n          const xRCorner = yR * convInfo.strideHeight - padTop;\n          for (let wR = 0; wR < filterHeight; ++wR) {\n            const xR = xRCorner + wR * dilationHeight;\n            if (xR < 0 || xR >= convInfo.inHeight) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wR * filterStrides[1];\n            const xOffset3 = xOffset2 + xR * xStrides[2];\n            for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n              const yOffset4 = yOffset3 + yC * convInfo.outChannels;\n              const xCCorner = yC * convInfo.strideWidth - padLeft;\n              for (let wC = 0; wC < filterWidth; ++wC) {\n                const xC = xCCorner + wC * dilationWidth;\n                if (xC < 0 || xC >= convInfo.inWidth) {\n                  continue;\n                }\n                const wOffset3 = wOffset2 + wC * filterStrides[2];\n                const xOffset4 = xOffset3 + xC * convInfo.inChannels;\n                let wOffset4 = wOffset3;\n                for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                  const xVal = xVals[xOffset4 + d1];\n                  for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                    yVals[yOffset4 + d2] += xVal * wVals[wOffset4 + d2];\n                  }\n                  wOffset4 += convInfo.outChannels;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\n\nexport const conv3DConfig: KernelConfig = {\n  kernelName: Conv3D,\n  backendName: 'cpu',\n  kernelFunc: conv3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropFilterV2, Conv3DBackpropFilterV2Attrs, Conv3DBackpropFilterV2Inputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3DBackpropFilterV2(args: {\n  inputs: Conv3DBackpropFilterV2Inputs,\n  backend: MathBackendCPU,\n  attrs: Conv3DBackpropFilterV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'conv3dBackpropFilterV2');\n\n  const xStrides = util.computeStrides(x.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad);\n\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterDepth = convInfo.filterDepth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n\n  const dw = new TensorBuffer(convInfo.filterShape, 'float32');\n  const dwValues = dw.values;\n  const [dwS0, dwS1, dwS2, dwS3] = dw.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const [xS0, xS1, xS2, xS3] = xStrides;\n\n  const frontPad = convInfo.padInfo.front;\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n\n  for (let wF = 0; wF < filterDepth; ++wF) {\n    const yFMin = Math.max(0, Math.ceil((frontPad - wF) / strideDepth));\n    const yFMax = Math.min(\n        convInfo.outDepth, (convInfo.inDepth + frontPad - wF) / strideDepth);\n    const wOffset1 = wF * dwS0;\n\n    for (let wR = 0; wR < filterHeight; ++wR) {\n      const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n      const yRMax = Math.min(\n          convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n      const wOffset2 = wR * dwS1 + wOffset1;\n\n      for (let wC = 0; wC < filterWidth; ++wC) {\n        const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n        const yCMax = Math.min(\n            convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n        const wOffset3 = wC * dwS2 + wOffset2;\n\n        for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n          const wOffset4 = d1 * dwS3 + wOffset3;\n\n          for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n            let dotProd = 0;\n            for (let b = 0; b < convInfo.batchSize; ++b) {\n              const xOffset1 = b * xS0;\n              const yOffset1 = b * dyS0;\n\n              for (let yF = yFMin; yF < yFMax; ++yF) {\n                const xF = wF + yF * strideDepth - frontPad;\n                const xOffset2 = xF * xS1 + xOffset1;\n                const yOffset2 = yF * dyS1 + yOffset1;\n\n                for (let yR = yRMin; yR < yRMax; ++yR) {\n                  const xR = wR + yR * strideHeight - topPad;\n                  const xOffset3 = xR * xS2 + xOffset2;\n                  const yOffset3 = yR * dyS2 + yOffset2;\n\n                  for (let yC = yCMin; yC < yCMax; ++yC) {\n                    const xC = wC + yC * strideWidth - leftPad;\n                    const xOffset4 = xC * xS3 + xOffset3;\n                    const yOffset4 = yC * dyS3 + yOffset3;\n\n                    dotProd += xValues[xOffset4 + d1] * dyValues[yOffset4 + d2];\n                  }\n                }\n              }\n            }\n            dwValues[wOffset4 + d2] = dotProd;\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dw.shape, dw.dtype, dw.values);\n}\n\nexport const conv3DBackpropFilterV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropFilterV2,\n  backendName: 'cpu',\n  kernelFunc: conv3DBackpropFilterV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropInputV2, Conv3DBackpropInputV2Attrs, Conv3DBackpropInputV2Inputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3DBackpropInputV2(args: {\n  inputs: Conv3DBackpropInputV2Inputs,\n  backend: MathBackendCPU,\n  attrs: Conv3DBackpropInputV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {pad, strides, inputShape} = attrs;\n\n  assertNotComplex([dy], 'conv3dBackpropInputV2');\n\n  const dyStrides = util.computeStrides(dy.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const convInfo = backend_util.computeConv3DInfo(\n      inputShape, filter.shape as [number, number, number, number, number],\n      strides, 1 /* dilations */, pad);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const [dxS0, dxS1, dxS2, dxS3] = dx.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2, fltS3] = filterStrides;\n  const {\n    batchSize,\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inDepth,\n    inHeight,\n    inWidth,\n    outChannels,\n    outDepth,\n    outHeight,\n    outWidth,\n    strideDepth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  const frontPad = filterDepth - 1 - convInfo.padInfo.front;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      // Frames of depth\n      for (let xF = 0; xF < inDepth; ++xF) {\n        const xFCorner = xF - frontPad;\n        const xFMin = Math.max(0, Math.ceil(xFCorner / strideDepth));\n        const yFMax =\n            Math.min(outDepth, (filterDepth + xFCorner) / strideDepth);\n\n        // Rows as per standard 2d matrix notation\n        for (let xR = 0; xR < inHeight; ++xR) {\n          const xRCorner = xR - topPad;\n          const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n          const yRMax =\n              Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n          // Columns as per standard 2d matrix notation\n          for (let xC = 0; xC < inWidth; ++xC) {\n            const xCCorner = xC - leftPad;\n            const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n            const yCMax =\n                Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n            let dotProd = 0;\n            for (let yF = xFMin; yF < yFMax; ++yF) {\n              const wF = yF * strideDepth - xFCorner;\n\n              for (let yR = xRMin; yR < yRMax; ++yR) {\n                const wR = yR * strideHeight - xRCorner;\n\n                for (let yC = xCMin; yC < yCMax; ++yC) {\n                  const wC = yC * strideWidth - xCCorner;\n                  const dyOffset = dyS0 * b + dyS1 * yF + dyS2 * yR + dyS3 * yC;\n                  const fltOffset = fltS0 * (filterDepth - 1 - wF) +\n                      fltS1 * (filterHeight - 1 - wR) +\n                      fltS2 * (filterWidth - 1 - wC) + fltS3 * d1;\n\n                  for (let d2 = 0; d2 < outChannels; ++d2) {\n                    const pixel = dyValues[dyOffset + d2];\n                    const weight = fltValues[fltOffset + d2];\n                    dotProd += pixel * weight;\n                  }\n                }\n              }\n            }\n            dxValues[dxS0 * b + dxS1 * xF + dxS2 * xR + dxS3 * xC + d1] =\n                dotProd;\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const conv3DBackpropInputV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropInputV2,\n  backendName: 'cpu',\n  kernelFunc: conv3DBackpropInputV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const cos = unaryKernelFunc(Cos, (xi) => Math.cos(xi));\n\nexport const cosConfig: KernelConfig = {\n  kernelName: Cos,\n  backendName: 'cpu',\n  kernelFunc: cos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const cosh = unaryKernelFunc(Cosh, (xi) => Math.cosh(xi));\n\nexport const coshConfig: KernelConfig = {\n  kernelName: Cosh,\n  backendName: 'cpu',\n  kernelFunc: cosh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, CropAndResize, CropAndResizeAttrs, CropAndResizeInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function cropAndResize(args: {\n  inputs: CropAndResizeInputs,\n  backend: MathBackendCPU,\n  attrs: CropAndResizeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {image, boxes, boxInd} = inputs;\n  const {cropSize, method, extrapolationValue} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const numBoxes = boxes.shape[0];\n\n  const [cropHeight, cropWidth] = cropSize;\n  const output =\n      buffer([numBoxes, cropHeight, cropWidth, numChannels], 'float32');\n\n  const boxVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const boxIndVals = backend.data.get(boxInd.dataId).values as TypedArray;\n  const imageVals = backend.data.get(image.dataId).values as TypedArray;\n\n  const inStride =\n      util.computeStrides(image.shape);  // to calculate flat indexes into image\n  const outStride = util.computeStrides(\n      output.shape);  // to calculate flat indexes into output\n\n  // Reference implementation\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op.cc\n  for (let b = 0; b < numBoxes; b++) {\n    const startInd = b * 4;\n    const y1 = boxVals[startInd];\n    const x1 = boxVals[startInd + 1];\n    const y2 = boxVals[startInd + 2];\n    const x2 = boxVals[startInd + 3];\n\n    const bInd: number = boxIndVals[b];\n    if (bInd >= batch) {\n      continue;\n    }\n\n    const heightScale =\n        (cropHeight > 1) ? (y2 - y1) * (imageHeight - 1) / (cropHeight - 1) : 0;\n    const widthScale =\n        (cropWidth > 1) ? (x2 - x1) * (imageWidth - 1) / (cropWidth - 1) : 0;\n\n    for (let y = 0; y < cropHeight; y++) {\n      const yInd: number = (cropHeight > 1) ?\n          y1 * (imageHeight - 1) + y * (heightScale) :\n          0.5 * (y1 + y2) * (imageHeight - 1);\n\n      if (yInd < 0 || yInd > imageHeight - 1) {\n        for (let x = 0; x < cropWidth; x++) {\n          for (let c = 0; c < numChannels; c++) {\n            const ind =\n                c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[ind] = extrapolationValue;\n          }\n        }\n        continue;\n      }\n\n      if (method === 'bilinear') {\n        const topInd = Math.floor(yInd);\n        const bottomInd = Math.ceil(yInd);\n        const yLerp = yInd - topInd;\n\n        for (let x = 0; x < cropWidth; x++) {\n          const xInd = (cropWidth > 1) ?\n              x1 * (imageWidth - 1) + x * widthScale :\n              0.5 * (x1 + x2) * (imageWidth - 1);\n\n          if (xInd < 0 || xInd > imageWidth - 1) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n            continue;\n          }\n\n          const leftInd = Math.floor(xInd);\n          const rightInd = Math.ceil(xInd);\n          const xLerp = xInd - leftInd;\n\n          for (let c = 0; c < numChannels; c++) {\n            let ind = c + leftInd * inStride[2] + topInd * inStride[1] +\n                bInd * inStride[0];\n            const topLeft = imageVals[ind];\n\n            ind = c + rightInd * inStride[2] + topInd * inStride[1] +\n                bInd * inStride[0];\n            const topRight = imageVals[ind];\n\n            ind = c + leftInd * inStride[2] + bottomInd * inStride[1] +\n                bInd * inStride[0];\n            const bottomLeft = imageVals[ind];\n\n            ind = c + rightInd * inStride[2] + bottomInd * inStride[1] +\n                bInd * inStride[0];\n            const bottomRight = imageVals[ind];\n\n            const top = topLeft + (topRight - topLeft) * xLerp;\n            const bottom = bottomLeft + (bottomRight - bottomLeft) * xLerp;\n\n            ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[ind] = top + ((bottom - top) * yLerp);\n          }\n        }\n      } else {  // method == \"nearest\"\n        for (let x = 0; x < cropWidth; ++x) {\n          const xInd = (cropWidth > 1) ?\n              x1 * (imageWidth - 1) + x * widthScale :\n              0.5 * (x1 + x2) * (imageWidth - 1);\n\n          if (xInd < 0 || xInd > imageWidth - 1) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n            continue;\n          }\n\n          const closestX = Math.round(xInd);\n          const closestY = Math.round(yInd);\n          for (let c = 0; c < numChannels; c++) {\n            const inInd = c + closestX * inStride[2] + closestY * inStride[1] +\n                bInd * inStride[0];\n            const outInd =\n                c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[outInd] = imageVals[inInd];\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(output.shape, output.dtype, output.values);\n}\n\nexport const cropAndResizeConfig: KernelConfig = {\n  kernelName: CropAndResize,\n  backendName: 'cpu',\n  kernelFunc: cropAndResize as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Cumprod, CumprodAttrs, CumprodInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function cumprod(\n    args: {inputs: CumprodInputs, backend: MathBackendCPU,\n           attrs: CumprodAttrs}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n\n  assertNotComplex(x, 'cumprod');\n\n  const permutation = backend_util.getAxesPermutation([axis], x.shape.length);\n  let $x = x;\n  if (permutation != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, x.shape.length)[0];\n\n  if (permutedAxis !== $x.shape.length - 1) {\n    throw new Error(\n        `backend.cumprod in CPU expects an inner-most ` +\n        `axis=${$x.shape.length - 1} but got axis=${permutedAxis}`);\n  }\n\n  const resultDtype = upcastType($x.dtype, 'int32');\n  const vals = util.makeOnesTypedArray(\n                   util.sizeFromShape($x.shape), resultDtype) as TypedArray;\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  const finalDim = $x.shape[$x.shape.length - 1];\n  const indexAdjuster = reverse ?\n      (i: number, j: number) => i + finalDim - j - 1 :\n      (i: number, j: number) => i + j;\n  for (let i = 0; i < aVals.length; i += finalDim) {\n    for (let j = 0; j < finalDim; j++) {\n      const idx = indexAdjuster(i, j);\n      if (j === 0) {\n        vals[idx] = exclusive ? 1 : aVals[idx];\n      } else {\n        const prevIdx = indexAdjuster(i, j - 1);\n        vals[idx] = exclusive ? aVals[prevIdx] * vals[prevIdx] :\n                                aVals[idx] * vals[prevIdx];\n      }\n    }\n  }\n\n  const result = backend.makeTensorInfo($x.shape, resultDtype, vals);\n\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose(\n        {inputs: {x: result}, backend, attrs: {perm: reversePermutation}});\n\n    backend.disposeIntermediateTensorInfo(result);\n    backend.disposeIntermediateTensorInfo($x);\n\n    return reverseTransposedResult;\n  }\n\n  return result;\n}\n\nexport const cumprodConfig: KernelConfig = {\n  kernelName: Cumprod,\n  backendName: 'cpu',\n  kernelFunc: cumprod as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Cumsum, CumsumAttrs, CumsumInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function cumsum(\n    args: {inputs: CumsumInputs, backend: MathBackendCPU, attrs: CumsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n\n  assertNotComplex(x, 'cumsum');\n\n  const permutation = backend_util.getAxesPermutation([axis], x.shape.length);\n  let $x = x;\n  if (permutation != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, x.shape.length)[0];\n\n  if (permutedAxis !== $x.shape.length - 1) {\n    throw new Error(\n        `backend.cumsum in CPU expects an inner-most ` +\n        `axis=${$x.shape.length - 1} but got axis=${permutedAxis}`);\n  }\n\n  const resultDtype = upcastType($x.dtype, 'int32');\n  const vals = util.makeZerosTypedArray(\n                   util.sizeFromShape($x.shape), resultDtype) as TypedArray;\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  const finalDim = $x.shape[$x.shape.length - 1];\n  const indexAdjuster = reverse ?\n      (i: number, j: number) => i + finalDim - j - 1 :\n      (i: number, j: number) => i + j;\n  for (let i = 0; i < aVals.length; i += finalDim) {\n    for (let j = 0; j < finalDim; j++) {\n      const idx = indexAdjuster(i, j);\n      if (j === 0) {\n        vals[idx] = exclusive ? 0 : aVals[idx];\n      } else {\n        const prevIdx = indexAdjuster(i, j - 1);\n        vals[idx] = exclusive ? aVals[prevIdx] + vals[prevIdx] :\n                                aVals[idx] + vals[prevIdx];\n      }\n    }\n  }\n\n  const result = backend.makeTensorInfo($x.shape, resultDtype, vals);\n\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose(\n        {inputs: {x: result}, backend, attrs: {perm: reversePermutation}});\n\n    backend.disposeIntermediateTensorInfo(result);\n    backend.disposeIntermediateTensorInfo($x);\n\n    return reverseTransposedResult;\n  }\n\n  return result;\n}\n\nexport const cumsumConfig: KernelConfig = {\n  kernelName: Cumsum,\n  backendName: 'cpu',\n  kernelFunc: cumsum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DenseBincount, DenseBincountAttrs, DenseBincountInputs, KernelConfig, KernelFunc, Rank, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {bincountImpl, bincountReduceImpl} from './Bincount_impl';\n\nexport function denseBincount(args: {\n  inputs: DenseBincountInputs,\n  backend: MathBackendCPU,\n  attrs: DenseBincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size, binaryOutput} = attrs;\n\n  if (x.shape.length === 1) {\n    const xVals = backend.data.get(x.dataId).values as TypedArray;\n    const weightsVals = backend.data.get(weights.dataId).values as TypedArray;\n\n    const outVals =\n        bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n    return backend.makeTensorInfo([size], weights.dtype, outVals);\n  } else if (x.shape.length === 2) {\n    const xBuf = backend.bufferSync<Rank, 'float32'>(x);\n    const weightsBuf = backend.bufferSync<Rank, 'float32'>(weights);\n\n    const outBuf = bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput);\n\n    return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n  }\n\n  throw new Error(\n      `Error in denseBincount: input must be at most rank 2, but got rank` +\n      `${x.shape.length}.`);\n}\n\nexport const denseBincountConfig: KernelConfig = {\n  kernelName: DenseBincount,\n  backendName: 'cpu',\n  kernelFunc: denseBincount as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DepthToSpace, DepthToSpaceAttrs, DepthToSpaceInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function depthToSpace(args: {\n  inputs: DepthToSpaceInputs,\n  backend: MathBackendCPU,\n  attrs: DepthToSpaceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockSize, dataFormat} = attrs;\n\n  util.assert(\n      dataFormat === 'NHWC',\n      () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${\n          dataFormat}`);\n\n  const batchSize = x.shape[0];\n  const inputHeight = x.shape[1];\n  const inputWidth = x.shape[2];\n  const inputDepth = x.shape[3];\n\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const result =\n      new Float32Array(batchSize * outputHeight * outputWidth * outputDepth);\n\n  let outputIdx = 0;\n  for (let b = 0; b < batchSize; ++b) {\n    for (let h = 0; h < outputHeight; ++h) {\n      const inH = Math.floor(h / blockSize);\n      const offsetH = (h % blockSize);\n      for (let w = 0; w < outputWidth; ++w) {\n        const inW = Math.floor(w / blockSize);\n        const offsetW = (w % blockSize);\n        const offsetD = (offsetH * blockSize + offsetW) * outputDepth;\n        for (let d = 0; d < outputDepth; ++d) {\n          const inD = d + offsetD;\n          const inputIdx =\n              inD + inputDepth * (inW + inputWidth * (inH + inputHeight * b));\n          result[outputIdx++] = xValues[inputIdx];\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batchSize, outputHeight, outputWidth, outputDepth], x.dtype, result);\n}\n\nexport const depthToSpaceConfig: KernelConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'cpu',\n  kernelFunc: depthToSpace as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs, DepthwiseConv2dNativeInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNative(args: {\n  inputs: DepthwiseConv2dNativeInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations, dimRoundingMode} = attrs;\n\n  assertNotComplex([x, filter], 'depthwiseConv2DNative');\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  const {filterHeight, filterWidth, dilationHeight, dilationWidth, padInfo} =\n      convInfo;\n  const padLeft = padInfo.left;\n  const padTop = padInfo.top;\n  const chMul = convInfo.outChannels / convInfo.inChannels;\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xStrides[0];\n    const yOffset1 = b * y.strides[0];\n    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n      const yOffset2 = yOffset1 + yR * y.strides[1];\n      const xRCorner = yR * convInfo.strideHeight - padTop;\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const xR = xRCorner + wR * dilationHeight;\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n        const wOffset1 = wR * filterStrides[0];\n        const xOffset2 = xOffset1 + xR * xStrides[1];\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const yOffset3 = yOffset2 + yC * y.strides[2];\n          const xCCorner = yC * convInfo.strideWidth - padLeft;\n          for (let wC = 0; wC < filterWidth; ++wC) {\n            const xC = xCCorner + wC * dilationWidth;\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wC * filterStrides[1];\n            const xOffset3 = xOffset2 + xC * convInfo.inChannels;\n            let yOffset4 = yOffset3;\n            let wOffset3 = wOffset2;\n            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              const xVal = xVals[xOffset3 + d1];\n              for (let q = 0; q < chMul; ++q) {\n                yVals[yOffset4 + q] += xVal * wVals[wOffset3 + q];\n              }\n              yOffset4 += chMul;\n              wOffset3 += chMul;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\n\nexport const depthwiseConv2dNativeConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNative as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropFilter, DepthwiseConv2dNativeBackpropFilterAttrs, DepthwiseConv2dNativeBackpropFilterInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNativeBackpropFilter(args: {\n  inputs: DepthwiseConv2dNativeBackpropFilterInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeBackpropFilterAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'depthwiseConv2dNativeBackpropFilter');\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const {strideHeight, strideWidth, filterHeight, filterWidth} = convInfo;\n\n  const dW = new TensorBuffer(convInfo.filterShape, 'float32');\n\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n  const chMul = convInfo.outChannels / convInfo.inChannels;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n  const dyVals = backend.data.get(dy.dataId).values as TypedArray;\n  const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n  for (let wR = 0; wR < filterHeight; ++wR) {\n    const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n    const yRMax = Math.min(\n        convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n    for (let wC = 0; wC < filterWidth; ++wC) {\n      const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n      const yCMax = Math.min(\n          convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n      for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n        const d1 = Math.trunc(d2 / chMul);\n        const dm = d2 % chMul;\n\n        let dotProd = 0;\n        for (let b = 0; b < convInfo.batchSize; ++b) {\n          for (let yR = yRMin; yR < yRMax; ++yR) {\n            const xR = wR + yR * strideHeight - topPad;\n            for (let yC = yCMin; yC < yCMax; ++yC) {\n              const xC = wC + yC * strideWidth - leftPad;\n              dotProd += (xBuf.get(b, xR, xC, d1) as number) *\n                  (dyBuf.get(b, yR, yC, d2) as number);\n            }\n          }\n        }\n        dW.set(dotProd, wR, wC, d1, dm);\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\n\nexport const depthwiseConv2dNativeBackpropFilterConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropFilter as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropInput, DepthwiseConv2dNativeBackpropInputAttrs, DepthwiseConv2dNativeBackpropInputInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNativeBackpropInput(args: {\n  inputs: DepthwiseConv2dNativeBackpropInputInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeBackpropInputAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, inputShape} = attrs;\n\n  assertNotComplex([dy, filter], 'depthwiseConv2DNativeBackpropInput');\n\n  const dyStrides = util.computeStrides(dy.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const [dxS0, dxS1, dxS2] = dx.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2] = dyStrides;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n  const chMul = outChannels / inChannels;\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax =\n            Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax =\n              Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n          let dotProd = 0;\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                  fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (let dm = 0; dm < chMul; ++dm) {\n                const d2 = d1 * chMul + dm;\n                const pixel = dyValues[dyOffset + d2];\n                const weight = fltValues[fltOffset + dm];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n          dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const depthwiseConv2dNativeBackpropInputConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropInput as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, Diag, DiagInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function diag(args: {inputs: DiagInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const xSize = util.sizeFromShape(x.shape);\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = buffer([xSize, xSize], x.dtype);\n  const vals = outBuf.values;\n  for (let i = 0; i < xVals.length; i++) {\n    vals[i * xSize + i] = xVals[i];\n  }\n\n  const outShape = [...x.shape, ...x.shape];\n\n  return backend.makeTensorInfo(outShape, outBuf.dtype, outBuf.values);\n}\n\nexport const diagConfig: KernelConfig = {\n  kernelName: Diag,\n  backendName: 'cpu',\n  kernelFunc: diag as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2D, Dilation2DAttrs, Dilation2DInputs, KernelConfig, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2DConfig: KernelConfig = {\n  kernelName: Dilation2D,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter} = inputs as Dilation2DInputs;\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const xVals = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const xRank = x.shape.length;\n\n    const filterVals = cpuBackend.data.get(filter.dataId).values as TypedArray;\n    const filterRank = filter.shape.length;\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    const outSize = util.sizeFromShape(outShape);\n    const outRank = outShape.length;\n    const outputVals = util.getArrayFromDType(x.dtype, outSize);\n\n    // Upsampling the input by fill in `dilation size - 1` values between each\n    // input value.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const xIndex = util.locToIndex(\n                        [b, hIn, wIn, d], xRank, util.computeStrides(x.shape));\n                    const filterIndex = util.locToIndex(\n                        [h, w, d], filterRank,\n                        util.computeStrides(filter.shape));\n                    const val = xVals[xIndex] + filterVals[filterIndex];\n                    if (val > curVal) {\n                      curVal = val;\n                    }\n                  }\n                }\n              }\n            }\n            const outputIndex = util.locToIndex(\n                [b, hOut, wOut, d], outRank, util.computeStrides(outShape));\n            outputVals[outputIndex] = curVal;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(outputVals, x.dtype), outShape, x.dtype);\n\n    return {dataId, shape: outShape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2DAttrs, Dilation2DBackpropFilter, Tensor3D, Tensor4D, TypedArray, util} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2DBackpropFilterConfig: KernelConfig = {\n  kernelName: Dilation2DBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter, dy} =\n        inputs as {x: Tensor4D, filter: Tensor3D, dy: Tensor4D};\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const $x =\n        util.toNestedArray(\n            x.shape, cpuBackend.data.get(x.dataId).values as TypedArray) as\n        number[][][][];\n\n    const $filter = util.toNestedArray(\n                        filter.shape,\n                        cpuBackend.data.get(filter.dataId).values as\n                            TypedArray) as number[][][];\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    util.assert(\n        dy.rank === outShape.length,\n        () => `Error in ${Dilation2DBackpropFilter}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n\n    const $dy =\n        util.toNestedArray(\n            outShape, cpuBackend.data.get(dy.dataId).values as TypedArray) as\n        number[][][][];\n\n    // The computed filter gradients has the same dimensions as the filter:\n    // [filterHeight, filterWidth, depth]\n    const gradients = util.makeZerosNestedTypedArray(\n                          filter.shape, filter.dtype) as number[][][];\n\n    // In the case of multiple argmax branches, we only back-propagate along the\n    // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n    // similarly to the max-pooling backward routines.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            let hMax = 0;\n            let wMax = 0;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                    if (val > curVal) {\n                      curVal = val;\n                      hMax = h;\n                      wMax = w;\n                    }\n                  }\n                }\n              }\n            }\n            gradients[hMax][wMax][d] += $dy[b][hOut][wOut][d];\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(gradients, x.dtype), filter.shape, filter.dtype);\n\n    return {dataId, shape: filter.shape, dtype: filter.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2DAttrs, Dilation2DBackpropInput, Tensor3D, Tensor4D, TypedArray, util} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2DBackpropInputConfig: KernelConfig = {\n  kernelName: Dilation2DBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter, dy} =\n        inputs as {x: Tensor4D, filter: Tensor3D, dy: Tensor4D};\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const $x =\n        util.toNestedArray(\n            x.shape, cpuBackend.data.get(x.dataId).values as TypedArray) as\n        number[][][][];\n\n    const $filter = util.toNestedArray(\n                        filter.shape,\n                        cpuBackend.data.get(filter.dataId).values as\n                            TypedArray) as number[][][];\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    util.assert(\n        dy.rank === outShape.length,\n        () => `Error in ${Dilation2DBackpropInput}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n\n    const $dy =\n        util.toNestedArray(\n            outShape, cpuBackend.data.get(dy.dataId).values as TypedArray) as\n        number[][][][];\n\n    // The computed gradients has the same dimensions as the input:\n    // [batch, inputHeight, inputCols, inChannel]\n    const gradients =\n        util.makeZerosNestedTypedArray(x.shape, x.dtype) as number[][][][];\n\n    // In the case of multiple argmax branches, we only back-propagate along the\n    // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n    // similarly to the max-pooling backward routines.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            let hInMax = (hBeg < 0) ? 0 : hBeg;\n            let wInMax = (wBeg < 0) ? 0 : wBeg;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                    if (val > curVal) {\n                      curVal = val;\n                      hInMax = hIn;\n                      wInMax = wIn;\n                    }\n                  }\n                }\n              }\n            }\n            gradients[b][hInMax][wInMax][d] += $dy[b][hOut][wOut][d];\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(gradients, x.dtype), x.shape, x.dtype);\n\n    return {dataId, shape: x.shape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Sum, SumAttrs, SumInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {zeros} from '../utils/zeros_impl';\nimport {cast} from './Cast';\nimport {identity} from './Identity';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function sum(\n    args: {inputs: SumInputs, backend: MathBackendCPU, attrs: SumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'sum');\n\n  let $x;\n  if (x.dtype === 'bool') {\n    $x = cast({inputs: {x}, backend, attrs: {dtype: 'int32'}});\n  } else {\n    $x = identity({inputs: {x}, backend});\n  }\n\n  const xRank = $x.shape.length;\n  const axes = util.parseAxisParam(axis, $x.shape);\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n\n  let reductionAxes = axes;\n  let permutedX = $x;\n  if (permutation != null) {\n    permutedX =\n        transpose({inputs: {x: $x}, backend, attrs: {perm: permutation}});\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims(\n      'sum', reductionAxes, permutedX.shape.length);\n\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, reductionAxes);\n  const resultDtype = backend_util.upcastType(permutedX.dtype, 'int32');\n  let result = zeros(backend, outShape, resultDtype);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = backend.data.get(result.dataId).values as TypedArray;\n\n  const aVals = backend.data.get(permutedX.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let sum = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      sum += aVals[offset + j];\n    }\n    vals[i] = sum;\n  }\n\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(result.shape, axes);\n    const oldResult = result;\n    result = reshape({inputs: {x: result}, backend, attrs: {shape: newShape}});\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  backend.disposeIntermediateTensorInfo($x);\n\n  if (permutation != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return result;\n}\n\nexport const sumConfig: KernelConfig = {\n  kernelName: Sum,\n  backendName: 'cpu',\n  kernelFunc: sum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Einsum, EinsumAttrs, EinsumInputs, KernelConfig, KernelFunc, Tensor, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {multiply} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\nexport function einsum(\n    args: {inputs: EinsumInputs, backend: MathBackendCPU, attrs: EinsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {equation} = attrs;\n  const tensors = inputs as Tensor[];\n\n  const {allDims, summedDims, idDims} =\n      backend_util.decodeEinsumEquation(equation, tensors.length);\n  backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);\n  const {path, steps} = backend_util.getEinsumComputePath(summedDims, idDims);\n\n  const nSteps = steps.length;\n  let out: TensorInfo|null = null;\n  let numDimsRemaining = allDims.length;\n  const tensorsToDispose: TensorInfo[] = [];\n  for (let i = 0; i < nSteps; ++i) {\n    for (const idTerm of steps[i]) {\n      const {permutationIndices: perm, expandDims: dimsToExpand} =\n          backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);\n      let x: TensorInfo;\n      if (backend_util.isIdentityPermutation(perm)) {\n        x = tensors[idTerm];\n      } else {\n        x = transpose({inputs: {x: tensors[idTerm]}, backend, attrs: {perm}});\n        tensorsToDispose.push(x);\n      }\n      const targetShape: number[] = x.shape.slice();\n      for (let k = 0; k < dimsToExpand.length; ++k) {\n        targetShape.splice(dimsToExpand[k], 0, 1);\n      }\n\n      if (!util.arraysEqual(x.shape, targetShape)) {\n        x = reshape({inputs: {x}, backend, attrs: {shape: targetShape}});\n        tensorsToDispose.push(x);\n      }\n      if (out === null) {\n        out = x;\n      } else {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        out = multiply({inputs: {a: x, b: out}, backend}) as TensorInfo;\n        tensorsToDispose.push(out);\n      }\n    }\n    if (i < nSteps - 1) {\n      if (path[i] >= 0) {\n        out = sum({\n          inputs: {x: out},\n          backend,\n          attrs: {\n            axis: path[i] - (allDims.length - numDimsRemaining),\n            keepDims: false\n          }\n        });\n        tensorsToDispose.push(out);\n      }\n      numDimsRemaining--;\n    }\n  }\n\n  // Clean up intermediate tensors.\n  for (const tensorInfo of tensorsToDispose) {\n    if (tensorInfo === out) {\n      continue;\n    }\n    backend.disposeIntermediateTensorInfo(tensorInfo);\n  }\n\n  return out;\n}\n\nexport const einsumConfig: KernelConfig = {\n  kernelName: Einsum,\n  backendName: 'cpu',\n  kernelFunc: einsum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {EluGrad, EluGradInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function eluGrad(args: {inputs: EluGradInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {dy, y} = inputs;\n\n  assertNotComplex([dy, y], 'eluGrad');\n\n  const resultValues = new Float32Array(util.sizeFromShape(y.shape));\n  const values = backend.data.get(y.dataId).values as TypedArray;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  for (let i = 0; i < values.length; ++i) {\n    const v = values[i];\n    if (v >= 1) {\n      resultValues[i] = dyValues[i];\n    } else {\n      resultValues[i] = dyValues[i] * (v + 1);\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, 'float32', resultValues);\n}\n\nexport const eluGradConfig: KernelConfig = {\n  kernelName: EluGrad,\n  backendName: 'cpu',\n  kernelFunc: eluGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Erf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nconst p = backend_util.ERF_P;\nconst a1 = backend_util.ERF_A1;\nconst a2 = backend_util.ERF_A2;\nconst a3 = backend_util.ERF_A3;\nconst a4 = backend_util.ERF_A4;\nconst a5 = backend_util.ERF_A5;\n\nexport const erf = unaryKernelFunc(\n    Erf,\n    (xi) => {\n      const sign = Math.sign(xi);\n      const v = Math.abs(xi);\n      const t = 1.0 / (1.0 + p * v);\n      return sign *\n          (1.0 -\n           (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t *\n               Math.exp(-v * v));\n    },\n);\n\nexport const erfConfig: KernelConfig = {\n  kernelName: Erf,\n  backendName: 'cpu',\n  kernelFunc: erf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ExpandDims, ExpandDimsAttrs, ExpandDimsInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {reshape} from './Reshape';\n\nexport function expandDims(args: {\n  inputs: ExpandDimsInputs,\n  backend: MathBackendCPU,\n  attrs: ExpandDimsAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {input} = inputs;\n  const {dim} = attrs;\n\n  const inputRank = input.shape.length;\n  const newShape = input.shape.slice();\n  let $dim = dim;\n  if (dim < 0) {\n    // Negative value is counted from the tail of rank.\n    util.assert(\n        -(inputRank + 1) <= dim,\n        () => `Axis must be in the interval [${- (inputRank + 1)}, ${\n            inputRank}]`);\n    $dim = inputRank + dim + 1;\n  }\n  newShape.splice($dim, 0, 1);\n\n  return reshape({inputs: {x: input}, backend, attrs: {shape: newShape}});\n}\n\nexport const expandDimsConfig: KernelConfig = {\n  kernelName: ExpandDims,\n  backendName: 'cpu',\n  kernelFunc: expandDims as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, RealDiv} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const realDivImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a / b);\nexport const div = binaryKernelFunc(RealDiv, realDivImpl);\n\nexport const realDivConfig: KernelConfig = {\n  kernelName: RealDiv,\n  backendName: 'cpu',\n  kernelFunc: div\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Tensor, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {add} from '../kernels/Add';\nimport {complex} from '../kernels/Complex';\nimport {concat} from '../kernels/Concat';\nimport {identity} from '../kernels/Identity';\nimport {imag} from '../kernels/Imag';\nimport {multiply} from '../kernels/Multiply';\nimport {real} from '../kernels/Real';\nimport {realDivConfig} from '../kernels/RealDiv';\nimport {slice} from '../kernels/Slice';\nimport {sub} from '../kernels/Sub';\n\n/**\n * Calculate FFT of inner most elements of batch tensor.\n */\nexport function fftBatch(\n    input: TensorInfo, inverse: boolean,\n    cpuBackend: MathBackendCPU): TensorInfo {\n  const inputShape = input.shape;\n  const batch = inputShape[0];\n  const innerDim = inputShape[1];\n\n  const inputVals = cpuBackend.data.get(input.dataId);\n\n  const real2D = inputVals.complexTensorInfos.real;\n  const imag2D = inputVals.complexTensorInfos.imag;\n\n  // Collects real and imaginary values separately.\n  const resultShape = [batch, innerDim];\n  const resultSize = util.sizeFromShape(resultShape);\n  const resultReal = util.getTypedArrayFromDType('float32', resultSize);\n  const resultImag = util.getTypedArrayFromDType('float32', resultSize);\n\n  for (let b = 0; b < batch; b++) {\n    // TODO: Support slice ops for complex type.\n    const r = slice({\n      inputs: {x: real2D},\n      backend: cpuBackend,\n      attrs: {begin: [b, 0], size: [1, innerDim]}\n    });\n    const i = slice({\n      inputs: {x: imag2D},\n      backend: cpuBackend,\n      attrs: {begin: [b, 0], size: [1, innerDim]}\n    });\n\n    const input = complex({inputs: {real: r, imag: i}, backend: cpuBackend});\n\n    // Run FFT by batch element.\n    const {real, imag} = fftImpl(input, inverse, cpuBackend);\n    const res = backend_util.mergeRealAndImagArrays(real, imag);\n\n    for (let d = 0; d < innerDim; d++) {\n      const c = backend_util.getComplexWithIndex(res, d);\n      resultReal[b * innerDim + d] = c.real;\n      resultImag[b * innerDim + d] = c.imag;\n    }\n\n    cpuBackend.disposeIntermediateTensorInfo(r);\n    cpuBackend.disposeIntermediateTensorInfo(i);\n    cpuBackend.disposeIntermediateTensorInfo(input);\n  }\n\n  const $realInfo: TensorInfo =\n      cpuBackend.makeTensorInfo(resultShape, 'float32', resultReal);\n  const $imagInfo: TensorInfo =\n      cpuBackend.makeTensorInfo(resultShape, 'float32', resultImag);\n\n  const result = complex(\n      {inputs: {real: $realInfo, imag: $imagInfo}, backend: cpuBackend});\n\n  cpuBackend.disposeIntermediateTensorInfo($realInfo);\n  cpuBackend.disposeIntermediateTensorInfo($imagInfo);\n\n  return result;\n}\n\nexport function fftImpl(\n    input: TensorInfo, inverse: boolean,\n    cpuBackend: MathBackendCPU): {real: Float32Array, imag: Float32Array} {\n  const inputSize = util.sizeFromShape(input.shape);\n\n  const inputVals = cpuBackend.data.get(input.dataId);\n\n  const realVals =\n      cpuBackend.data.get(inputVals.complexTensorInfos.real.dataId).values as\n      Float32Array;\n\n  const imagVals =\n      cpuBackend.data.get(inputVals.complexTensorInfos.imag.dataId).values as\n      Float32Array;\n\n  if (isExponentOf2(inputSize)) {\n    const result =\n        fftRadix2(realVals, imagVals, inputSize, inverse, cpuBackend);\n\n    const resultShape = [input.shape[0], input.shape[1]];\n\n    if (inverse) {\n      const realInfo: TensorInfo =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', result.real);\n      const imagInfo: TensorInfo =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', result.imag);\n\n      const sizeInfo: TensorInfo = cpuBackend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(inputSize as {} as 'float32', 'float32'));\n      const sizeInfoCopy =\n          identity({inputs: {x: sizeInfo}, backend: cpuBackend});\n\n      const divRealInfo =\n          realDivConfig.kernelFunc(\n              {inputs: {a: realInfo, b: sizeInfo}, backend: cpuBackend}) as\n          TensorInfo;\n      const divImagInfo =\n          realDivConfig.kernelFunc(\n              {inputs: {a: imagInfo, b: sizeInfoCopy}, backend: cpuBackend}) as\n          TensorInfo;\n\n      const divRealVals =\n          cpuBackend.data.get(divRealInfo.dataId).values as Float32Array;\n      const divImagVals =\n          cpuBackend.data.get(divImagInfo.dataId).values as Float32Array;\n\n      cpuBackend.disposeIntermediateTensorInfo(realInfo);\n      cpuBackend.disposeIntermediateTensorInfo(imagInfo);\n      cpuBackend.disposeIntermediateTensorInfo(sizeInfo);\n      cpuBackend.disposeIntermediateTensorInfo(sizeInfoCopy);\n      cpuBackend.disposeIntermediateTensorInfo(divRealInfo);\n      cpuBackend.disposeIntermediateTensorInfo(divImagInfo);\n\n      return {real: divRealVals, imag: divImagVals};\n    }\n\n    return result;\n  } else {\n    const data = backend_util.mergeRealAndImagArrays(realVals, imagVals);\n\n    const rawOutput =\n        fourierTransformByMatmul(data, inputSize, inverse) as Float32Array;\n\n    return backend_util.splitRealAndImagArrays(rawOutput);\n  }\n}\n\nfunction isExponentOf2(size: number): boolean {\n  return (size & size - 1) === 0;\n}\n\n// FFT using Cooley-Tukey algorithm on radix 2 dimensional input.\nfunction fftRadix2(\n    realVals: Float32Array, imagVals: Float32Array, size: number,\n    inverse: boolean,\n    cpuBackend: MathBackendCPU): {real: Float32Array, imag: Float32Array} {\n  if (size === 1) {\n    return {real: realVals, imag: imagVals};\n  }\n\n  const data = backend_util.mergeRealAndImagArrays(realVals, imagVals);\n\n  const half = size / 2;\n\n  const evenComplex = backend_util.complexWithEvenIndex(data);\n\n  const evenRealVals = evenComplex.real;\n  const evenImagVals = evenComplex.imag;\n\n  const evenShape = [evenRealVals.length];\n\n  const evenRealInfo =\n      cpuBackend.makeTensorInfo(evenShape, 'float32', evenRealVals);\n  const evenImagInfo =\n      cpuBackend.makeTensorInfo(evenShape, 'float32', evenImagVals);\n\n  const evenTensorInfo = complex(\n      {inputs: {real: evenRealInfo, imag: evenImagInfo}, backend: cpuBackend});\n\n  const oddComplex = backend_util.complexWithOddIndex(data);\n\n  const oddRealVals = oddComplex.real;\n  const oddImagVals = oddComplex.imag;\n\n  const oddShape = [oddRealVals.length];\n\n  const oddRealInfo =\n      cpuBackend.makeTensorInfo(oddShape, 'float32', oddRealVals);\n  const oddImagInfo =\n      cpuBackend.makeTensorInfo(oddShape, 'float32', oddImagVals);\n\n  const oddTensorInfo = complex(\n      {inputs: {real: oddRealInfo, imag: oddImagInfo}, backend: cpuBackend});\n\n  // Recursive call for half part of original input.\n  const $evenComplex =\n      fftRadix2(evenRealVals, evenImagVals, half, inverse, cpuBackend);\n\n  const $evenRealVals = $evenComplex.real;\n  const $evenImagVals = $evenComplex.imag;\n\n  const $evenShape = [$evenRealVals.length];\n\n  const $evenRealInfo =\n      cpuBackend.makeTensorInfo($evenShape, 'float32', $evenRealVals);\n  const $evenImagInfo =\n      cpuBackend.makeTensorInfo($evenShape, 'float32', $evenImagVals);\n\n  const $evenTensorInfo = complex({\n    inputs: {real: $evenRealInfo, imag: $evenImagInfo},\n    backend: cpuBackend\n  });\n\n  const $oddComplex =\n      fftRadix2(oddRealVals, oddImagVals, half, inverse, cpuBackend);\n\n  const $oddRealVals = $oddComplex.real;\n  const $oddImagVals = $oddComplex.imag;\n\n  const $oddShape = [$oddRealVals.length];\n\n  const $oddRealInfo =\n      cpuBackend.makeTensorInfo($oddShape, 'float32', $oddRealVals);\n  const $oddImagInfo =\n      cpuBackend.makeTensorInfo($oddShape, 'float32', $oddImagVals);\n\n  const $oddTensorInfo = complex(\n      {inputs: {real: $oddRealInfo, imag: $oddImagInfo}, backend: cpuBackend});\n\n  const e = backend_util.exponents(size, inverse);\n  const eShape = [e.real.length];\n\n  const eRealInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.real);\n  const eImagInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.imag);\n\n  const complexInfo = complex(\n      {inputs: {real: eRealInfo, imag: eImagInfo}, backend: cpuBackend});\n\n  const exponentInfo =\n      multiply(\n          {inputs: {a: complexInfo, b: $oddTensorInfo}, backend: cpuBackend}) as\n      TensorInfo;\n\n  const addPart = add({\n                    inputs: {a: $evenTensorInfo, b: exponentInfo},\n                    backend: cpuBackend\n                  }) as TensorInfo;\n  const subPart = sub({\n                    inputs: {a: $evenTensorInfo, b: exponentInfo},\n                    backend: cpuBackend\n                  }) as TensorInfo;\n\n  const addPartReal = real({inputs: {input: addPart}, backend: cpuBackend});\n  const subPartReal = real({inputs: {input: subPart}, backend: cpuBackend});\n\n  const addPartImag = imag({inputs: {input: addPart}, backend: cpuBackend});\n  const subPartImag = imag({inputs: {input: subPart}, backend: cpuBackend});\n\n  const $real = concat({\n    inputs: [addPartReal as Tensor, subPartReal as Tensor],\n    backend: cpuBackend,\n    attrs: {axis: 0}\n  });\n  const $imag = concat({\n    inputs: [addPartImag as Tensor, subPartImag as Tensor],\n    backend: cpuBackend,\n    attrs: {axis: 0}\n  });\n\n  const $realVals = cpuBackend.data.get($real.dataId).values as Float32Array;\n  const $imagVals = cpuBackend.data.get($imag.dataId).values as Float32Array;\n\n  cpuBackend.disposeIntermediateTensorInfo(evenRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(evenImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(evenTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo(eRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(eImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(complexInfo);\n  cpuBackend.disposeIntermediateTensorInfo(exponentInfo);\n  cpuBackend.disposeIntermediateTensorInfo(addPart);\n  cpuBackend.disposeIntermediateTensorInfo(subPart);\n  cpuBackend.disposeIntermediateTensorInfo(addPartReal);\n  cpuBackend.disposeIntermediateTensorInfo(addPartImag);\n  cpuBackend.disposeIntermediateTensorInfo(subPartReal);\n  cpuBackend.disposeIntermediateTensorInfo(subPartImag);\n  cpuBackend.disposeIntermediateTensorInfo($real);\n  cpuBackend.disposeIntermediateTensorInfo($imag);\n\n  return {real: $realVals, imag: $imagVals};\n}\n\n// Calculate fourier transform by multplying sinusoid matrix.\nfunction fourierTransformByMatmul(\n    data: TypedArray, size: number, inverse: boolean): TypedArray {\n  const ret = new Float32Array(size * 2);\n  // TODO: Use matmul instead once it supports complex64 type.\n  for (let r = 0; r < size; r++) {\n    let real = 0.0;\n    let imag = 0.0;\n    for (let c = 0; c < size; c++) {\n      const e = backend_util.exponent(r * c, size, inverse);\n      const term = backend_util.getComplexWithIndex(data as Float32Array, c);\n      real += term.real * e.real - term.imag * e.imag;\n      imag += term.real * e.imag + term.imag * e.real;\n    }\n    if (inverse) {\n      real /= size;\n      imag /= size;\n    }\n    backend_util.assignToTypedArray(ret, real, imag, r);\n  }\n  return ret;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FFT, FFTInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {fftBatch} from '../utils/fft_utils';\nimport {reshape} from './Reshape';\n\nexport function fft(args: {inputs: FFTInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const inputSize = util.sizeFromShape(input.shape);\n\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape({\n    inputs: {x: input},\n    backend,\n    attrs: {shape: [batch, innerDimensionSize]}\n  });\n\n  const result = fftBatch(input2D, false, backend);\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: input.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const fftConfig: KernelConfig = {\n  kernelName: FFT,\n  backendName: 'cpu',\n  kernelFunc: fft as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, DataValues, Fill, FillAttrs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function fill(args: {backend: MathBackendCPU, attrs: FillAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {shape, value, dtype} = attrs;\n\n  const $dtype = dtype || util.inferDtype(value);\n  const values = util.getArrayFromDType($dtype, util.sizeFromShape(shape));\n  fillValues(values, value, $dtype);\n\n  return backend.makeTensorInfo(shape, $dtype, values);\n}\n\nexport const fillConfig: KernelConfig = {\n  kernelName: Fill,\n  backendName: 'cpu',\n  kernelFunc: fill as {} as KernelFunc\n};\n\nfunction fillValues(\n    values: DataValues, value: string|number, dtype: DataType): void {\n  if (dtype === 'string') {\n    (values as string[]).fill(value as string);\n  } else {\n    (values as TypedArray).fill(value as number);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {FlipLeftRight, FlipLeftRightInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const flipLeftRightConfig: KernelConfig = {\n  kernelName: FlipLeftRight,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as FlipLeftRightInputs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const output = util.getTypedArrayFromDType(\n        image.dtype as NumericDataType, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n    const imageVals = cpuBackend.data.get(image.dataId).values as TypedArray;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coordX = Math.round(imageWidth - col - 1);\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n\n            let outputValue = imageVals[outIdx];\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth) {\n              // set the output to the image value at the coordinate position.\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx =\n                  batchOffset + rowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n            output[outIdx] = outputValue;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {dataId, shape: image.shape, dtype: image.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FloorDiv, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const floorDivImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => Math.floor(a / b));\nexport const floorDiv =\n    binaryKernelFunc(FloorDiv, floorDivImpl, null /* complexImpl */, 'int32');\n\nexport const floorDivConfig: KernelConfig = {\n  kernelName: FloorDiv,\n  backendName: 'cpu',\n  kernelFunc: floorDiv\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedConv2D, FusedConv2DAttrs, FusedConv2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\nimport {add} from './Add';\nimport {conv2D} from './Conv2D';\nimport {reshape} from './Reshape';\n\nexport function fusedConv2D(args: {\n  inputs: FusedConv2DInputs,\n  backend: MathBackendCPU,\n  attrs: FusedConv2DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  let result = conv2D({\n    inputs: {x, filter},\n    backend,\n    attrs: {strides, pad, dataFormat, dilations, dimRoundingMode}\n  });\n\n  if (bias) {\n    const resultOld = result;\n    // For NCHW format, if bias is a 1-D tensor, it is supposed to be aligned\n    // to the channel of the conv2d's result; if the bias is a scalar, the\n    // bias_add is computed as if the bias was broadcasted to the shape of the\n    // conv2d's result.\n    if (dataFormat === 'NCHW' && bias.shape.length === 1 &&\n        bias.shape[0] !== 1) {\n      const reshapedBias = reshape(\n          {inputs: {x: bias}, backend, attrs: {shape: [bias.shape[0], 1, 1]}});\n      result =\n          add({inputs: {a: result, b: reshapedBias}, backend}) as TensorInfo;\n      backend.disposeIntermediateTensorInfo(reshapedBias);\n    } else {\n      // This condition handles NHWC and NCHW (scalar case). The only other case\n      // for NCHW (1D case) is handled above.\n      result = add({inputs: {a: result, b: bias}, backend}) as TensorInfo;\n    }\n    backend.disposeIntermediateTensorInfo(resultOld);\n  }\n\n  if (activation) {\n    const resultOld = result;\n    // For NCHW format, if PReLu activation weights is a 1-D tensor, it is\n    // supposed to be aligned with the channel of the conv2d's result. For other\n    // cases, whether NCHW or NHWC data format, the conv2d result is\n    // already aligned with the activation weights.\n    if (dataFormat === 'NCHW' && activation === 'prelu' &&\n        preluActivationWeights.shape.length === 1 &&\n        preluActivationWeights.shape[0] !== 1) {\n      const reshapedAlpha = reshape({\n        inputs: {x: preluActivationWeights},\n        backend,\n        attrs: {shape: [preluActivationWeights.shape[0], 1, 1]}\n      });\n      result = applyActivation(\n          backend, result, activation, reshapedAlpha, leakyreluAlpha);\n      backend.disposeIntermediateTensorInfo(reshapedAlpha);\n    } else {\n      result = applyActivation(\n          backend, result, activation, preluActivationWeights, leakyreluAlpha);\n    }\n    backend.disposeIntermediateTensorInfo(resultOld);\n  }\n\n  return result;\n}\n\nexport const fusedConv2DConfig: KernelConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedConv2D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\nimport {add} from './Add';\nimport {depthwiseConv2dNative} from './DepthwiseConv2dNative';\n\nexport function fusedDepthwiseConv2D(args: {\n  inputs: FusedDepthwiseConv2DInputs,\n  backend: MathBackendCPU,\n  attrs: FusedDepthwiseConv2DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  let result = depthwiseConv2dNative({\n    inputs: {x, filter},\n    backend,\n    attrs: {strides, pad, dataFormat, dilations, dimRoundingMode}\n  });\n\n  if (bias) {\n    const oldResult = result;\n    result = add({inputs: {a: result, b: bias}, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n  if (activation) {\n    const oldResult = result;\n    result = applyActivation(\n        backend, result, activation, preluActivationWeights, leakyreluAlpha);\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  return result;\n}\n\nexport const fusedDepthwiseConv2DConfig: KernelConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedDepthwiseConv2D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherNd, GatherNdInputs, KernelConfig, KernelFunc, Rank, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {gatherNdImpl} from './GatherNd_Impl';\n\nexport function gatherNd(\n    args: {inputs: GatherNdInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {params, indices} = inputs;\n\n  const paramsSize = util.sizeFromShape(params.shape);\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n\n  const [resultShape, numSlices, sliceSize, strides] =\n      backend_util.prepareAndValidate(params, indices);\n  if (numSlices === 0) {\n    return backend.makeTensorInfo(resultShape, params.dtype, []);\n  }\n\n  const indicesData = backend.data.get(indices.dataId).values as TypedArray;\n  const paramsBuf = backend.bufferSync<Rank, 'float32'>(params);\n  const outBuf = gatherNdImpl(\n      indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize,\n      strides, params.shape, paramsSize);\n\n  return backend.makeTensorInfo(resultShape, params.dtype, outBuf.values);\n}\n\nexport const gatherNdConfig: KernelConfig = {\n  kernelName: GatherNd,\n  backendName: 'cpu',\n  kernelFunc: gatherNd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherV2, GatherV2Attrs, GatherV2Inputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {gatherV2Impl} from './GatherV2_impl';\nimport {reshape} from './Reshape';\n\nexport function gatherV2(args: {\n  inputs: GatherV2Inputs,\n  backend: MathBackendCPU,\n  attrs: GatherV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, indices} = inputs;\n  const {axis, batchDims} = attrs;\n\n  assertNotComplex([x, indices], 'gatherV2');\n\n  // Throw error when any index is out of bound.\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n  const indicesVals = backend.data.get(indices.dataId).values as TypedArray;\n  const axisDim = x.shape[parsedAxis];\n  for (let i = 0; i < indicesVals.length; ++i) {\n    const index = indicesVals[i];\n    util.assert(\n        index <= axisDim - 1 && index >= 0,\n        () =>\n            `GatherV2: the index value ${index} is not in [0, ${axisDim - 1}]`);\n  }\n\n  let $batchDims = batchDims;\n\n  if (batchDims == null) {\n    $batchDims = 0;\n  }\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(\n      x, indices, parsedAxis, $batchDims);\n\n  const flattenX = reshape({\n    inputs: {x},\n    backend,\n    attrs: {\n      shape: [\n        shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n        shapeInfo.sliceSize\n      ]\n    }\n  });\n\n  const flattenIndex = reshape({\n    inputs: {x: indices},\n    backend,\n    attrs: {shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]}\n  });\n\n  const flattenOutputShape = [\n    shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n    shapeInfo.sliceSize\n  ];\n\n  const indicesBuf = backend.bufferSync(flattenIndex);\n  const xBuf = backend.bufferSync(flattenX);\n  const outBuf = gatherV2Impl(xBuf, indicesBuf, flattenOutputShape);\n\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(flattenIndex);\n\n  return backend.makeTensorInfo(\n      shapeInfo.outputShape, outBuf.dtype, outBuf.values);\n}\n\nexport const gatherV2Config: KernelConfig = {\n  kernelName: GatherV2,\n  backendName: 'cpu',\n  kernelFunc: gatherV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IFFT, IFFTInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {fftBatch} from '../utils/fft_utils';\nimport {reshape} from './Reshape';\n\nexport function ifft(args: {inputs: IFFTInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const inputSize = util.sizeFromShape(input.shape);\n\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape({\n    inputs: {x: input},\n    backend,\n    attrs: {shape: [batch, innerDimensionSize]}\n  });\n\n  const result = fftBatch(input2D, true, backend);\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: input.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const ifftConfig: KernelConfig = {\n  kernelName: IFFT,\n  backendName: 'cpu',\n  kernelFunc: ifft as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsFinite, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isFinite =\n    unaryKernelFunc(IsFinite, (xi) => Number.isFinite(xi) ? 1 : 0, 'bool');\n\nexport const isFiniteConfig: KernelConfig = {\n  kernelName: IsFinite,\n  backendName: 'cpu',\n  kernelFunc: isFinite,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsInf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isInf =\n    unaryKernelFunc(IsInf, (xi) => Math.abs(xi) === Infinity ? 1 : 0, 'bool');\n\nexport const isInfConfig: KernelConfig = {\n  kernelName: IsInf,\n  backendName: 'cpu',\n  kernelFunc: isInf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsNan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isNaN =\n    unaryKernelFunc(IsNan, (xi) => Number.isNaN(xi) ? 1 : 0, 'bool');\n\nexport const isNaNConfig: KernelConfig = {\n  kernelName: IsNan,\n  backendName: 'cpu',\n  kernelFunc: isNaN,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LinSpace, LinSpaceAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {linSpaceImpl} from './LinSpace_impl';\n\nexport function linSpace(args: {backend: MathBackendCPU, attrs: LinSpaceAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, num} = attrs;\n\n  const outVals = linSpaceImpl(start, stop, num);\n\n  return backend.makeTensorInfo([outVals.length], 'float32', outVals);\n}\n\nexport const linSpaceConfig: KernelConfig = {\n  kernelName: LinSpace,\n  backendName: 'cpu',\n  kernelFunc: linSpace as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log1p} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const log1p = unaryKernelFunc(Log1p, (xi) => Math.log1p(xi));\n\nexport const log1pConfig: KernelConfig = {\n  kernelName: Log1p,\n  backendName: 'cpu',\n  kernelFunc: log1p,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalAnd} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const logicalAndImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a && b);\nexport const logicalAnd = binaryKernelFunc(\n    LogicalAnd, logicalAndImpl, null /* complexImpl */, 'bool');\n\nexport const logicalAndConfig: KernelConfig = {\n  kernelName: LogicalAnd,\n  backendName: 'cpu',\n  kernelFunc: logicalAnd\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalNot} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const logicalNot =\n    unaryKernelFunc(LogicalNot, (xi) => xi ? 0 : 1, 'bool');\n\nexport const logicalNotConfig: KernelConfig = {\n  kernelName: LogicalNot,\n  backendName: 'cpu',\n  kernelFunc: logicalNot,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalOr} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const logicalOrImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a || b);\nexport const logicalOr =\n    binaryKernelFunc(LogicalOr, logicalOrImpl, null /* complexImpl */, 'bool');\n\nexport const logicalOrConfig: KernelConfig = {\n  kernelName: LogicalOr,\n  backendName: 'cpu',\n  kernelFunc: logicalOr\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRN, LRNAttrs, LRNInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function lRN(\n    args: {inputs: LRNInputs, backend: MathBackendCPU, attrs: LRNAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  assertNotComplex(x, 'LRN');\n\n  const channels = x.shape[3];\n  const maxD = channels - 1;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const size = util.sizeFromShape(x.shape);\n  const result = new Float32Array(size);\n\n  function sumAcrossChannels(offset: number) {\n    const currentChannel = offset % channels;\n    let beginSumOffset =\n        offset - currentChannel + Math.max(0, currentChannel - depthRadius);\n    const endSumOffset =\n        offset - currentChannel + Math.min(currentChannel + depthRadius, maxD);\n\n    let sum = 0.0;\n    for (; beginSumOffset <= endSumOffset; beginSumOffset++) {\n      const z = xValues[beginSumOffset];\n      sum += z * z;\n    }\n    return sum;\n  }\n\n  for (let offset = 0; offset < size; offset++) {\n    const sum = sumAcrossChannels(offset);\n    const val = xValues[offset] * Math.pow(bias + alpha * sum, -beta);\n    result[offset] = val;\n  }\n\n  return backend.makeTensorInfo(x.shape, x.dtype, result);\n}\n\n// tslint:disable-next-line: variable-name\nexport const LRNConfig: KernelConfig = {\n  kernelName: LRN,\n  backendName: 'cpu',\n  kernelFunc: lRN as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRNGrad, LRNGradAttrs, LRNGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function lRNGrad(\n    args:\n        {inputs: LRNGradInputs, backend: MathBackendCPU, attrs: LRNGradAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, y, dy} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  assertNotComplex(dy, 'LRNGrad');\n\n  const dySize = util.sizeFromShape(dy.shape);\n\n  const channels = dy.shape[3];\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const yValues = backend.data.get(y.dataId).values as TypedArray;\n  const result = new Float32Array(dySize);\n  const size = dySize;\n\n  for (let offset = 0; offset < size; offset++) {\n    const currentChannel = offset % channels;\n    const depthBegin =\n        (offset - currentChannel) + Math.max(0, currentChannel - depthRadius);\n    const depthEnd = (offset - currentChannel) +\n        Math.min(channels, currentChannel + depthRadius + 1);\n\n    let norm = 0;\n    for (let k = depthBegin; k < depthEnd; k++) {\n      norm += Math.pow(xValues[k], 2);\n    }\n    norm = alpha * norm + bias;\n\n    for (let k = depthBegin; k < depthEnd; k++) {\n      let dyi = -2 * alpha * beta * xValues[k] * yValues[offset] / norm;\n      if (offset === k) {\n        dyi += Math.pow(norm, -beta);\n      }\n      dyi *= dyValues[offset];\n      result[k] += dyi;\n    }\n  }\n\n  return backend.makeTensorInfo(dy.shape, x.dtype, result);\n}\n\n// tslint:disable-next-line: variable-name\nexport const LRNGradConfig: KernelConfig = {\n  kernelName: LRNGrad,\n  backendName: 'cpu',\n  kernelFunc: lRNGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelFunc, Max, MaxAttrs, MaxInputs, TensorInfo} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig} from '@tensorflow/tfjs-core';\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {maxImpl} from './Max_impl';\nimport {transposeImpl} from './Transpose_impl';\n\nexport function max(\n    args: {inputs: MaxInputs, backend: MathBackendCPU, attrs: MaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reductionIndices, keepDims} = attrs;\n  const cpuBackend = backend;\n  let xShape = x.shape;\n  const xRank = xShape.length;\n\n  const origAxes = util.parseAxisParam(reductionIndices, xShape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let xVals = cpuBackend.data.get(x.dataId).values as TypedArray;\n  if (permutedAxes != null) {\n    const newShape: number[] = new Array(xRank);\n    for (let i = 0; i < newShape.length; i++) {\n      newShape[i] = xShape[permutedAxes[i]];\n    }\n\n    xVals = transposeImpl(xVals, xShape, x.dtype, permutedAxes, newShape);\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n\n    xShape = newShape;\n  }\n\n  assertNotComplex(x, 'max');\n  backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n  const [maxOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(xShape, axes);\n\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const result = maxImpl(xVals, reduceSize, maxOutShape, x.dtype);\n  const dataId = cpuBackend.write(result, maxOutShape, x.dtype);\n\n  let outShape = maxOutShape;\n  if (keepDims) {\n    // reshape\n    const newShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n    outShape = newShape;\n  }\n\n  return {dataId, shape: outShape, dtype: x.dtype};\n}\n\nexport const maxConfig: KernelConfig = {\n  kernelName: Max,\n  backendName: 'cpu',\n  kernelFunc: max as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool, MaxPoolAttrs, MaxPoolInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool} from '../utils/pool_utils';\nimport {identity} from './Identity';\n\nexport function maxPool(\n    args:\n        {inputs: MaxPoolInputs, backend: MathBackendCPU, attrs: MaxPoolAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'maxPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  let res: TensorInfo;\n\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    res = identity({inputs: {x}, backend});\n  } else {\n    const xValues = backend.data.get(x.dataId).values as TypedArray;\n    const strides = util.computeStrides(x.shape);\n    const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'max');\n    res = backend.makeTensorInfo(\n        convInfo.outShape, x.dtype, buffer.values as TypedArray);\n  }\n  return res;\n}\n\nexport const maxPoolConfig: KernelConfig = {\n  kernelName: MaxPool,\n  backendName: 'cpu',\n  kernelFunc: maxPool as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3D, MaxPool3DAttrs, MaxPool3DInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool3d} from '../utils/pool_utils';\n\nexport function maxPool3D(args: {\n  inputs: MaxPool3DInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat} = attrs;\n\n  assertNotComplex(x, 'maxPool3d');\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode, dataFormat);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = pool3d(\n      xValues, x.shape, x.dtype, util.computeStrides(x.shape), convInfo, 'max');\n\n  return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);\n}\n\nexport const maxPool3DConfig: KernelConfig = {\n  kernelName: MaxPool3D,\n  backendName: 'cpu',\n  kernelFunc: maxPool3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, KernelConfig, KernelFunc, MaxPool3DGrad, MaxPool3DGradAttrs, MaxPool3DGradInputs, Rank, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {maxPool3dPositions} from '../utils/pool_utils';\n\nexport function maxPool3DGrad(args: {\n  inputs: MaxPool3DGradInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, input], 'maxPool3DGrad');\n\n  const convInfo = backend_util.computePool3DInfo(\n      input.shape as [number, number, number, number, number], filterSize,\n      strides, 1 /* dilations */, pad, dimRoundingMode);\n\n  const inputBuf = backend.bufferSync(input);\n  const maxPosBuf = maxPool3dPositions(inputBuf, convInfo);\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(input.shape, 'float32');\n\n  const dyBuf = backend.bufferSync<Rank, 'float32'>(dy);\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n        for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n          for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n            // Shader code begins\n            const dyDepthCorner = dxDepth - padFront;\n            const dyRowCorner = dxRow - padTop;\n            const dyColCorner = dxCol - padLeft;\n            let dotProd = 0;\n            for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                 wDepth += dilationDepth) {\n              const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n              if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                  Math.floor(dyDepth) !== dyDepth) {\n                continue;\n              }\n              for (let wRow = 0; wRow < effectiveFilterHeight;\n                   wRow += dilationHeight) {\n                const dyRow = (dyRowCorner + wRow) / strideHeight;\n                if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                    Math.floor(dyRow) !== dyRow) {\n                  continue;\n                }\n                for (let wCol = 0; wCol < effectiveFilterWidth;\n                     wCol += dilationWidth) {\n                  const dyCol = (dyColCorner + wCol) / strideWidth;\n                  if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                      Math.floor(dyCol) !== dyCol) {\n                    continue;\n                  }\n\n                  const maxPos = effectiveFilterDepth * effectiveFilterHeight *\n                          effectiveFilterWidth -\n                      1 -\n                      (maxPosBuf.get(batch, dyDepth, dyRow, dyCol, channel) as\n                       number);\n                  const curPos =\n                      wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                      wRow * effectiveFilterWidth + wCol;\n\n                  const mask = maxPos === curPos ? 1 : 0;\n                  if (mask === 0) {\n                    continue;\n                  }\n\n                  const pixel =\n                      dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                  dotProd += pixel * mask;\n                }\n              }\n            }\n            dx.set(dotProd, batch, dxDepth, dxRow, dxCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const maxPool3DGradConfig: KernelConfig = {\n  kernelName: MaxPool3DGrad,\n  backendName: 'cpu',\n  kernelFunc: maxPool3DGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, buffer, KernelConfig, KernelFunc, MaxPoolGrad, MaxPoolGradAttrs, MaxPoolGradInputs, Rank, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {maxPoolPositions} from '../utils/pool_utils';\n\nexport function maxPoolGrad(args: {\n  inputs: MaxPoolGradInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input, output} = inputs;\n  const x = input;\n  assertNotComplex([input, output], 'maxPoolGrad');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode);\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const maxPosBuf = buffer(\n      convInfo.outShape, x.dtype,\n      maxPoolPositions(xValues, x.shape, x.dtype, convInfo).values);\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx =\n      buffer<Rank.R4>(x.shape as [number, number, number, number], 'float32');\n\n  const dyData = backend.data.get(dy.dataId).values as Float32Array;\n  const dyBuf = buffer<Rank.R4>(\n      dy.shape as [number, number, number, number], 'float32', dyData);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          // Shader code begins.\n          const dyRCorner = dxR - padTop;\n          const dyCCorner = dxC - padLeft;\n          let dotProd = 0;\n          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            const dyR = (dyRCorner + wR) / strideHeight;\n            if (dyR < 0 || dyR >= convInfo.outHeight ||\n                Math.floor(dyR) !== dyR) {\n              continue;\n            }\n            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              const dyC = (dyCCorner + wC) / strideWidth;\n              if (dyC < 0 || dyC >= convInfo.outWidth ||\n                  Math.floor(dyC) !== dyC) {\n                continue;\n              }\n              const maxPos = effectiveFilterHeight * effectiveFilterWidth - 1 -\n                  (maxPosBuf.get(b, dyR, dyC, d) as number);\n              const curPos = wR * effectiveFilterWidth + wC;\n\n              const mask = maxPos === curPos ? 1 : 0;\n              if (mask === 0) {\n                continue;\n              }\n\n              const pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel * mask;\n            }\n          }\n          dx.set(dotProd, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const maxPoolGradConfig: KernelConfig = {\n  kernelName: MaxPoolGrad,\n  backendName: 'cpu',\n  kernelFunc: maxPoolGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {maxPoolWithArgmaxImpl} from './MaxPoolWithArgmax_impl';\n\nexport const maxPoolWithArgmaxConfig: KernelConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxPoolWithArgmaxInputs;\n    const {filterSize, strides, pad, includeBatchInIndex} =\n        attrs as {} as MaxPoolWithArgmaxAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'MaxPoolWithArgmax');\n\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const convInfo = backend_util.computePool2DInfo(\n        x.shape as [number, number, number, number], filterSize, strides,\n        [1, 1], pad);\n    const [pooled, indexes] = maxPoolWithArgmaxImpl(\n        values, x.shape, x.dtype, includeBatchInIndex, convInfo);\n\n    const pooledDataId =\n        cpuBackend.write(pooled as Float32Array, convInfo.outShape, x.dtype);\n    const indexesDataId =\n        cpuBackend.write(indexes as Int32Array, convInfo.outShape, x.dtype);\n    return [\n      {dataId: pooledDataId, shape: convInfo.outShape, dtype: x.dtype},\n      {dataId: indexesDataId, shape: convInfo.outShape, dtype: 'int32'}\n    ];\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {maxPoolPositions, pool} from '../utils/pool_utils';\nexport function maxPoolWithArgmaxImpl(\n    xValues: TypedArray, xShape: number[], dtype: DataType,\n    includeBatchInIndex: boolean, convInfo: backend_util.Conv2DInfo) {\n  const strides = util.computeStrides(xShape);\n  const maxPools = pool(xValues, xShape, dtype, strides, convInfo, 'max');\n  const maxPositions = maxPoolPositions(\n      xValues, xShape, dtype, convInfo, true, includeBatchInIndex);\n\n  return [maxPools.values, maxPositions.values];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Mean, MeanAttrs, MeanInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {cast} from './Cast';\nimport {div} from './RealDiv';\nimport {sum} from './Sum';\n\nexport function mean(\n    args: {inputs: MeanInputs, backend: MathBackendCPU, attrs: MeanAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const axes = util.parseAxisParam(axis, x.shape);\n  const shapes = backend_util.computeOutAndReduceShapes(x.shape, axes);\n  const reduceShape = shapes[1];\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const toDispose = [];\n  const reduceSizeScalar =\n      backend.makeTensorInfo([], 'float32', new Float32Array([reduceSize]));\n  toDispose.push(reduceSizeScalar);\n\n  const $x = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n  toDispose.push($x);\n\n  const res =\n      div({inputs: {a: $x, b: reduceSizeScalar}, backend}) as TensorInfo;\n  toDispose.push(res);\n\n  const result = sum({inputs: {x: res}, backend, attrs: {axis, keepDims}});\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const meanConfig: KernelConfig = {\n  kernelName: Mean,\n  backendName: 'cpu',\n  kernelFunc: mean as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Min, MinAttrs, MinInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function min(\n    args: {inputs: MinInputs, backend: MathBackendCPU, attrs: MinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'min');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('min', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let min = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (Number.isNaN(value) ||\n          value < min) {  // comparison with NaN always return false\n        min = value;\n      }\n    }\n    vals[i] = min;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const minConfig: KernelConfig = {\n  kernelName: Min,\n  backendName: 'cpu',\n  kernelFunc: min as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, MirrorPad, MirrorPadAttrs, MirrorPadInputs, NumericDataType, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function mirrorPad(args: {\n  inputs: MirrorPadInputs,\n  backend: MathBackendCPU,\n  attrs: MirrorPadAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {paddings, mode} = attrs;\n\n  assertNotComplex(x, 'mirrorPad');\n\n  const outShape = paddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n\n  const start = paddings.map(p => p[0]);\n  const end = paddings.map((p, i) => p[0] + x.shape[i]);\n  const offset = mode === 'reflect' ? 0 : 1;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals =\n      util.getTypedArrayFromDType(x.dtype as NumericDataType, resultSize);\n\n  for (let i = 0; i < resultSize; i++) {\n    let coords = util.indexToLoc(i, resultRank, resultStrides);\n    for (let i = 0; i < resultRank; i++) {\n      if (coords[i] < start[i]) {\n        coords[i] = start[i] * 2 - coords[i] - offset;\n      } else if (coords[i] >= end[i]) {\n        coords[i] = (end[i] - 1) * 2 - coords[i] + offset;\n      }\n    }\n    coords = coords.map((c, i) => c - start[i]);\n\n    const inIndex = util.locToIndex(coords, xRank, xStrides);\n\n    resVals[i] = xVals[inIndex];\n  }\n\n  const outId = backend.write(resVals, outShape, x.dtype);\n\n  return {dataId: outId, shape: outShape, dtype: x.dtype};\n}\n\nexport const mirrorPadConfig: KernelConfig = {\n  kernelName: MirrorPad,\n  backendName: 'cpu',\n  kernelFunc: mirrorPad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Mod} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const modImpl =\n    createSimpleBinaryKernelImpl(((aValue: number, bValue: number) => {\n      const rem = aValue % bValue;\n      if ((aValue < 0 && bValue < 0) || (aValue >= 0 && bValue >= 0)) {\n        return rem;\n      } else {\n        return (rem + bValue) % bValue;\n      }\n    }));\n\nexport const mod = binaryKernelFunc(Mod, modImpl);\n\nexport const modConfig: KernelConfig = {\n  kernelName: Mod,\n  backendName: 'cpu',\n  kernelFunc: mod\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Softmax, SoftmaxAttrs, SoftmaxInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {exp} from './Exp';\nimport {max} from './Max';\nimport {div} from './RealDiv';\nimport {reshape} from './Reshape';\nimport {sub} from './Sub';\nimport {sum} from './Sum';\n\nexport function softmax(\n    args:\n        {inputs: SoftmaxInputs, backend: MathBackendCPU, attrs: SoftmaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {dim} = attrs;\n\n  const logitsRank = logits.shape.length;\n\n  let $dim = dim;\n  if ($dim === -1) {\n    $dim = logitsRank - 1;\n  }\n  if ($dim !== logitsRank - 1) {\n    throw Error(\n        'Softmax along a non-last dimension is not yet supported. ' +\n        `Logits was rank ${logitsRank} and dim was ${$dim}`);\n  }\n\n  const axes = util.parseAxisParam([$dim], logits.shape);\n  const maxLogit = max({\n    inputs: {x: logits},\n    backend,\n    attrs: {reductionIndices: axes, keepDims: false}\n  });\n  const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n\n  const maxLogitReshaped =\n      reshape({inputs: {x: maxLogit}, backend, attrs: {shape: expandedShape}});\n  const a =\n      sub({inputs: {a: logits, b: maxLogitReshaped}, backend}) as TensorInfo;\n  const b = exp({inputs: {x: a}, backend}) as TensorInfo;\n  const sumExp =\n      sum({inputs: {x: b}, backend, attrs: {axis: axes, keepDims: false}});\n  const sumReshaped =\n      reshape({inputs: {x: sumExp}, backend, attrs: {shape: expandedShape}});\n\n  const result = div({inputs: {a: b, b: sumReshaped}, backend}) as TensorInfo;\n\n  backend.disposeIntermediateTensorInfo(maxLogit);\n  backend.disposeIntermediateTensorInfo(maxLogitReshaped);\n  backend.disposeIntermediateTensorInfo(a);\n  backend.disposeIntermediateTensorInfo(b);\n  backend.disposeIntermediateTensorInfo(sumExp);\n  backend.disposeIntermediateTensorInfo(sumReshaped);\n\n  return result;\n}\n\nexport const softmaxConfig: KernelConfig = {\n  kernelName: Softmax,\n  backendName: 'cpu',\n  kernelFunc: softmax as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Multinomial, MultinomialAttrs, MultinomialInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\nimport * as seedrandom from 'seedrandom';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {softmax} from './Softmax';\n\nexport function multinomial(args: {\n  inputs: MultinomialInputs,\n  backend: MathBackendCPU,\n  attrs: MultinomialAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {numSamples, seed, normalized} = attrs;\n\n  assertNotComplex(logits, 'multinomial');\n\n  const probabilities = normalized ?\n      logits :\n      softmax({inputs: {logits}, backend, attrs: {dim: -1}});\n\n  const batchSize = probabilities.shape[0];\n  const numEvents = probabilities.shape[1];\n  const probVals = backend.data.get(probabilities.dataId).values as TypedArray;\n  const resShape = [batchSize, numSamples];\n  const resVals =\n      util.makeZerosTypedArray(util.sizeFromShape(resShape), 'int32');\n\n  for (let b = 0; b < batchSize; ++b) {\n    const offset = b * numEvents;\n    // The cdf won't include the last event. It will be implicit if no other\n    // event happened.\n    const cdf = new Float32Array(numEvents - 1);\n    cdf[0] = probVals[offset];\n    for (let event = 1; event < cdf.length; ++event) {\n      cdf[event] = cdf[event - 1] + probVals[offset + event];\n    }\n\n    const random = seedrandom.alea(seed.toString());\n    const outOffset = b * numSamples;\n    for (let sampleId = 0; sampleId < numSamples; ++sampleId) {\n      const r = random();\n\n      // Assume last event happened by default.\n      resVals[outOffset + sampleId] = cdf.length;\n\n      for (let event = 0; event < cdf.length; event++) {\n        if (r < cdf[event]) {\n          resVals[outOffset + sampleId] = event;\n          break;\n        }\n      }\n    }\n  }\n\n  if (!normalized) {\n    backend.disposeIntermediateTensorInfo(probabilities);\n  }\n\n  return backend.makeTensorInfo(resShape, 'int32', resVals);\n}\n\nexport const multinomialConfig: KernelConfig = {\n  kernelName: Multinomial,\n  backendName: 'cpu',\n  kernelFunc: multinomial as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV3, NonMaxSuppressionV3Attrs, NonMaxSuppressionV3Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV3Impl = kernel_impls.nonMaxSuppressionV3Impl;\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV3(args: {\n  inputs: NonMaxSuppressionV3Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV3Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold} = attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppression');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const {selectedIndices} = nonMaxSuppressionV3Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n\n  return backend.makeTensorInfo(\n      [selectedIndices.length], 'int32', new Int32Array(selectedIndices));\n}\n\nexport const nonMaxSuppressionV3Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV3 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV4, NonMaxSuppressionV4Attrs, NonMaxSuppressionV4Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV4Impl = kernel_impls.nonMaxSuppressionV4Impl;\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV4(args: {\n  inputs: NonMaxSuppressionV4Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV4Attrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize} =\n      attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppressionPadded');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const {selectedIndices, validOutputs} = nonMaxSuppressionV4Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold,\n      padToMaxOutputSize);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo([], 'int32', new Int32Array([validOutputs]))\n  ];\n}\nexport const nonMaxSuppressionV4Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV4,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV4 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV5, NonMaxSuppressionV5Attrs, NonMaxSuppressionV5Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV5(args: {\n  inputs: NonMaxSuppressionV5Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV5Attrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma} = attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppressionWithScore');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const maxOutputSizeVal = maxOutputSize;\n  const iouThresholdVal = iouThreshold;\n  const scoreThresholdVal = scoreThreshold;\n  const softNmsSigmaVal = softNmsSigma;\n\n  const {selectedIndices, selectedScores} = nonMaxSuppressionV5Impl(\n      boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n      scoreThresholdVal, softNmsSigmaVal);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo(\n        [selectedScores.length], 'float32', new Float32Array(selectedScores))\n  ];\n}\n\nexport const nonMaxSuppressionV5Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV5 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OneHot, OneHotAttrs, OneHotInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function oneHot(\n    args: {inputs: OneHotInputs, backend: MathBackendCPU, attrs: OneHotAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices} = inputs;\n  const {depth, onValue, offValue} = attrs;\n\n  assertNotComplex(indices, 'oneHot');\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const res = new Float32Array(indicesSize * depth);\n  res.fill(offValue);\n  const indicesVal = backend.data.get(indices.dataId).values as TypedArray;\n\n  for (let event = 0; event < indicesSize; ++event) {\n    if (indicesVal[event] >= 0 && indicesVal[event] < depth) {\n      res[event * depth + indicesVal[event]] = onValue;\n    }\n  }\n\n  return backend.makeTensorInfo([...indices.shape, depth], 'int32', res);\n}\n\nexport const oneHotConfig: KernelConfig = {\n  kernelName: OneHot,\n  backendName: 'cpu',\n  kernelFunc: oneHot as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, ZerosLike, ZerosLikeInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\n\nexport function zerosLike(\n    args: {inputs: ZerosLikeInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('zerosLike is not supported for string tensors');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = zerosLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({backend, attrs: {shape: x.shape, value: 0, dtype: x.dtype}});\n  }\n}\n\nexport const zerosLikeConfig: KernelConfig = {\n  kernelName: ZerosLike,\n  backendName: 'cpu',\n  kernelFunc: zerosLike as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OnesLike, OnesLikeInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {zerosLike} from './ZerosLike';\n\nexport function onesLike(\n    args: {inputs: OnesLikeInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('onesLike is not supported for string tensors');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = onesLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({backend, attrs: {shape: x.shape, value: 1, dtype: x.dtype}});\n  }\n}\n\nexport const onesLikeConfig: KernelConfig = {\n  kernelName: OnesLike,\n  backendName: 'cpu',\n  kernelFunc: onesLike as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pack, PackAttrs, PackInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {concat} from './Concat';\nimport {expandDims} from './ExpandDims';\n\nexport function pack(\n    args: {inputs: PackInputs, backend: MathBackendCPU, attrs: PackAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  if (inputs.length === 1) {\n    return expandDims(\n        {inputs: {input: inputs[0]}, backend, attrs: {dim: axis}});\n  }\n\n  const shape = inputs[0].shape;\n  const dtype = inputs[0].dtype;\n\n  inputs.forEach(t => {\n    util.assertShapesMatch(\n        shape, t.shape,\n        'All tensors passed to stack must have matching shapes');\n    util.assert(\n        dtype === t.dtype,\n        () => 'All tensors passed to stack must have matching dtypes');\n  });\n\n  const intermediateTensorInfos: TensorInfo[] = [];\n  const expandedTensors = inputs.map(t => {\n    const expandedT =\n        expandDims({inputs: {input: t}, backend, attrs: {dim: axis}});\n    intermediateTensorInfos.push(expandedT);\n    return expandedT;\n  });\n\n  const result = concat({inputs: expandedTensors, backend, attrs: {axis}});\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const packConfig: KernelConfig = {\n  kernelName: Pack,\n  backendName: 'cpu',\n  kernelFunc: pack as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, PadV2, PadV2Attrs, PadV2Inputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function padV2(\n    args: {inputs: PadV2Inputs, backend: MathBackendCPU, attrs: PadV2Attrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {paddings, constantValue} = attrs;\n\n  assertNotComplex(x, 'pad');\n\n  const outShape = paddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n\n  const start = paddings.map(p => p[0]);\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xSize = util.sizeFromShape(x.shape);\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals =\n      util.getTypedArrayFromDType(x.dtype as NumericDataType, resultSize);\n\n  if (constantValue !== 0) {\n    resVals.fill(constantValue);\n  }\n\n  for (let i = 0; i < xSize; i++) {\n    const coords = util.indexToLoc(i, xRank, xStrides);\n    const outCoords = coords.map((c, i) => c + start[i]);\n    const outIndex = util.locToIndex(outCoords, resultRank, resultStrides);\n\n    resVals[outIndex] = xVals[i];\n  }\n\n  const outId = backend.write(resVals, outShape, x.dtype);\n\n  return {dataId: outId, shape: outShape, dtype: x.dtype};\n}\n\nexport const padV2Config: KernelConfig = {\n  kernelName: PadV2,\n  backendName: 'cpu',\n  kernelFunc: padV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Pow} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const powImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => Math.pow(a, b));\nexport const pow = binaryKernelFunc(Pow, powImpl);\n\nexport const powConfig: KernelConfig = {\n  kernelName: Pow,\n  backendName: 'cpu',\n  kernelFunc: pow\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Range, RangeAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {rangeImpl} from './Range_impl';\n\nexport function range(args: {backend: MathBackendCPU, attrs: RangeAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, dtype, step} = attrs;\n\n  const values = rangeImpl(start, stop, step, dtype);\n  return backend.makeTensorInfo([values.length], dtype, values);\n}\n\nexport const rangeConfig: KernelConfig = {\n  kernelName: Range,\n  backendName: 'cpu',\n  kernelFunc: range as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Reciprocal} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const reciprocal = unaryKernelFunc(Reciprocal, (xi) => 1 / xi);\n\nexport const reciprocalConfig: KernelConfig = {\n  kernelName: Reciprocal,\n  backendName: 'cpu',\n  kernelFunc: reciprocal,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinear, ResizeBilinearAttrs, ResizeBilinearInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeBilinear(args: {\n  inputs: ResizeBilinearInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeBilinearAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  assertNotComplex(images, 'resizeBilinear');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const [newHeight, newWidth] = size;\n\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const xValues = backend.data.get(images.dataId).values as TypedArray;\n  const result = new Float32Array(\n      util.sizeFromShape([batch, newHeight, newWidth, numChannels]));\n\n  const effectiveInputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n    (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n  ];\n\n  const effectiveOutputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n    (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n  ];\n  let outputIdx = 0;\n  const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n  const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n  for (let b = 0; b < batch; b++) {\n    for (let r = 0; r < newHeight; r++) {\n      let sourceFracRow: number;\n      if (halfPixelCenters) {\n        sourceFracRow = effectiveRowSizeRatio * (r + 0.5) - 0.5;\n      } else {\n        sourceFracRow = effectiveRowSizeRatio * r;\n      }\n\n      const sourceRowFloor = Math.max(0, Math.floor(sourceFracRow));\n      const rowFrac = sourceFracRow - sourceRowFloor;\n      const sourceRowCeil = Math.min(oldHeight - 1, Math.ceil(sourceFracRow));\n      const topRowOffset =\n          b * imagesStrides[0] + sourceRowFloor * imagesStrides[1];\n      const botRowOffset =\n          b * imagesStrides[0] + sourceRowCeil * imagesStrides[1];\n      for (let c = 0; c < newWidth; c++) {\n        let sourceFracCol: number;\n        if (halfPixelCenters) {\n          sourceFracCol = effectiveColSizeRatio * (c + 0.5) - 0.5;\n        } else {\n          sourceFracCol = effectiveColSizeRatio * c;\n        }\n        const sourceColFloor = Math.max(0, Math.floor(sourceFracCol));\n        const colFrac = sourceFracCol - sourceColFloor;\n        const sourceColCeil = Math.min(oldWidth - 1, Math.ceil(sourceFracCol));\n        const topLeftOffest = topRowOffset + sourceColFloor * imagesStrides[2];\n        const botLeftOffset = botRowOffset + sourceColFloor * imagesStrides[2];\n        const topRightOffset = topRowOffset + sourceColCeil * imagesStrides[2];\n        const botRightOffest = botRowOffset + sourceColCeil * imagesStrides[2];\n        for (let d = 0; d < numChannels; d++) {\n          // Begin shader.\n\n          // Compute the fractional index of the source.\n          const topLeft = xValues[topLeftOffest + d];\n          const bottomLeft = xValues[botLeftOffset + d];\n          const topRight = xValues[topRightOffset + d];\n          const bottomRight = xValues[botRightOffest + d];\n\n          const top = topLeft + (topRight - topLeft) * colFrac;\n          const bottom = bottomLeft + (bottomRight - bottomLeft) * colFrac;\n          const newValue = top + (bottom - top) * rowFrac;\n\n          result[outputIdx++] = newValue;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, newHeight, newWidth, numChannels], 'float32', result);\n}\n\nexport const resizeBilinearConfig: KernelConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'cpu',\n  kernelFunc: resizeBilinear as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinearGrad, ResizeBilinearGradAttrs, ResizeBilinearGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeBilinearGrad(args: {\n  inputs: ResizeBilinearGradInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeBilinearGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  assertNotComplex([dy, images], 'resizeBilinearGrad');\n\n  const imagesStrides = util.computeStrides(images.shape);\n\n  const [batch, xHeight, xWidth, depth] = images.shape;\n  const [, yHeight, yWidth] = dy.shape;\n\n  const output = new Float32Array(batch * xHeight * xWidth * depth);\n\n  // In the backwards pass, we want to find the pixels that were generated\n  // for each pixel in the input image the forward pass and add the\n  // corresponding coefficient from dy to the gradient (with some\n  // interpolation).\n\n  const effectiveXSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n    (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n  ];\n\n  const effectiveYSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n    (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n  ];\n\n  const heightScale = effectiveXSize[0] / effectiveYSize[0];\n  const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n  // Reference implementation\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tensorflow/blob/3039375c86a5bbc9610c7725dcaa95d635f87ba2/tensorflow/core/kernels/resize_bilinear_op.cc#L275\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  let offset = 0;\n  for (let b = 0; b < batch; b++) {\n    const bOffset = b * imagesStrides[0];\n    for (let r = 0; r < yHeight; r++) {\n      const dxR = r * heightScale;\n      const topDxRIndex = Math.floor(dxR);\n      const bottomDxRIndex = Math.min(Math.ceil(dxR), xHeight - 1);\n\n      const topDxROffset = bOffset + topDxRIndex * imagesStrides[1];\n      const bottomDxROffset = bOffset + bottomDxRIndex * imagesStrides[1];\n\n      const dxRLerp = dxR - topDxRIndex;\n      const inverseDxRLerp = 1.0 - dxRLerp;\n      for (let c = 0; c < yWidth; c++) {\n        const dxC = c * widthScale;\n        const leftDxCIndex = Math.floor(dxC);\n        const rightDxCIndex = Math.min(Math.ceil(dxC), xWidth - 1);\n        const dxCLerp = dxC - leftDxCIndex;\n        const inverseDxCLerp = 1.0 - dxCLerp;\n\n        const topLeftRCOffset = topDxROffset + leftDxCIndex * imagesStrides[2];\n        const topRightRCOffset =\n            topDxROffset + rightDxCIndex * imagesStrides[2];\n        const bottomLeftRCOffset =\n            bottomDxROffset + leftDxCIndex * imagesStrides[2];\n        const bottomRightRCOffset =\n            bottomDxROffset + rightDxCIndex * imagesStrides[2];\n\n        const inverseDxRLerpTimesInverseDxCLerp =\n            inverseDxRLerp * inverseDxCLerp;\n        const inverseDxRLerpTimesDxCLerp = inverseDxRLerp * dxCLerp;\n        const dxRLerpTimesInverseDxCLerp = dxRLerp * inverseDxCLerp;\n        const dxRLerpTimesDxCLerp = dxRLerp * dxCLerp;\n        for (let d = 0; d < depth; d++) {\n          const dyVal = dyValues[offset++];\n          output[topLeftRCOffset + d] +=\n              dyVal * inverseDxRLerpTimesInverseDxCLerp;\n          output[topRightRCOffset + d] += dyVal * inverseDxRLerpTimesDxCLerp;\n          output[bottomLeftRCOffset + d] += dyVal * dxRLerpTimesInverseDxCLerp;\n          output[bottomRightRCOffset + d] += dyVal * dxRLerpTimesDxCLerp;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, xWidth, xHeight, depth], 'float32', output);\n}\n\nexport const resizeBilinearGradConfig: KernelConfig = {\n  kernelName: ResizeBilinearGrad,\n  backendName: 'cpu',\n  kernelFunc: resizeBilinearGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighbor, ResizeNearestNeighborAttrs, ResizeNearestNeighborInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeNearestNeighbor(args: {\n  inputs: ResizeNearestNeighborInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeNearestNeighborAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  assertNotComplex(images, 'resizeNearestNeighbor');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const [newHeight, newWidth] = size;\n\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const xValues = backend.data.get(images.dataId).values as TypedArray;\n  const output = new Float32Array(batch * newHeight * newWidth * numChannels);\n\n  const effectiveInputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n    (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n  ];\n\n  const effectiveOutputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n    (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n  ];\n\n  const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n  const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n\n  let outputOffset = 0;\n  for (let b = 0; b < batch; b++) {\n    const batchOffset = b * imagesStrides[0];\n    for (let r = 0; r < newHeight; r++) {\n      const sourceFracRow = halfPixelCenters ?\n          effectiveRowSizeRatio * (r + 0.5) :\n          effectiveRowSizeRatio * r;\n      let sourceNearestRow = Math.min(\n          oldHeight - 1,\n          alignCorners ? Math.round(sourceFracRow) : Math.floor(sourceFracRow));\n      if (halfPixelCenters) {\n        sourceNearestRow = Math.max(0, sourceNearestRow);\n      }\n      const rowOffset = batchOffset + sourceNearestRow * imagesStrides[1];\n      for (let c = 0; c < newWidth; c++) {\n        const sourceFracCol = halfPixelCenters ?\n            effectiveColSizeRatio * (c + 0.5) :\n            effectiveColSizeRatio * c;\n        let sourceNearestCol = Math.min(\n            oldWidth - 1,\n            alignCorners ? Math.round(sourceFracCol) :\n                           Math.floor(sourceFracCol));\n        if (halfPixelCenters) {\n          sourceNearestCol = Math.max(0, sourceNearestCol);\n        }\n        const colOffset = rowOffset + sourceNearestCol * imagesStrides[2];\n        for (let d = 0; d < numChannels; d++) {\n          // Begin shader.\n          // Compute the fractional index of the source.\n          const newVal = xValues[colOffset + d];\n          output[outputOffset++] = newVal;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, newHeight, newWidth, numChannels], images.dtype, output);\n}\n\nexport const resizeNearestNeighborConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: 'cpu',\n  kernelFunc: resizeNearestNeighbor as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighborGrad, ResizeNearestNeighborGradAttrs, ResizeNearestNeighborGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeNearestNeighborGrad(args: {\n  inputs: ResizeNearestNeighborGradInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeNearestNeighborGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  assertNotComplex([dy, images], 'resizeNearestNeighborGrad');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n  const [batch, xHeight, xWidth, depth] = images.shape;\n  const [, yHeight, yWidth] = dy.shape;\n\n  const output = new Float32Array(batch * xHeight * xWidth * depth);\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n\n  // In the backwards pass, we want to find the pixels that were generated\n  // for each pixel in the input image the forward pass\n\n  const effectiveXSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n    (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n  ];\n\n  const effectiveYSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n    (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n  ];\n\n  const heightScale = effectiveXSize[0] / effectiveYSize[0];\n  const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n  const invHeightScale = 1 / heightScale;\n  const invWidthScale = 1 / widthScale;\n\n  // This defines the size of the window of values around a particular\n  // index in dy that we want to search for contributions to dx.\n  const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n  const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n  // Loop over the output space.\n  for (let b = 0; b < batch; b++) {\n    const batchOffset = b * imagesStrides[0];\n    for (let r = 0; r < xHeight; r++) {\n      const rowOffset = batchOffset + r * imagesStrides[1];\n\n      // Compute bounds for where in dy we will look\n      const startRLerp = Math.floor(r * invHeightScale);\n      const startDyR = Math.floor(startRLerp - (winHeight / 2));\n      for (let c = 0; c < xWidth; c++) {\n        const colOffset = rowOffset + c * imagesStrides[2];\n\n        // Compute bounds for where in dy we will look\n        const startCLerp = Math.floor(c * invWidthScale);\n        const startDyC = Math.floor(startCLerp - (winWidth / 2));\n\n        for (let d = 0; d < depth; d++) {\n          let accum = 0;\n          // loop over dy\n\n          for (let dyRIndex = 0; dyRIndex < winHeight; dyRIndex++) {\n            const dyR = dyRIndex + startDyR;\n            // Guard against the window exceeding the bounds of dy\n            if (dyR < 0 || dyR >= yHeight) {\n              continue;\n            }\n\n            const dyROffset = batchOffset + dyR * dyStrides[1];\n            const sourceFracRow = dyR * heightScale;\n            const sourceNearestRow = Math.min(\n                xHeight - 1,\n                alignCorners ? Math.round(sourceFracRow) :\n                               Math.floor(sourceFracRow));\n            if (r !== sourceNearestRow) {\n              continue;\n            }\n            for (let dyCIndex = 0; dyCIndex < winWidth; dyCIndex++) {\n              const dyC = dyCIndex + startDyC;\n              // Guard against the window exceeding the bounds of dy\n              if (dyC < 0 || dyC >= yWidth) {\n                continue;\n              }\n\n              const dyCOffset = dyROffset + dyC * dyStrides[2];\n              const sourceFracCol = dyC * widthScale;\n              const sourceNearestCol = Math.min(\n                  xWidth - 1,\n                  alignCorners ? Math.round(sourceFracCol) :\n                                 Math.floor(sourceFracCol));\n\n              if (c === sourceNearestCol) {\n                accum += dyValues[dyCOffset + d];\n              }\n            }\n          }\n          output[colOffset + d] = accum;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(images.shape, images.dtype, output);\n}\n\nexport const resizeNearestNeighborGradConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighborGrad,\n  backendName: 'cpu',\n  kernelFunc: resizeNearestNeighborGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reverse, ReverseAttrs, ReverseInputs, TensorBuffer, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {identity} from './Identity';\n\nexport function reverse(\n    args:\n        {inputs: ReverseInputs, backend: MathBackendCPU, attrs: ReverseAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dims} = attrs;\n\n  assertNotComplex(x, 'reverse');\n\n  const xRank = x.shape.length;\n\n  const $dims = util.parseAxisParam(dims, x.shape);\n  if (xRank === 0) {\n    return identity({inputs: {x}, backend});\n  }\n\n  const outBuf = new TensorBuffer(x.shape, x.dtype);\n  const xBuf = backend.bufferSync(x);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.slice();\n    $dims.forEach(d => inLoc[d] = x.shape[d] - 1 - inLoc[d]);\n    outBuf.set(xBuf.get(...inLoc), ...outLoc);\n  }\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const reverseConfig: KernelConfig = {\n  kernelName: Reverse,\n  backendName: 'cpu',\n  kernelFunc: reverse as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {backend_util, RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const rotateWithOffsetConfig: KernelConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as RotateWithOffsetInputs;\n    const {radians, fillValue, center} = attrs as {} as RotateWithOffsetAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const output = util.getTypedArrayFromDType(\n        image.dtype as NumericDataType, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n    const [centerX, centerY] =\n        backend_util.getImageCenter(center, imageHeight, imageWidth);\n    const fullOpacityValue = 255;\n\n    const sinFactor = Math.sin(radians);\n    const cosFactor = Math.cos(radians);\n    const imageVals = cpuBackend.data.get(image.dataId).values as TypedArray;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coords = [batch, row, col, channel];\n\n            const x = coords[2];\n            const y = coords[1];\n\n            // coordX/coordY are the result of rotating and translating x/y.\n            let coordX = (x - centerX) * cosFactor - (y - centerY) * sinFactor;\n            let coordY = (x - centerX) * sinFactor + (y - centerY) * cosFactor;\n            coordX = Math.round(coordX + centerX);\n            coordY = Math.round(coordY + centerY);\n\n            let outputValue = fillValue;\n            if (typeof fillValue !== 'number') {\n              if (channel === 3) {\n                outputValue = fullOpacityValue;\n              } else {\n                outputValue = fillValue[channel];\n              }\n            }\n\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth && coordY >= 0 &&\n                coordY < imageHeight) {\n              // set the output to the image value at the coordinate position.\n              const rotatedRowOffset = coordY * (imageWidth * numChannels);\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx =\n                  batchOffset + rotatedRowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n            output[outIdx] = outputValue as number;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {dataId, shape: image.shape, dtype: image.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Round} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const round = unaryKernelFunc(Round, (xi) => {\n  // The algorithm is based on banker's rounding.\n  const base = Math.floor(xi);\n  if (xi - base < 0.5) {\n    return Math.floor(xi);\n  } else if (xi - base > 0.5) {\n    return Math.ceil(xi);\n  } else {\n    if (base % 2.0 === 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n});\n\nexport const roundConfig: KernelConfig = {\n  kernelName: Round,\n  backendName: 'cpu',\n  kernelFunc: round,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Rank, ScatterNd, ScatterNdAttrs, ScatterNdInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {scatterImpl} from './Scatter_impl';\n\nexport function scatterNd(args: {\n  inputs: ScatterNdInputs,\n  backend: MathBackendCPU,\n  attrs: ScatterNdAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices, updates} = inputs;\n  const {shape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, shape);\n  const sumDupeIndices = true;\n\n  const indicesBuf = backend.bufferSync<Rank, 'int32'>(indices);\n  const updatesBuf = backend.bufferSync<Rank, 'int32'|'float32'>(updates);\n\n  const outBuf = scatterImpl(\n      indicesBuf, updatesBuf, shape, outputSize, sliceSize, numUpdates,\n      sliceRank, strides, 0 /* defaultValue */, sumDupeIndices);\n\n  return backend.makeTensorInfo(shape, outBuf.dtype, outBuf.values);\n}\n\nexport const scatterNdConfig: KernelConfig = {\n  kernelName: ScatterNd,\n  backendName: 'cpu',\n  kernelFunc: scatterNd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction lowerBound(array: TypedArray, value: number) {\n  let left = 0;\n  let right = array.length;\n  let mid = 0;\n  while (left < right) {\n    mid = Math.floor((left + right) / 2);\n    if (array[mid] < value) {\n      left = mid + 1;\n    } else {\n      right = mid;\n    }\n  }\n  return right;\n}\n\nfunction upperBound(array: TypedArray, value: number) {\n  let left = 0;\n  let right = array.length;\n  let mid = 0;\n  while (left < right) {\n    mid = Math.floor((left + right) / 2);\n    if (array[mid] <= value) {\n      left = mid + 1;\n    } else {\n      right = mid;\n    }\n  }\n  return right;\n}\n\nexport function searchSortedImpl(\n    sortedInputs: TypedArray, values: TypedArray, batchSize: number,\n    numInputs: number, numValues: number, side: 'left'|'right'): TypedArray {\n  const output =\n      util.getArrayFromDType('int32', batchSize * numValues) as TypedArray;\n  for (let b = 0; b < batchSize; ++b) {\n    const sortedInputsSlice =\n        sortedInputs.slice(b * numInputs, (b + 1) * numInputs);\n    const outputOffset = b * numValues;\n    for (let i = 0; i < numValues; ++i) {\n      output[outputOffset + i] = side === 'left' ?\n          lowerBound(sortedInputsSlice, values[i + outputOffset]) :\n          upperBound(sortedInputsSlice, values[i + outputOffset]);\n    }\n  }\n  return output;\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SearchSorted, SearchSortedAttrs, SearchSortedInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {searchSortedImpl} from './SearchSorted_impl';\n\nexport function searchSorted(args: {\n  inputs: SearchSortedInputs,\n  backend: MathBackendCPU,\n  attrs: SearchSortedAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sortedSequence, values} = inputs;\n  const {side} = attrs;\n\n  const $sortedSequence =\n      backend.data.get(sortedSequence.dataId).values as TypedArray;\n  const $values = backend.data.get(values.dataId).values as TypedArray;\n\n  const output = searchSortedImpl(\n      $sortedSequence, $values, sortedSequence.shape[0],\n      sortedSequence.shape[1], values.shape[1], side);\n  return backend.makeTensorInfo(values.shape, 'int32', output);\n}\n\nexport const searchSortedConfig: KernelConfig = {\n  kernelName: SearchSorted,\n  backendName: 'cpu',\n  kernelFunc: searchSorted as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Select, SelectInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function select(args: {inputs: SelectInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {condition, t, e} = inputs;\n\n  assertNotComplex([condition, t, e], 'select');\n  const conditionRank = condition.shape.length;\n\n  const values = backend.data.get(condition.dataId).values as TypedArray;\n  const tValues = backend.data.get(t.dataId).values as TypedArray;\n  const eValues = backend.data.get(e.dataId).values as TypedArray;\n  const resultDtype = upcastType(t.dtype, e.dtype);\n  const newValues =\n      util.makeZerosTypedArray(util.sizeFromShape(t.shape), resultDtype);\n\n  let index = 0;\n  const offset =\n      conditionRank === 0 || conditionRank > 1 || t.shape.length === 1 ?\n      1 :\n      util.sizeFromShape(t.shape.slice(1));\n\n  for (let i = 0; i < values.length; i++) {\n    for (let j = 0; j < offset; j++) {\n      if (values[i] === 1) {\n        newValues[index++] = tValues[i];\n      } else {\n        newValues[index++] = eValues[i];\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(t.shape, resultDtype, newValues);\n}\n\nexport const selectConfig: KernelConfig = {\n  kernelName: Select,\n  backendName: 'cpu',\n  kernelFunc: select as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Selu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nconst scaleAlpha = backend_util.SELU_SCALEALPHA;\nconst scale = backend_util.SELU_SCALE;\n\nexport const selu = unaryKernelFunc(Selu, (xi) => {\n  if (xi >= 0) {\n    return scale * xi;\n  } else {\n    return scaleAlpha * (Math.exp(xi) - 1);\n  }\n});\n\nexport const seluConfig: KernelConfig = {\n  kernelName: Selu,\n  backendName: 'cpu',\n  kernelFunc: selu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sign} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sign = unaryKernelFunc(Sign, (xi) => {\n  if (xi < 0) {\n    return -1;\n  } else if (xi > 0) {\n    return 1;\n  } else {\n    return 0;\n  }\n});\n\nexport const signConfig: KernelConfig = {\n  kernelName: Sign,\n  backendName: 'cpu',\n  kernelFunc: sign,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sin} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sin = unaryKernelFunc(Sin, (xi) => Math.sin(xi));\n\nexport const sinConfig: KernelConfig = {\n  kernelName: Sin,\n  backendName: 'cpu',\n  kernelFunc: sin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sinh} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sinh = unaryKernelFunc(Sinh, (xi) => Math.sinh(xi));\n\nexport const sinhConfig: KernelConfig = {\n  kernelName: Sinh,\n  backendName: 'cpu',\n  kernelFunc: sinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Softplus} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\n// mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX\n\n// epsilon is the difference between 1.0 and the next representable float.\n// For a single precision 32 bit float this should be 2^-23, see:\n// https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm\nconst epsilon = 1.1920928955078125e-7;\nconst threshold = Math.log(epsilon) + 2.0;\n\nexport const softplus = unaryKernelFunc(Softplus, (xi) => {\n  // Value above which exp(x) may overflow, but softplus(x) == x\n  // is within machine epsilon.\n  const tooLarge = xi > -threshold;\n\n  // Value below which exp(x) may underflow, but softplus(x) == exp(x)\n  // is within machine epsilon.\n  const tooSmall = xi < threshold;\n\n  const expX = Math.exp(xi);\n  let result;\n\n  if (tooSmall) {\n    result = expX;\n  } else if (tooLarge) {\n    result = xi;\n  } else {\n    result = Math.log(1.0 + expX);\n  }\n  return result;\n});\n\nexport const softplusConfig: KernelConfig = {\n  kernelName: Softplus,\n  backendName: 'cpu',\n  kernelFunc: softplus,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ReshapeAttrs, ReshapeInputs, SpaceToBatchND, SpaceToBatchNDAttrs, SpaceToBatchNDInputs, TensorInfo, TransposeAttrs, TransposeInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {padV2Config} from './PadV2';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function spaceToBatchND(args: {\n  inputs: SpaceToBatchNDInputs,\n  backend: MathBackendCPU,\n  attrs: SpaceToBatchNDAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, paddings} = attrs;\n\n  assertNotComplex([x], 'spaceToBatchND');\n\n  const prod = util.sizeFromShape(blockShape);\n\n  const completePaddings: Array<[number, number]> = [[0, 0]];\n  completePaddings.push(...(paddings as Array<[number, number]>));\n\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  const paddedX = padV2Config.kernelFunc({\n    inputs: {x},\n    backend,\n    attrs: {paddings: completePaddings, constantValue: 0}\n  }) as TensorInfo;\n\n  const reshapedPaddedShape =\n      backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n      reshapedPaddedShape.length, blockShape.length, false);\n\n  const flattenShape =\n      backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n\n  const reshapeInputs: ReshapeInputs = {x: paddedX};\n  const reshapeAttrs: ReshapeAttrs = {shape: reshapedPaddedShape};\n  const paddedXReshaped =\n      reshape({inputs: reshapeInputs, backend, attrs: reshapeAttrs});\n\n  const transposeInputs: TransposeInputs = {x: paddedXReshaped};\n  const transposeAttrs:\n      TransposeAttrs = {perm: permutedReshapedPaddedPermutation};\n  const paddedXT =\n      transpose({inputs: transposeInputs, backend, attrs: transposeAttrs});\n\n  const resultReshapeInputs: ReshapeInputs = {x: paddedXT};\n  const resultReshapeAttrs: ReshapeAttrs = {shape: flattenShape};\n  const result = reshape(\n      {inputs: resultReshapeInputs, backend, attrs: resultReshapeAttrs});\n\n  backend.disposeIntermediateTensorInfo(paddedX);\n  backend.disposeIntermediateTensorInfo(paddedXReshaped);\n  backend.disposeIntermediateTensorInfo(paddedXT);\n\n  return result;\n}\n\nexport const spaceToBatchNDConfig: KernelConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'cpu',\n  kernelFunc: spaceToBatchND as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseFillEmptyRows, SparseFillEmptyRowsInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseFillEmptyRowsImpl} from './SparseFillEmptyRows_impl';\n\nexport function sparseFillEmptyRows(args: {\n  inputs: SparseFillEmptyRowsInputs,\n  backend: MathBackendCPU\n}): [TensorInfo, TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {indices, values, denseShape, defaultValue} = inputs;\n  if (denseShape.shape.length !== 1) {\n    throw new Error(`Dense shape must be a vector, saw:\n        ${denseShape.shape}`);\n  }\n  if (indices.shape.length !== 2) {\n    throw new Error(`Indices must be a matrix, saw:\n        ${indices.shape}`);\n  }\n  if (values.shape.length !== 1) {\n    throw new Error(`Values must be a vector, saw:\n        ${values.shape}`);\n  }\n  if (defaultValue.shape.length !== 0) {\n    throw new Error(`Default value must be a scalar, saw:\n        ${defaultValue.shape}`);\n  }\n\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n  const $values = backend.data.get(values.dataId).values as TypedArray;\n  const $denseShape = backend.data.get(denseShape.dataId).values as TypedArray;\n  const $defaultValue =\n      backend.data.get(defaultValue.dataId).values[0] as number;\n\n  const [outputIndices, outputIndicesShape, outputValues,\n         emptyRowIndicator, reverseIndexMap] =\n      sparseFillEmptyRowsImpl(\n          $indices, indices.shape, indices.dtype, $values, values.dtype,\n          $denseShape, $defaultValue);\n  return [\n    backend.makeTensorInfo(outputIndicesShape, indices.dtype, outputIndices),\n    backend.makeTensorInfo(\n        [outputIndicesShape[0]], values.dtype, outputValues),\n    backend.makeTensorInfo(\n        [emptyRowIndicator.length], 'bool',\n        new Uint8Array(\n            emptyRowIndicator.map((value: boolean) => Number(value)))),\n    backend.makeTensorInfo(\n        [reverseIndexMap.length], indices.dtype,\n        new Int32Array(reverseIndexMap)),\n  ];\n}\n\nexport const sparseFillEmptyRowsConfig: KernelConfig = {\n  kernelName: SparseFillEmptyRows,\n  backendName: 'cpu',\n  kernelFunc: sparseFillEmptyRows as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseReshape, SparseReshapeInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseReshapeImpl} from './SparseReshape_impl';\n\nexport function sparseReshape(\n    args: {inputs: SparseReshapeInputs, backend: MathBackendCPU}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {inputIndices, inputShape, newShape} = inputs;\n  if (inputIndices.shape.length !== 2) {\n    throw new Error(`Input indices should be a matrix but received shape\n        ${inputIndices.shape}`);\n  }\n  if (inputShape.shape.length !== 1) {\n    throw new Error(`Input shape should be a vector but received shape\n        ${inputShape.shape}`);\n  }\n\n  if (newShape.shape.length !== 1) {\n    throw new Error(\n        `Target shape should be a vector but received shape ${newShape.shape}`);\n  }\n\n  const $inputShape =\n      Array.from(backend.data.get(inputShape.dataId).values as TypedArray);\n  const $inputIndices =\n      backend.data.get(inputIndices.dataId).values as TypedArray;\n  const targetShape =\n      Array.from(backend.data.get(newShape.dataId).values as TypedArray);\n\n  const [newIndices, indicesShape, outputShape] = sparseReshapeImpl(\n      $inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape,\n      targetShape);\n  return [\n    backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices),\n    backend.makeTensorInfo(\n        [outputShape.length], newShape.dtype, new Int32Array(outputShape)),\n  ];\n}\n\nexport const sparseReshapeConfig: KernelConfig = {\n  kernelName: SparseReshape,\n  backendName: 'cpu',\n  kernelFunc: sparseReshape,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseSegmentMean, SparseSegmentMeanInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseSegmentReductionImpl} from './SparseSegmentReduction_impl';\n\nexport function sparseSegmentMean(\n    args: {inputs: SparseSegmentMeanInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n          ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n          ${segmentIds.shape}`);\n  }\n  if (indices.shape[0] !== segmentIds.shape[0]) {\n    throw new Error(`segmentIds and indices should have same size.`);\n  }\n\n  const $data = backend.data.get(data.dataId).values as TypedArray;\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n  const $segmentIds = backend.data.get(segmentIds.dataId).values as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImpl(\n      $data, data.shape, data.dtype, $indices, $segmentIds, true);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentMeanConfig: KernelConfig = {\n  kernelName: SparseSegmentMean,\n  backendName: 'cpu',\n  kernelFunc: sparseSegmentMean,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseSegmentSum, SparseSegmentSumInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseSegmentReductionImpl} from './SparseSegmentReduction_impl';\n\nexport function sparseSegmentSum(\n    args: {inputs: SparseSegmentSumInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n         ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n         ${segmentIds.shape}`);\n  }\n  if (indices.shape[0] !== segmentIds.shape[0]) {\n    throw new Error(`segmentIds and indices should have same size.`);\n  }\n\n  const $data = backend.data.get(data.dataId).values as TypedArray;\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n  const $segmentIds = backend.data.get(segmentIds.dataId).values as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImpl(\n      $data, data.shape, data.dtype, $indices, $segmentIds);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentSumConfig: KernelConfig = {\n  kernelName: SparseSegmentSum,\n  backendName: 'cpu',\n  kernelFunc: sparseSegmentSum,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Rank, SparseToDense, SparseToDenseAttrs, SparseToDenseInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {scatterImpl} from './Scatter_impl';\n\nexport function sparseToDense(args: {\n  inputs: SparseToDenseInputs,\n  backend: MathBackendCPU,\n  attrs: SparseToDenseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sparseIndices, sparseValues, defaultValue} = inputs;\n  const {outputShape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n  const sumDupeIndices = false;\n\n  const indicesBuf = backend.bufferSync<Rank, 'int32'>(sparseIndices);\n\n  let outBuf;\n  switch (sparseValues.dtype) {\n    case 'bool': {\n      const updatesBuf = backend.bufferSync<Rank, 'bool'>(sparseValues);\n      const $defaultValue =\n          Boolean(backend.data.get(defaultValue.dataId).values[0]);\n      outBuf = scatterImpl(\n          indicesBuf, updatesBuf, outputShape, outputSize, sliceSize,\n          numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n      break;\n    }\n    case 'float32': {\n      const updatesBuf = backend.bufferSync<Rank, 'float32'>(sparseValues);\n      const $defaultValue =\n          backend.data.get(defaultValue.dataId).values[0] as number;\n      outBuf = scatterImpl(\n          indicesBuf, updatesBuf, outputShape, outputSize, sliceSize,\n          numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n      break;\n    }\n    case 'int32': {\n      const updatesBuf = backend.bufferSync<Rank, 'int32'>(sparseValues);\n      const $defaultValue =\n          backend.data.get(defaultValue.dataId).values[0] as number;\n      outBuf = scatterImpl(\n          indicesBuf, updatesBuf, outputShape, outputSize, sliceSize,\n          numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n      break;\n    }\n    case 'string': {\n      const updatesBuf = backend.bufferSync<Rank, 'string'>(sparseValues);\n      const $defaultValue = util.decodeString(\n          backend.data.get(defaultValue.dataId).values[0] as Uint8Array);\n      outBuf = scatterImpl(\n          indicesBuf, updatesBuf, outputShape, outputSize, sliceSize,\n          numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n      break;\n    }\n    default:\n      throw new Error(`Unsupported type ${sparseValues.dtype}`);\n  }\n  return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n}\n\nexport const sparseToDenseConfig: KernelConfig = {\n  kernelName: SparseToDense,\n  backendName: 'cpu',\n  kernelFunc: sparseToDense as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, SplitVAttrs, SplitVInputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig, KernelFunc, SplitV, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {slice} from './Slice';\n\nexport function splitV(\n    args: {inputs: SplitVInputs, backend: MathBackendCPU, attrs: SplitVAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {numOrSizeSplits, axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, x.shape)[0];\n  const splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n\n  const begin = new Array(x.shape.length).fill(0);\n  const size = x.shape.slice();\n  return splitSizes.map(s => {\n    const sliceSize = [...size];\n    sliceSize[$axis] = s;\n    const sliceT =\n        slice({inputs: {x}, backend, attrs: {begin, size: sliceSize}});\n    begin[$axis] += s;\n    return sliceT;\n  });\n}\n\nexport const splitVConfig: KernelConfig = {\n  kernelName: SplitV,\n  backendName: 'cpu',\n  kernelFunc: splitV as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Square, SquareInputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport const squareConfig: KernelConfig = {\n  kernelName: Square,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend}) => {\n    const {x} = inputs as SquareInputs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'square');\n\n    const values = cpuBackend.data.get(x.dataId).values as Float32Array;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      newValues[i] = value * value;\n    }\n    const dataId = cpuBackend.write(newValues, x.shape, x.dtype);\n    return {dataId, shape: x.shape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Step, StepAttrs} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const step = unaryKernelFunc(Step, (xi, attrs) => {\n  const stepAttrs = attrs as {} as StepAttrs;\n  if (isNaN(xi)) {\n    return NaN;\n  } else {\n    return xi > 0 ? 1 : stepAttrs.alpha;\n  }\n});\n\nexport const stepConfig: KernelConfig = {\n  kernelName: Step,\n  backendName: 'cpu',\n  kernelFunc: step,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Rank, slice_util, StridedSlice, StridedSliceAttrs, StridedSliceInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {stridedSliceImpl} from './StridedSlice_impl';\n\nexport function stridedSlice(args: {\n  inputs: StridedSliceInputs,\n  backend: MathBackendCPU,\n  attrs: StridedSliceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  } = attrs;\n\n  assertNotComplex(x, 'stridedSlice');\n\n  const {\n    finalShapeSparse,\n    finalShape,\n    isIdentity,\n    sliceDim0,\n    isSimpleSlice,\n    begin: $begin,\n    end: $end,\n    strides: $strides\n  } =\n      slice_util.sliceInfo(\n          x.shape, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask);\n\n  let result;\n\n  // ref:\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/strided_slice_op.cc\n  if (isIdentity) {\n    // Optimization #1, slice is a no-op plus reshape\n    result = reshape({inputs: {x}, backend, attrs: {shape: finalShape}});\n  } else if (sliceDim0 || isSimpleSlice) {\n    // Optimization #2, slice is memory contiguous (only occurs in dim 0)\n    util.assert(\n        x.shape.length >= 1,\n        () => `Input must have rank at least 1, got: ${x.shape.length}`);\n\n    const size = slice_util.computeOutShape($begin, $end, $strides);\n    // To tolerate begin[0] > end[0] (a 0-output slice), we min(begin, end).\n    const sliced = slice({inputs: {x}, backend, attrs: {begin: $begin, size}});\n    result =\n        reshape({inputs: {x: sliced}, backend, attrs: {shape: finalShape}});\n    backend.disposeIntermediateTensorInfo(sliced);\n  } else {\n    const xBuf = backend.bufferSync<Rank, 'float32'>(x);\n    const outBuf = stridedSliceImpl(finalShapeSparse, xBuf, $strides, $begin);\n\n    result = backend.makeTensorInfo(finalShape, outBuf.dtype, outBuf.values);\n  }\n\n  return result;\n}\n\nexport const stridedSliceConfig: KernelConfig = {\n  kernelName: StridedSlice,\n  backendName: 'cpu',\n  kernelFunc: stridedSlice as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringNGrams, StringNGramsAttrs, StringNGramsInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {stringNGramsImpl} from './StringNGrams_impl';\n\nexport function stringNGrams(args: {\n  inputs: StringNGramsInputs,\n  backend: MathBackendCPU,\n  attrs: StringNGramsAttrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences\n  } = attrs;\n  const {data, dataSplits} = inputs;\n  const $data = backend.data.get(data.dataId).values as Uint8Array[];\n  const $dataSplits = backend.data.get(dataSplits.dataId).values as Int32Array;\n\n  const [nGrams, nGramsSplits] = stringNGramsImpl(\n      $data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth,\n      preserveShortSequences);\n  return [\n    backend.makeTensorInfo([nGrams.length], 'string', nGrams),\n    backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits),\n  ];\n}\n\nexport const stringNGramsConfig: KernelConfig = {\n  kernelName: StringNGrams,\n  backendName: 'cpu',\n  kernelFunc: stringNGrams as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringSplit, StringSplitAttrs, StringSplitInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {stringSplitImpl} from './StringSplit_impl';\n\nexport function stringSplit(args: {\n  inputs: StringSplitInputs,\n  backend: MathBackendCPU,\n  attrs: StringSplitAttrs\n}): [TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {skipEmpty} = attrs;\n  const {input, delimiter} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (input.shape.length !== 1) {\n    throw new Error(`Input must be a vector, got shape: ${input.shape}`);\n  }\n  if (delimiter.shape.length !== 0) {\n    throw new Error(\n        `Delimiter must be a scalar, got shape: ${delimiter.shape}`);\n  }\n\n  const $input = backend.data.get(input.dataId).values as Uint8Array[];\n  const $delimiter = backend.data.get(delimiter.dataId).values[0] as Uint8Array;\n\n  const [indices, values, shape] =\n      stringSplitImpl($input, $delimiter, skipEmpty);\n  const outputSize = values.length;\n  return [\n    backend.makeTensorInfo([outputSize, 2], 'int32', indices),\n    backend.makeTensorInfo([outputSize], 'string', values),\n    backend.makeTensorInfo([2], 'int32', new Int32Array(shape))\n  ];\n}\n\nexport const stringSplitConfig: KernelConfig = {\n  kernelName: StringSplit,\n  backendName: 'cpu',\n  kernelFunc: stringSplit as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringToHashBucketFast, StringToHashBucketFastAttrs, StringToHashBucketFastInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {stringToHashBucketFastImpl} from './StringToHashBucketFast_impl';\n\nexport function stringToHashBucketFast(args: {\n  inputs: StringToHashBucketFastInputs,\n  backend: MathBackendCPU,\n  attrs: StringToHashBucketFastAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {numBuckets} = attrs;\n  const {input} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (numBuckets <= 0) {\n    throw new Error(`Number of buckets must be at least 1`);\n  }\n\n  const $input = backend.data.get(input.dataId).values as Uint8Array[];\n\n  const output = stringToHashBucketFastImpl($input, numBuckets);\n  return backend.makeTensorInfo(input.shape, 'int32', output);\n}\n\nexport const stringToHashBucketFastConfig: KernelConfig = {\n  kernelName: StringToHashBucketFast,\n  backendName: 'cpu',\n  kernelFunc: stringToHashBucketFast as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tan} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const tan = unaryKernelFunc(Tan, (xi) => Math.tan(xi));\n\nexport const tanConfig: KernelConfig = {\n  kernelName: Tan,\n  backendName: 'cpu',\n  kernelFunc: tan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tanh} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const tanh = unaryKernelFunc(Tanh, (xi) => Math.tanh(xi));\n\nexport const tanhConfig: KernelConfig = {\n  kernelName: Tanh,\n  backendName: 'cpu',\n  kernelFunc: tanh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Tile, TileAttrs, TileInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {tileImpl} from './Tile_impl';\n\nexport function tile(\n    args: {inputs: TileInputs, backend: MathBackendCPU, attrs: TileAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reps} = attrs;\n\n  assertNotComplex(x, 'tile');\n  const outBuf = tileImpl(backend.bufferSync(x), reps);\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const tileConfig: KernelConfig = {\n  kernelName: Tile,\n  backendName: 'cpu',\n  kernelFunc: tile as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, TensorInfo, TopK, TopKAttrs, TopKInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {topKImpl} from './TopK_impl';\n\nexport function topK(\n    args: {inputs: TopKInputs, backend: MathBackendCPU, attrs: TopKAttrs}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {k, sorted} = attrs;\n\n  assertNotComplex(x, 'topk');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [allTopKVals, allTopKIndices] =\n      topKImpl(xVals, x.shape, x.dtype as NumericDataType, k, sorted);\n\n  return [\n    backend.makeTensorInfo(\n        allTopKVals.shape, allTopKVals.dtype, allTopKVals.values),\n    backend.makeTensorInfo(\n        allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)\n  ];\n}\n\nexport const topKConfig: KernelConfig = {\n  kernelName: TopK,\n  backendName: 'cpu',\n  kernelFunc: topK as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, TensorInfo, Transform, TransformAttrs, TransformInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function transform(args: {\n  inputs: TransformInputs,\n  attrs: TransformAttrs,\n  backend: MathBackendCPU\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {image, transforms} = inputs;\n  const {interpolation, fillMode, fillValue, outputShape} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const [outHeight, outWidth] =\n      outputShape != null ? outputShape : [imageHeight, imageWidth];\n  const outShape = [batch, outHeight, outWidth, numChannels];\n\n  const strides = util.computeStrides(image.shape);\n  const batchStride = strides[0];\n  const rowStride = strides[1];\n  const colStride = strides[2];\n\n  const outVals = util.getTypedArrayFromDType(\n      image.dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  outVals.fill(fillValue);\n\n  const imageVals = backend.data.get(image.dataId).values as TypedArray;\n  const transformVals =\n      backend.data.get(transforms.dataId).values as TypedArray;\n\n  // Ref TF implementation:\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/image_ops.h\n  for (let b = 0; b < batch; ++b) {\n    const transform = transforms.shape[0] === 1 ?\n        transformVals :\n        transformVals.subarray(b * 8, b * 8 + 8);\n\n    for (let outY = 0; outY < outHeight; ++outY) {\n      for (let outX = 0; outX < outWidth; ++outX) {\n        for (let channel = 0; channel < numChannels; ++channel) {\n          let val;\n\n          const projection = transform[6] * outX + transform[7] * outY + 1;\n\n          if (projection === 0) {\n            // Return the fill value for infinite coordinates,\n            // which are outside the input image\n            continue;\n          }\n\n          const inX =\n              (transform[0] * outX + transform[1] * outY + transform[2]) /\n              projection;\n          const inY =\n              (transform[3] * outX + transform[4] * outY + transform[5]) /\n              projection;\n\n          const x = mapCoord(inX, imageWidth, fillMode);\n          const y = mapCoord(inY, imageHeight, fillMode);\n\n          switch (interpolation) {\n            case 'nearest':\n              val = nearestInterpolation(\n                  imageVals, imageHeight, imageWidth, batchStride, rowStride,\n                  colStride, b, y, x, channel, fillValue);\n              break;\n            case 'bilinear':\n              val = bilinearInterpolation(\n                  imageVals, imageHeight, imageWidth, batchStride, rowStride,\n                  colStride, b, y, x, channel, fillValue);\n              break;\n            default:\n              throw new Error(\n                  `Error in Transform: Expect 'nearest' or ` +\n                  `'bilinear', but got ${interpolation}`);\n          }\n\n          const ind =\n              b * batchStride + outY * rowStride + outX * colStride + channel;\n\n          outVals[ind] = val;\n        }\n      }\n    }\n\n    return backend.makeTensorInfo(outShape, image.dtype, outVals);\n  }\n\n  const dataId = backend.write(outVals, outShape, image.dtype);\n  return {dataId, shape: image.shape, dtype: image.dtype};\n}\n\nexport const transformConfig: KernelConfig = {\n  kernelName: Transform,\n  backendName: 'cpu',\n  kernelFunc: transform as {} as KernelFunc\n};\n\nfunction mapCoord(\n    outCoord: number, len: number,\n    mode: 'constant'|'reflect'|'wrap'|'nearest') {\n  switch (mode) {\n    case 'reflect':\n      return mapCoordReflect(outCoord, len);\n    case 'wrap':\n      return mapCoordWrap(outCoord, len);\n    case 'nearest':\n      return mapCoordNearest(outCoord, len);\n    case 'constant':\n    default:\n      return mapCoordConstant(outCoord, len);\n  }\n}\n\nfunction mapCoordReflect(outCoord: number, len: number): number {\n  // Reflect [abcd] to [dcba|abcd|dcba].\n  let inCoord = outCoord;\n  if (inCoord < 0) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz2 = 2 * len;\n      if (inCoord < sz2) {\n        inCoord = sz2 * Math.trunc(-inCoord / sz2) + inCoord;\n      }\n      inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1;\n    }\n  } else if (inCoord > len - 1) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz2 = 2 * len;\n      inCoord -= sz2 * Math.trunc(inCoord / sz2);\n      if (inCoord >= len) {\n        inCoord = sz2 - inCoord - 1;\n      }\n    }\n  }\n  // clamp is necessary because when outCoord = 3.5 and len = 4,\n  // inCoord = 3.5 and will be rounded to 4 in nearest interpolation.\n  return util.clamp(0, inCoord, len - 1);\n}\n\nfunction mapCoordWrap(outCoord: number, len: number): number {\n  // Wrap [abcd] to [abcd|abcd|abcd].\n  let inCoord = outCoord;\n  if (inCoord < 0) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz = len - 1;\n      inCoord += len * (Math.trunc(-inCoord / sz) + 1);\n    }\n  } else if (inCoord > len - 1) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz = len - 1;\n      inCoord -= len * Math.trunc(inCoord / sz);\n    }\n  }\n  // clamp is necessary because when outCoord = -0.5 and len = 4,\n  // inCoord = 3.5 and will be rounded to 4 in nearest interpolation.\n  return util.clamp(0, inCoord, len - 1);\n}\n\nfunction mapCoordConstant(outCoord: number, len: number): number {\n  return outCoord;\n}\n\nfunction mapCoordNearest(outCoord: number, len: number): number {\n  return util.clamp(0, outCoord, len - 1);\n}\n\nfunction readWithFillValue(\n    imageVals: TypedArray, imageHeight: number, imageWidth: number,\n    batchStride: number, rowStride: number, colStride: number, batch: number,\n    y: number, x: number, channel: number, fillValue: number): number {\n  const ind = batch * batchStride + y * rowStride + x * colStride + channel;\n  if (0 <= y && y < imageHeight && 0 <= x && x < imageWidth) {\n    return imageVals[ind];\n  } else {\n    return fillValue;\n  }\n}\n\nfunction nearestInterpolation(\n    imageVals: TypedArray, imageHeight: number, imageWidth: number,\n    batchStride: number, rowStride: number, colStride: number, batch: number,\n    y: number, x: number, channel: number, fillValue: number): number {\n  const $y = Math.round(y);\n  const $x = Math.round(x);\n\n  return readWithFillValue(\n      imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride,\n      batch, $y, $x, channel, fillValue);\n}\n\nfunction bilinearInterpolation(\n    imageVals: TypedArray, imageHeight: number, imageWidth: number,\n    batchStride: number, rowStride: number, colStride: number, batch: number,\n    y: number, x: number, channel: number, fillValue: number) {\n  const yFloor = Math.floor(y);\n  const xFloor = Math.floor(x);\n  const yCeil = yFloor + 1;\n  const xCeil = xFloor + 1;\n  // f(x, yFloor) = (xCeil - x) / (xCeil - xFloor) * f(xFloor, yFloor)\n  //               + (x - xFloor) / (xCeil - xFloor) * f(xCeil, yFloor)\n  const valueYFloor =\n      (xCeil - x) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yFloor, xFloor, channel, fillValue) +\n      (x - xFloor) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yFloor, xCeil, channel, fillValue);\n  // f(x, yCeil) = (xCeil - x) / (xCeil - xFloor) * f(xFloor, yCeil)\n  //             + (x - xFloor) / (xCeil - xFloor) * f(xCeil, yCeil)\n  const valueYCeil =\n      (xCeil - x) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yCeil, xFloor, channel, fillValue) +\n      (x - xFloor) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yCeil, xCeil, channel, fillValue);\n  // f(x, y) = (yCeil - y) / (yCeil - yFloor) * f(x, yFloor)\n  //         + (y - yFloor) / (yCeil - yFloor) * f(x, yCeil)\n  return (yCeil - y) * valueYFloor + (y - yFloor) * valueYCeil;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unique, UniqueAttrs, UniqueInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {uniqueImpl} from './Unique_impl';\n\nexport function unique(\n    args: {inputs: UniqueInputs, attrs: UniqueAttrs, backend: MathBackendCPU}):\n    TensorInfo[] {\n  const {inputs, attrs, backend} = args;\n  const {axis} = attrs;\n  const {x} = inputs;\n  assertNotComplex(x, 'unique');\n\n  const values = backend.data.get(x.dataId).values;\n  const {outputValues, outputShape, indices} =\n      uniqueImpl(values, axis, x.shape, x.dtype);\n  return [\n    backend.makeTensorInfo(outputShape, x.dtype, outputValues),\n    backend.makeTensorInfo([indices.length], 'int32', indices),\n  ];\n}\n\nexport const uniqueConfig: KernelConfig = {\n  kernelName: Unique,\n  backendName: 'cpu',\n  kernelFunc: unique as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unpack, UnpackAttrs, UnpackInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function unpack(\n    args: {inputs: UnpackInputs, backend: MathBackendCPU, attrs: UnpackAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {value} = inputs;\n  let {axis} = attrs;\n\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n\n  const valueRank = value.shape.length;\n\n  const num = value.shape[axis];\n  const outShape: number[] = new Array(valueRank - 1);\n  let outIndex = 0;\n  for (let i = 0; i < valueRank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = value.shape[i];\n    }\n  }\n\n  const begin = new Array(valueRank).fill(0);\n  const size = value.shape.slice();\n  size[axis] = 1;\n  const res = new Array(num);\n  for (let i = 0; i < res.length; i++) {\n    begin[axis] = i;\n    const tempRes = slice({inputs: {x: value}, backend, attrs: {begin, size}});\n    res[i] = reshape({inputs: {x: tempRes}, backend, attrs: {shape: outShape}});\n    backend.disposeIntermediateTensorInfo(tempRes);\n  }\n\n  return res;\n}\n\nexport const unpackConfig: KernelConfig = {\n  kernelName: Unpack,\n  backendName: 'cpu',\n  kernelFunc: unpack as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, UnsortedSegmentSum, UnsortedSegmentSumAttrs, UnsortedSegmentSumInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {cast} from './Cast';\nimport {equal} from './Equal';\nimport {expandDims} from './ExpandDims';\nimport {multiply} from './Multiply';\nimport {pack} from './Pack';\nimport {sum} from './Sum';\n\nexport function unsortedSegmentSum(args: {\n  inputs: UnsortedSegmentSumInputs,\n  backend: MathBackendCPU,\n  attrs: UnsortedSegmentSumAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, segmentIds} = inputs;\n  const {numSegments} = attrs;\n\n  assertNotComplex(x, 'unsortedSegmentSum');\n\n  const xRank = x.shape.length;\n  const segmentIdsRank = segmentIds.shape.length;\n  const res = [];\n  const intermediates: TensorInfo[] = [];\n\n  // Reshape the segment id's so that they can be broadcast with\n  // x. The new shape should be [segmentIds.shape, 1, ..., 1]\n  const numIters = xRank - segmentIdsRank;\n  let $segmentIds = segmentIds;\n\n  for (let i = 0; i < numIters; ++i) {\n    const expanded = expandDims(\n        {inputs: {input: $segmentIds}, backend, attrs: {dim: i + 1}});\n    $segmentIds = expanded;\n    intermediates.push(expanded);\n  }\n\n  for (let i = 0; i < numSegments; ++i) {\n    const scalarValue = util.createScalarValue(i as {} as 'int32', 'int32');\n    const segmentId = backend.makeTensorInfo([], 'int32', scalarValue);\n    const mask =\n        equal({inputs: {a: segmentId, b: $segmentIds}, backend}) as TensorInfo;\n    const maskCasted =\n        cast({inputs: {x: mask}, backend, attrs: {dtype: 'float32'}});\n    const mul =\n        multiply({inputs: {a: maskCasted, b: x}, backend}) as TensorInfo;\n    const sumTensorInfo =\n        sum({inputs: {x: mul}, backend, attrs: {axis: 0, keepDims: false}});\n    res.push(sumTensorInfo);\n    intermediates.push(segmentId);\n    intermediates.push(mask);\n    intermediates.push(maskCasted);\n    intermediates.push(mul);\n    intermediates.push(sumTensorInfo);\n  }\n\n  const result = pack({inputs: res, backend, attrs: {axis: 0}});\n\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const unsortedSegmentSumConfig: KernelConfig = {\n  kernelName: UnsortedSegmentSum,\n  backendName: 'cpu',\n  kernelFunc: unsortedSegmentSum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// We explicitly import the modular kernels so they get registered in the\n// global registry when we compile the library. A modular build would replace\n// the contents of this file and import only the kernels that are needed.\nimport {KernelConfig, registerKernel} from '@tensorflow/tfjs-core';\n\nimport {_fusedMatMulConfig} from './kernels/_FusedMatMul';\nimport {absConfig} from './kernels/Abs';\nimport {acosConfig} from './kernels/Acos';\nimport {acoshConfig} from './kernels/Acosh';\nimport {addConfig} from './kernels/Add';\nimport {addNConfig} from './kernels/AddN';\nimport {allConfig} from './kernels/All';\nimport {anyConfig} from './kernels/Any';\nimport {argMaxConfig} from './kernels/ArgMax';\nimport {argMinConfig} from './kernels/ArgMin';\nimport {asinConfig} from './kernels/Asin';\nimport {asinhConfig} from './kernels/Asinh';\nimport {atanConfig} from './kernels/Atan';\nimport {atan2Config} from './kernels/Atan2';\nimport {atanhConfig} from './kernels/Atanh';\nimport {avgPoolConfig} from './kernels/AvgPool';\nimport {avgPool3DConfig} from './kernels/AvgPool3D';\nimport {avgPool3DGradConfig} from './kernels/AvgPool3DGrad';\nimport {avgPoolGradConfig} from './kernels/AvgPoolGrad';\nimport {batchMatMulConfig} from './kernels/BatchMatMul';\nimport {batchNormConfig} from './kernels/BatchNorm';\nimport {batchToSpaceNDConfig} from './kernels/BatchToSpaceND';\nimport {bincountConfig} from './kernels/Bincount';\nimport {broadcastArgsConfig} from './kernels/BroadcastArgs';\nimport {castConfig} from './kernels/Cast';\nimport {ceilConfig} from './kernels/Ceil';\nimport {clipByValueConfig} from './kernels/ClipByValue';\nimport {complexConfig} from './kernels/Complex';\nimport {complexAbsConfig} from './kernels/ComplexAbs';\nimport {concatConfig} from './kernels/Concat';\nimport {conv2DConfig} from './kernels/Conv2D';\nimport {conv2DBackpropFilterConfig} from './kernels/Conv2DBackpropFilter';\nimport {conv2DBackpropInputConfig} from './kernels/Conv2DBackpropInput';\nimport {conv3DConfig} from './kernels/Conv3D';\nimport {conv3DBackpropFilterV2Config} from './kernels/Conv3DBackpropFilterV2';\nimport {conv3DBackpropInputV2Config} from './kernels/Conv3DBackpropInputV2';\nimport {cosConfig} from './kernels/Cos';\nimport {coshConfig} from './kernels/Cosh';\nimport {cropAndResizeConfig} from './kernels/CropAndResize';\nimport {cumprodConfig} from './kernels/Cumprod';\nimport {cumsumConfig} from './kernels/Cumsum';\nimport {denseBincountConfig} from './kernels/DenseBincount';\nimport {depthToSpaceConfig} from './kernels/DepthToSpace';\nimport {depthwiseConv2dNativeConfig} from './kernels/DepthwiseConv2dNative';\nimport {depthwiseConv2dNativeBackpropFilterConfig} from './kernels/DepthwiseConv2dNativeBackpropFilter';\nimport {depthwiseConv2dNativeBackpropInputConfig} from './kernels/DepthwiseConv2dNativeBackpropInput';\nimport {diagConfig} from './kernels/Diag';\nimport {dilation2DConfig} from './kernels/Dilation2D';\nimport {dilation2DBackpropFilterConfig} from './kernels/Dilation2DBackpropFilter';\nimport {dilation2DBackpropInputConfig} from './kernels/Dilation2DBackpropInput';\nimport {einsumConfig} from './kernels/Einsum';\nimport {eluConfig} from './kernels/Elu';\nimport {eluGradConfig} from './kernels/EluGrad';\nimport {equalConfig} from './kernels/Equal';\nimport {erfConfig} from './kernels/Erf';\nimport {expConfig} from './kernels/Exp';\nimport {expandDimsConfig} from './kernels/ExpandDims';\nimport {expm1Config} from './kernels/Expm1';\nimport {fftConfig} from './kernels/FFT';\nimport {fillConfig} from './kernels/Fill';\nimport {flipLeftRightConfig} from './kernels/FlipLeftRight';\nimport {floorConfig} from './kernels/Floor';\nimport {floorDivConfig} from './kernels/FloorDiv';\nimport {fusedConv2DConfig} from './kernels/FusedConv2D';\nimport {fusedDepthwiseConv2DConfig} from './kernels/FusedDepthwiseConv2D';\nimport {gatherNdConfig} from './kernels/GatherNd';\nimport {gatherV2Config} from './kernels/GatherV2';\nimport {greaterConfig} from './kernels/Greater';\nimport {greaterEqualConfig} from './kernels/GreaterEqual';\nimport {identityConfig} from './kernels/Identity';\nimport {ifftConfig} from './kernels/IFFT';\nimport {imagConfig} from './kernels/Imag';\nimport {isFiniteConfig} from './kernels/IsFinite';\nimport {isInfConfig} from './kernels/IsInf';\nimport {isNaNConfig} from './kernels/IsNaN';\nimport {leakyReluConfig} from './kernels/LeakyRelu';\nimport {lessConfig} from './kernels/Less';\nimport {lessEqualConfig} from './kernels/LessEqual';\nimport {linSpaceConfig} from './kernels/LinSpace';\nimport {logConfig} from './kernels/Log';\nimport {log1pConfig} from './kernels/Log1p';\nimport {logicalAndConfig} from './kernels/LogicalAnd';\nimport {logicalNotConfig} from './kernels/LogicalNot';\nimport {logicalOrConfig} from './kernels/LogicalOr';\nimport {LRNConfig} from './kernels/LRN';\nimport {LRNGradConfig} from './kernels/LRNGrad';\nimport {maxConfig} from './kernels/Max';\nimport {maximumConfig} from './kernels/Maximum';\nimport {maxPoolConfig} from './kernels/MaxPool';\nimport {maxPool3DConfig} from './kernels/MaxPool3D';\nimport {maxPool3DGradConfig} from './kernels/MaxPool3DGrad';\nimport {maxPoolGradConfig} from './kernels/MaxPoolGrad';\nimport {maxPoolWithArgmaxConfig} from './kernels/MaxPoolWithArgmax';\nimport {meanConfig} from './kernels/Mean';\nimport {minConfig} from './kernels/Min';\nimport {minimumConfig} from './kernels/Minimum';\nimport {mirrorPadConfig} from './kernels/MirrorPad';\nimport {modConfig} from './kernels/Mod';\nimport {multinomialConfig} from './kernels/Multinomial';\nimport {multiplyConfig} from './kernels/Multiply';\nimport {negConfig} from './kernels/Neg';\nimport {nonMaxSuppressionV3Config} from './kernels/NonMaxSuppressionV3';\nimport {nonMaxSuppressionV4Config} from './kernels/NonMaxSuppressionV4';\nimport {nonMaxSuppressionV5Config} from './kernels/NonMaxSuppressionV5';\nimport {notEqualConfig} from './kernels/NotEqual';\nimport {oneHotConfig} from './kernels/OneHot';\nimport {onesLikeConfig} from './kernels/OnesLike';\nimport {packConfig} from './kernels/Pack';\nimport {padV2Config} from './kernels/PadV2';\nimport {powConfig} from './kernels/Pow';\nimport {preluConfig} from './kernels/Prelu';\nimport {prodConfig} from './kernels/Prod';\nimport {rangeConfig} from './kernels/Range';\nimport {realConfig} from './kernels/Real';\nimport {realDivConfig} from './kernels/RealDiv';\nimport {reciprocalConfig} from './kernels/Reciprocal';\nimport {reluConfig} from './kernels/Relu';\nimport {relu6Config} from './kernels/Relu6';\nimport {reshapeConfig} from './kernels/Reshape';\nimport {resizeBilinearConfig} from './kernels/ResizeBilinear';\nimport {resizeBilinearGradConfig} from './kernels/ResizeBilinearGrad';\nimport {resizeNearestNeighborConfig} from './kernels/ResizeNearestNeighbor';\nimport {resizeNearestNeighborGradConfig} from './kernels/ResizeNearestNeighborGrad';\nimport {reverseConfig} from './kernels/Reverse';\nimport {rotateWithOffsetConfig} from './kernels/RotateWithOffset';\nimport {roundConfig} from './kernels/Round';\nimport {rsqrtConfig} from './kernels/Rsqrt';\nimport {scatterNdConfig} from './kernels/ScatterNd';\nimport {searchSortedConfig} from './kernels/SearchSorted';\nimport {selectConfig} from './kernels/Select';\nimport {seluConfig} from './kernels/Selu';\nimport {sigmoidConfig} from './kernels/Sigmoid';\nimport {signConfig} from './kernels/Sign';\nimport {sinConfig} from './kernels/Sin';\nimport {sinhConfig} from './kernels/Sinh';\nimport {sliceConfig} from './kernels/Slice';\nimport {softmaxConfig} from './kernels/Softmax';\nimport {softplusConfig} from './kernels/Softplus';\nimport {spaceToBatchNDConfig} from './kernels/SpaceToBatchND';\nimport {sparseFillEmptyRowsConfig} from './kernels/SparseFillEmptyRows';\nimport {sparseReshapeConfig} from './kernels/SparseReshape';\nimport {sparseSegmentMeanConfig} from './kernels/SparseSegmentMean';\nimport {sparseSegmentSumConfig} from './kernels/SparseSegmentSum';\nimport {sparseToDenseConfig} from './kernels/SparseToDense';\nimport {splitVConfig} from './kernels/SplitV';\nimport {sqrtConfig} from './kernels/Sqrt';\nimport {squareConfig} from './kernels/Square';\nimport {squaredDifferenceConfig} from './kernels/SquaredDifference';\nimport {stepConfig} from './kernels/Step';\nimport {stridedSliceConfig} from './kernels/StridedSlice';\nimport {stringNGramsConfig} from './kernels/StringNGrams';\nimport {stringSplitConfig} from './kernels/StringSplit';\nimport {stringToHashBucketFastConfig} from './kernels/StringToHashBucketFast';\nimport {subConfig} from './kernels/Sub';\nimport {sumConfig} from './kernels/Sum';\nimport {tanConfig} from './kernels/Tan';\nimport {tanhConfig} from './kernels/Tanh';\nimport {tileConfig} from './kernels/Tile';\nimport {topKConfig} from './kernels/TopK';\nimport {transformConfig} from './kernels/Transform';\nimport {transposeConfig} from './kernels/Transpose';\nimport {uniqueConfig} from './kernels/Unique';\nimport {unpackConfig} from './kernels/Unpack';\nimport {unsortedSegmentSumConfig} from './kernels/UnsortedSegmentSum';\nimport {zerosLikeConfig} from './kernels/ZerosLike';\n\n// List all kernel configs here\nconst kernelConfigs: KernelConfig[] = [\n  _fusedMatMulConfig,\n  absConfig,\n  acosConfig,\n  acoshConfig,\n  addConfig,\n  addNConfig,\n  allConfig,\n  anyConfig,\n  argMaxConfig,\n  argMinConfig,\n  asinConfig,\n  asinhConfig,\n  atanConfig,\n  atan2Config,\n  atanhConfig,\n  avgPoolConfig,\n  avgPool3DConfig,\n  avgPool3DGradConfig,\n  avgPoolGradConfig,\n  batchMatMulConfig,\n  batchNormConfig,\n  batchToSpaceNDConfig,\n  bincountConfig,\n  broadcastArgsConfig,\n  castConfig,\n  ceilConfig,\n  clipByValueConfig,\n  complexConfig,\n  complexAbsConfig,\n  concatConfig,\n  conv2DConfig,\n  conv2DBackpropFilterConfig,\n  conv2DBackpropInputConfig,\n  conv3DConfig,\n  conv3DBackpropFilterV2Config,\n  conv3DBackpropInputV2Config,\n  cosConfig,\n  coshConfig,\n  cropAndResizeConfig,\n  cumprodConfig,\n  cumsumConfig,\n  denseBincountConfig,\n  depthToSpaceConfig,\n  depthwiseConv2dNativeConfig,\n  depthwiseConv2dNativeBackpropFilterConfig,\n  depthwiseConv2dNativeBackpropInputConfig,\n  diagConfig,\n  dilation2DConfig,\n  dilation2DBackpropFilterConfig,\n  dilation2DBackpropInputConfig,\n  einsumConfig,\n  eluConfig,\n  eluGradConfig,\n  equalConfig,\n  erfConfig,\n  expConfig,\n  expandDimsConfig,\n  expm1Config,\n  fftConfig,\n  fillConfig,\n  flipLeftRightConfig,\n  floorConfig,\n  floorDivConfig,\n  fusedConv2DConfig,\n  fusedDepthwiseConv2DConfig,\n  gatherNdConfig,\n  gatherV2Config,\n  greaterConfig,\n  greaterEqualConfig,\n  identityConfig,\n  ifftConfig,\n  imagConfig,\n  isFiniteConfig,\n  isInfConfig,\n  isNaNConfig,\n  leakyReluConfig,\n  lessConfig,\n  lessEqualConfig,\n  linSpaceConfig,\n  logConfig,\n  log1pConfig,\n  logicalAndConfig,\n  logicalNotConfig,\n  logicalOrConfig,\n  LRNConfig,\n  LRNGradConfig,\n  maxConfig,\n  maximumConfig,\n  maxPoolConfig,\n  maxPool3DConfig,\n  maxPool3DGradConfig,\n  maxPoolGradConfig,\n  maxPoolWithArgmaxConfig,\n  meanConfig,\n  minConfig,\n  minimumConfig,\n  mirrorPadConfig,\n  modConfig,\n  multinomialConfig,\n  multiplyConfig,\n  negConfig,\n  nonMaxSuppressionV3Config,\n  nonMaxSuppressionV4Config,\n  nonMaxSuppressionV5Config,\n  notEqualConfig,\n  oneHotConfig,\n  onesLikeConfig,\n  packConfig,\n  padV2Config,\n  powConfig,\n  preluConfig,\n  prodConfig,\n  rangeConfig,\n  realConfig,\n  realDivConfig,\n  reciprocalConfig,\n  reluConfig,\n  relu6Config,\n  reshapeConfig,\n  resizeBilinearConfig,\n  resizeBilinearGradConfig,\n  resizeNearestNeighborConfig,\n  resizeNearestNeighborGradConfig,\n  reverseConfig,\n  rotateWithOffsetConfig,\n  roundConfig,\n  rsqrtConfig,\n  scatterNdConfig,\n  searchSortedConfig,\n  selectConfig,\n  seluConfig,\n  sigmoidConfig,\n  signConfig,\n  sinConfig,\n  sinhConfig,\n  sliceConfig,\n  softmaxConfig,\n  softplusConfig,\n  spaceToBatchNDConfig,\n  sparseFillEmptyRowsConfig,\n  sparseReshapeConfig,\n  sparseSegmentMeanConfig,\n  sparseSegmentSumConfig,\n  sparseToDenseConfig,\n  splitVConfig,\n  sqrtConfig,\n  squareConfig,\n  squaredDifferenceConfig,\n  stepConfig,\n  stridedSliceConfig,\n  stringNGramsConfig,\n  stringSplitConfig,\n  stringToHashBucketFastConfig,\n  subConfig,\n  sumConfig,\n  tanConfig,\n  tanhConfig,\n  tileConfig,\n  topKConfig,\n  transformConfig,\n  transposeConfig,\n  uniqueConfig,\n  unpackConfig,\n  unsortedSegmentSumConfig,\n  zerosLikeConfig\n];\n\nfor (const kernelConfig of kernelConfigs) {\n  registerKernel(kernelConfig);\n}\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '3.18.0';\nexport {version};\n"],"names":["assertNotComplex","tensor","opName","Array","isArray","forEach","t","util","assert","dtype","whereImpl","kernel_impls","MathBackendCPU","KernelBackend","constructor","super","this","data","DataStorage","engine","nextDataId","write","values","shape","firstUse","env","get","backend_util","warn","dataId","id","set","refCount","makeTensorInfo","outId","length","isString","encodedValues","map","d","encodeString","has","incRef","decRef","move","numDataIds","read","readSync","complexTensorInfos","realValues","real","imagValues","imag","mergeRealAndImagArrays","bufferSync","strings","decodeString","buffer","Error","makeOutput","makeTensorFromTensorInfo","disposeData","force","delete","disposeIntermediateTensorInfo","tensorInfo","time","f","start","now","kernelMs","memory","unreliable","reasons","where","condition","condVals","dispose","floatPrecision","epsilon","simpleAbsImpl","vals","resultValues","Float32Array","i","Math","abs","absConfig","kernelName","Abs","backendName","kernelFunc","args","x","inputs","cpuBackend","backend","sizeFromShape","createSimpleBinaryKernelImpl","op","aShape","bShape","aVals","bVals","newShape","assertAndGetBroadcastShape","resultRank","resultStrides","computeStrides","resultSize","result","getTypedArrayFromDType","aRank","bRank","aStrides","bStrides","aBroadcastDims","getBroadcastDims","bBroadcastDims","loc","indexToLoc","aLoc","slice","aIndex","locToIndex","bLoc","bIndex","complex","realVals","imagVals","complexInfo","complexConfig","Complex","zeros","makeZerosTypedArray","identity","identityConfig","Identity","input","realVal","realConfig","Real","cast","attrs","zerosTensorInfo","floatX","realPart","hasEncodingLoss","Int32Array","from","xVals","zero","toTypedArray","resultData","resultShape","a","b","castConfig","Cast","binaryKernelFunc","name","simpleImpl","complexImpl","decodedAVals","fromUint8ToStringArray","decodedBVals","$dtype","$aComplex","$aComplexVals","aReal","aImag","aRealVals","aImagVals","$bComplex","$bComplexVals","bReal","bImag","bRealVals","bImagVals","resultRealData","resultImagData","resultReal","resultImag","createComplexBinaryKernelImpl","resultRealVals","resultImagVals","aIdx","bIdx","opResult","addImpl","addComplexImpl","add","Add","addConfig","bincountImpl","weightsVals","weightsDtype","weightsShape","size","weightsSize","outVals","value","bincountReduceImpl","xBuf","weightsBuf","binaryOutput","numRows","numCols","outBuf","j","createSimpleUnaryImpl","newValues","unaryKernelFunc","xSize","getArrayFromDType","unaryKernelFuncFromImpl","unaryImpl","ceilImpl","xi","ceil","Ceil","ceilConfig","concatImpl","outShape","simplyConcat","offset","colOffset","decodedData","tIdx","row","resIdx","col","equalImpl","equal","Equal","equalConfig","expImpl","exp","Exp","expConfig","expm1Impl","expm1","Expm1","expm1Config","floorImpl","floor","Floor","floorConfig","gatherNdImpl","indicesData","paramsBuf","numSlices","sliceRank","sliceSize","strides","paramsShape","paramsSize","index","flattenIndex","dim","push","k","gatherV2Impl","indicesBuf","flattenOutputShape","originalLoc","batchIdx","indicesIdx","indicesIndex","originalIndex","greaterImpl","greater","Greater","greaterConfig","greaterEqualImpl","greaterEqual","GreaterEqual","greaterEqualConfig","lessImpl","less","Less","lessConfig","lessEqualImpl","lessEqual","LessEqual","lessEqualConfig","linSpaceImpl","stop","num","step","logImpl","log","Log","logConfig","maxImpl","reduceSize","max","Number","isNaN","maximumImpl","aValue","bValue","maximum","Maximum","maximumConfig","minimumImpl","min","minimum","Minimum","minimumConfig","multiplyImpl","multiplyComplexImpl","multiply","Multiply","multiplyConfig","negImpl","xShape","xDtype","minusOne","createScalarValue","negConfig","Neg","res","notEqualImpl","notEqual","NotEqual","notEqualConfig","transposeImpl","perm","xRank","xStrides","newStrides","newLoc","transpose","transposeConfig","Transpose","prodImpl","reductionAxes","reduceShape","computeOutAndReduceShapes","outDtype","upcastType","prod","prodConfig","Prod","axis","keepDims","axes","parseAxisParam","permutation","getAxesPermutation","permutedX","intermediateTensorInfos","getInnerMostAxes","expandShapeToKeepDim","rangeImpl","numElements","rsqrtImpl","sqrt","rsqrt","Rsqrt","rsqrtConfig","scatterImpl","indices","updates","outputSize","numUpdates","defaultValue","sumDupeIndices","flattenShape","updatesData","fill","rank","sigmoidImpl","sigmoid","Sigmoid","sigmoidConfig","sliceImpl","begin","isContinous","slice_util","isSliceContinous","flatOffset","computeFlatOffset","subarray","inBuf","outLoc","inLoc","idx","fromStringArrayToUint8","$begin","$size","parseSliceParams","assertParamsValid","sliceConfig","Slice","sparseFillEmptyRowsImpl","indicesShape","indicesDType","valuesDType","denseShape","indicesCount","denseRows","emptyRowIndicator","reverseIndexMap","getSparseFillEmptyRowsIndicesDenseShapeMismatch","rowsAreOrdered","lastIndicesRow","csrOffset","getSparseFillEmptyRowsNegativeIndexErrorMessage","getSparseFillEmptyRowsOutOfRangeIndexErrorMessage","allRowsFull","rowEmpty","outputIndices","outputValues","fullIndicesCount","filledCount","outputI","startingIndex","sparseReshapeImpl","inputIndices","inputIndicesShape","inputDType","inputShape","targetShape","denseSize","nnz","outputRank","outputShape","product","unknownIndex","getSparseReshapeMultipleNegativeOneOutputDimErrorMessage","getSparseReshapeNegativeOutputDimErrorMessage","getSparseReshapeEmptyTensorZeroOutputDimErrorMessage","missing","trunc","getSparseReshapeInputOutputMultipleErrorMessage","getSparseReshapeInputOutputMismatchErrorMessage","inputRank","inputStrides","outputStrides","newIndices","sparseSegmentReductionImpl","segmentIds","isMean","numIndices","inputFlat","numCol","outputRows","getSparseSegmentReductionNegativeSegmentIdsErrorMessage","outputLength","reduce","output","end","uninitializedIndex","outIndex","nextIndex","getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage","getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage","getSparseSegmentReductionIndicesOutOfRangeErrorMessage","sqrtImpl","Sqrt","sqrtConfig","squaredDifferenceImpl","diff","squaredDifference","SquaredDifference","squaredDifferenceConfig","stridedSliceImpl","StringNGramsOp","separator","nGramWidths","leftPad","rightPad","padWidth","preserveShortSequences","preserveShort","getPadWidth","nGramWidth","getNumNGrams","createNGrams","splitIndex","outputStartIndex","numNGrams","nGramIndex","leftPadding","rightPadding","numTokens","dataStartIndex","nGramSize","n","Uint8Array","nGram","nextNGramIndex","appendToNGram","str","compute","splits","inputDataSize","splitsSize","prevSplit","validSplits","numBatchItems","nGramsSplits","empty","nGrams","outputStartIdx","dataLength","stringNGramsImpl","dataSplits","split","delimiters","skipEmpty","delimiter","indexOf","token","tokenStart","stringSplitImpl","batchSize","tokens","maxNumEntries","prevTokensLength","nEntries","c","stringToHashBucketFastImpl","numBuckets","fingerPrint64","modulo","getLowBitsUnsigned","subImpl","subComplexImpl","sub","Sub","subConfig","tileImpl","reps","comparePair","valueDiff","select","array","left","right","z","s","sd","sign","swap","topKImpl","sorted","lastDim","batch","allTopKVals","allTopKIndices","valAndInd","sort","outOffset","topKVals","topKIndices","uniqueImpl","$axis","uniqueElements","inputBuffer","TensorBuffer","uniqueIndices","is1DTensor","element","toString","axisValues","m","join","undefined","uniqueIndex","Object","keys","outputTmpShape","outputBuffer","uniqueElementIndex","elu","Elu","eluConfig","leakyRelu","alpha","leakyReluConfig","LeakyRelu","preluImpl","xValue","prelu","preluConfig","Prelu","relu","Relu","reluConfig","relu6","Relu6","relu6Config","applyActivation","activation","preluActivationWeights","leakyreluAlpha","reshape","$shape","inferFromImplicitShape","$xSize","xData","reshapeConfig","Reshape","batchMatMul","transposeA","transposeB","innerShapeA","innerShapeB","outerShapeA","outerShapeB","outerDimsA","outerDimsB","batchDimA","batchDimB","broadcast_util","concat","b3dShape","a3d","b3d","sharedDim","leftDim","rightDim","batchDim","a3dValues","b3dValues","a3dStrides","b3dStrides","aBatch","aOuterStep","aInnerStep","bInnerStep","bOuterStep","bBatch","resVals","blockSize","bi","i0","j0","k0","iBlock","jBlock","kBlock","sum","batchOffsetA","batchOffsetB","batchMatMulConfig","BatchMatMul","_fusedMatMulConfig","_FusedMatMul","bias","current","addRes","activationRes","intermediates","acos","Acos","acosConfig","acosh","Acosh","acoshConfig","addNConfig","AddN","tensors","currVals","allConfig","All","origAxes","permutedAxes","$x","assertAxesAreInnerMostDims","all","reshapedResult","anyConfig","Any","anyVal","argMaxConfig","ArgMax","outSize","maxIndex","argMinConfig","ArgMin","minIndex","asin","Asin","asinConfig","asinh","Asinh","asinhConfig","atan","Atan","atanConfig","atan2Impl","atan2","Atan2","atan2Config","atanh","Atanh","atanhConfig","pool","xValues","convInfo","poolType","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","padTop","padInfo","top","padLeft","initialValue","NEGATIVE_INFINITY","POSITIVE_INFINITY","outputVals","outputBatchStrides","outputRowStrides","outputColStrides","outputBatchOffset","inputBatchOffset","inChannels","yR","outHeight","xRCorner","xRMin","xRMax","inHeight","outputRowOffset","yC","outWidth","xCCorner","xCMin","xCMax","inWidth","minMaxValue","avgValue","count","xR","xROffset","xC","pixel","maxPoolPositions","flattenPositions","includeBatchInIndex","maxPositions","maxValue","maxPosition","wR","wC","pool3d","strideDepth","dilationDepth","effectiveFilterDepth","padFront","front","outputDepthStrides","channel","yDepth","outDepth","xDepthCorner","xDepthMin","xDepthMax","inDepth","outputDepthOffset","yRow","xRowCorner","xRowMin","xRowMax","yCol","xColCorner","xColMin","xColMax","outputColOffset","xDepth","xDepthOffset","xRow","xRowOffset","xCol","avgPoolConfig","AvgPool","filterSize","pad","dimRoundingMode","eitherStridesOrDilationsAreOne","computePool2DInfo","filterWidth","filterHeight","arraysEqual","inShape","avgPool3DConfig","AvgPool3D","dataFormat","computePool3DInfo","avgPool3DGradConfig","AvgPool3DGrad","dy","filterDepth","dx","avgMultiplier","dyBuf","dxDepth","dxRow","dxCol","dyDepthCorner","dyRowCorner","dyColCorner","dotProd","wDepth","dyDepth","wRow","dyRow","wCol","dyCol","avgPoolGradConfig","AvgPoolGrad","dyData","dxR","dxC","dyRCorner","dyCCorner","dyR","dyC","batchNormConfig","FusedBatchNorm","scale","mean","variance","varianceEpsilon","mVals","varVals","sVals","offVals","offValsLength","sValsLength","varValsLength","mValsLength","offi","mi","si","vi","batchToSpaceNDConfig","BatchToSpaceND","blockShape","crops","reshaped","getReshaped","permuted","getPermuted","reshapedPermuted","getReshapedPermuted","sliceBeginCoords","getSliceBeginCoords","getSliceSize","xReshaped","xTransposed","xTransposedReshaped","bincountConfig","Bincount","weights","broadcastArgsConfig","BroadcastArgs","s0","s1","s0Vals","s1Vals","broadcastShape","clipByValue","ClipByValue","clipAttrs","clipValueMax","clipValueMin","clipByValueConfig","complexAbsConfig","ComplexAbs","complexVals","hypot","imagVal","imagConfig","Imag","computeOutShape","$inputs","filter","shapes","assertParamsConsistent","reals","imags","realConcated","imagConcated","r","inputs2D","innerSize","inputsValShapes","finalOutShape","outInfo","concatConfig","Concat","conv2D","dilations","$dataFormat","convertConv2DDataFormat","computeConv2DInfo","isChannelsLast","y","filterStrides","xBatchStride","xRowStride","xColStride","xChannelStride","yBatchStride","yRowStride","yColStride","yChannelStride","wVals","yVals","xOffset1","yOffset1","yOffset2","wOffset1","xOffset2","yOffset3","xOffset3","wOffset3","d1","xVal","d2","outChannels","conv2DConfig","Conv2D","conv2DBackpropFilterConfig","Conv2DBackpropFilter","filterShape","dW","topPad","dyVals","yRMin","yRMax","yCMin","yCMax","conv2DBackpropInputConfig","Conv2DBackpropInput","dyStrides","dxValues","dyValues","fltValues","fltS0","fltS1","fltS2","dyOffset","fltOffset","conv3DConfig","Conv3D","computeConv3DInfo","yF","xFCorner","wF","xF","wOffset2","yOffset4","xOffset4","wOffset4","conv3DBackpropFilterV2Config","Conv3DBackpropFilterV2","dw","dwValues","dwS0","dwS1","dwS2","dwS3","dyS0","dyS1","dyS2","dyS3","xS0","xS1","xS2","xS3","frontPad","yFMin","yFMax","conv3DBackpropInputV2Config","Conv3DBackpropInputV2","dxS0","dxS1","dxS2","dxS3","fltS3","xFMin","cos","Cos","cosConfig","cosh","Cosh","coshConfig","cropAndResizeConfig","CropAndResize","image","boxes","boxInd","cropSize","method","extrapolationValue","imageHeight","imageWidth","numChannels","numBoxes","cropHeight","cropWidth","boxVals","boxIndVals","imageVals","inStride","outStride","startInd","y1","x1","y2","x2","bInd","heightScale","widthScale","yInd","ind","topInd","bottomInd","yLerp","xInd","leftInd","rightInd","xLerp","topLeft","topRight","bottomLeft","bottom","closestX","round","closestY","inInd","outInd","cumprodConfig","Cumprod","exclusive","reverse","permutedAxis","resultDtype","makeOnesTypedArray","finalDim","indexAdjuster","prevIdx","reverseTransposedResult","getUndoAxesPermutation","cumsumConfig","Cumsum","denseBincountConfig","DenseBincount","depthToSpaceConfig","DepthToSpace","inputHeight","inputWidth","inputDepth","outputHeight","outputWidth","outputDepth","outputIdx","h","inH","offsetH","w","inW","offsetD","inputIdx","depthwiseConv2dNative","$dilations","chMul","q","depthwiseConv2dNativeConfig","DepthwiseConv2dNative","depthwiseConv2dNativeBackpropFilterConfig","DepthwiseConv2dNativeBackpropFilter","dm","depthwiseConv2dNativeBackpropInputConfig","DepthwiseConv2dNativeBackpropInput","diagConfig","Diag","dilation2DConfig","Dilation2D","filterVals","filterRank","computeDilation2DInfo","outRank","hOut","hBeg","wOut","wBeg","curVal","MIN_SAFE_INTEGER","hIn","wIn","xIndex","filterIndex","val","dilation2DBackpropFilterConfig","Dilation2DBackpropFilter","toNestedArray","$filter","$dy","gradients","makeZerosNestedTypedArray","hMax","wMax","dilation2DBackpropInputConfig","Dilation2DBackpropInput","hInMax","wInMax","oldResult","sumConfig","Sum","einsumConfig","Einsum","equation","allDims","summedDims","idDims","decodeEinsumEquation","checkEinsumDimSizes","path","steps","getEinsumComputePath","nSteps","out","numDimsRemaining","tensorsToDispose","idTerm","permutationIndices","expandDims","dimsToExpand","getEinsumPermutation","isIdentityPermutation","splice","eluGradConfig","EluGrad","v","p","ERF_P","a1","ERF_A1","a2","ERF_A2","a3","ERF_A3","a4","ERF_A4","a5","ERF_A5","erf","Erf","erfConfig","$dim","expandDimsConfig","ExpandDims","realDivImpl","div","RealDiv","realDivConfig","fftBatch","inverse","innerDim","inputVals","real2D","imag2D","fftImpl","getComplexWithIndex","$realInfo","$imagInfo","inputSize","fftRadix2","realInfo","imagInfo","sizeInfo","sizeInfoCopy","divRealInfo","divImagInfo","divRealVals","divImagVals","rawOutput","ret","e","exponent","term","assignToTypedArray","fourierTransformByMatmul","splitRealAndImagArrays","half","evenComplex","complexWithEvenIndex","evenRealVals","evenImagVals","evenShape","evenRealInfo","evenImagInfo","evenTensorInfo","oddComplex","complexWithOddIndex","oddRealVals","oddImagVals","oddShape","oddRealInfo","oddImagInfo","oddTensorInfo","$evenComplex","$evenRealVals","$evenImagVals","$evenShape","$evenRealInfo","$evenImagInfo","$evenTensorInfo","$oddComplex","$oddRealVals","$oddImagVals","$oddShape","$oddRealInfo","$oddImagInfo","$oddTensorInfo","exponents","eShape","eRealInfo","eImagInfo","exponentInfo","addPart","subPart","addPartReal","subPartReal","addPartImag","subPartImag","$real","$imag","$realVals","$imagVals","fftConfig","FFT","innerDimensionSize","input2D","resultReshaped","inferDtype","fillValues","fillConfig","Fill","flipLeftRightConfig","FlipLeftRight","batchOffset","rowOffset","coordX","outIdx","outputValue","floorDivImpl","floorDiv","FloorDiv","floorDivConfig","fusedConv2DConfig","FusedConv2D","resultOld","reshapedBias","reshapedAlpha","fusedDepthwiseConv2DConfig","FusedDepthwiseConv2D","gatherNdConfig","GatherNd","params","prepareAndValidate","gatherV2Config","GatherV2","batchDims","parsedAxis","indicesVals","axisDim","$batchDims","indicesSize","shapeInfo","segment_util","collectGatherOpShapeInfo","flattenX","outerSize","dimSize","ifftConfig","IFFT","isFinite","IsFinite","isFiniteConfig","isInf","IsInf","Infinity","isInfConfig","IsNan","isNaNConfig","linSpaceConfig","LinSpace","log1p","Log1p","log1pConfig","logicalAndImpl","logicalAnd","LogicalAnd","logicalAndConfig","logicalNot","LogicalNot","logicalNotConfig","logicalOrImpl","logicalOr","LogicalOr","logicalOrConfig","LRNConfig","LRN","depthRadius","beta","channels","maxD","sumAcrossChannels","currentChannel","beginSumOffset","endSumOffset","pow","LRNGradConfig","LRNGrad","dySize","yValues","depthBegin","depthEnd","norm","dyi","reductionIndices","maxOutShape","maxConfig","Max","maxPoolConfig","MaxPool","maxPool3DConfig","MaxPool3D","maxPool3DGradConfig","MaxPool3DGrad","maxPosBuf","maxPool3dPositions","mask","maxPoolGradConfig","MaxPoolGrad","maxPoolWithArgmaxConfig","MaxPoolWithArgmax","pooled","indexes","maxPools","maxPoolWithArgmaxImpl","pooledDataId","indexesDataId","meanConfig","Mean","toDispose","reduceSizeScalar","minConfig","Min","mirrorPadConfig","MirrorPad","paddings","mode","coords","inIndex","modImpl","rem","mod","Mod","modConfig","softmax","logits","logitsRank","maxLogit","expandedShape","maxLogitReshaped","sumExp","sumReshaped","softmaxConfig","Softmax","multinomialConfig","Multinomial","numSamples","seed","normalized","probabilities","numEvents","probVals","resShape","cdf","event","random","seedrandom","alea","sampleId","nonMaxSuppressionV3Impl","nonMaxSuppressionV3Config","NonMaxSuppressionV3","scores","maxOutputSize","iouThreshold","scoreThreshold","boxesVals","scoresVals","selectedIndices","nonMaxSuppressionV4Impl","nonMaxSuppressionV4Config","NonMaxSuppressionV4","padToMaxOutputSize","validOutputs","nonMaxSuppressionV5Impl","nonMaxSuppressionV5Config","NonMaxSuppressionV5","softNmsSigma","maxOutputSizeVal","iouThresholdVal","scoreThresholdVal","softNmsSigmaVal","selectedScores","oneHotConfig","OneHot","depth","onValue","offValue","indicesVal","zerosLike","imagPart","zerosLikeConfig","ZerosLike","onesLikeConfig","OnesLike","onesLike","pack","assertShapesMatch","expandedT","packConfig","Pack","padV2Config","PadV2","constantValue","outCoords","powImpl","Pow","powConfig","rangeConfig","Range","reciprocal","Reciprocal","reciprocalConfig","resizeBilinearConfig","ResizeBilinear","images","alignCorners","halfPixelCenters","imagesStrides","newHeight","newWidth","oldHeight","oldWidth","effectiveInputSize","effectiveOutputSize","effectiveRowSizeRatio","effectiveColSizeRatio","sourceFracRow","sourceRowFloor","rowFrac","sourceRowCeil","topRowOffset","botRowOffset","sourceFracCol","sourceColFloor","colFrac","sourceColCeil","topLeftOffest","botLeftOffset","topRightOffset","botRightOffest","newValue","resizeBilinearGradConfig","ResizeBilinearGrad","xHeight","xWidth","yHeight","yWidth","effectiveXSize","effectiveYSize","bOffset","topDxRIndex","bottomDxRIndex","topDxROffset","bottomDxROffset","dxRLerp","inverseDxRLerp","leftDxCIndex","rightDxCIndex","dxCLerp","inverseDxCLerp","topLeftRCOffset","topRightRCOffset","bottomLeftRCOffset","bottomRightRCOffset","inverseDxRLerpTimesInverseDxCLerp","inverseDxRLerpTimesDxCLerp","dxRLerpTimesInverseDxCLerp","dxRLerpTimesDxCLerp","dyVal","resizeNearestNeighborConfig","ResizeNearestNeighbor","outputOffset","sourceNearestRow","sourceNearestCol","newVal","resizeNearestNeighborGradConfig","ResizeNearestNeighborGrad","invHeightScale","invWidthScale","winHeight","winWidth","startRLerp","startDyR","startCLerp","startDyC","accum","dyRIndex","dyROffset","dyCIndex","dyCOffset","reverseConfig","Reverse","dims","$dims","rotateWithOffsetConfig","RotateWithOffset","radians","fillValue","center","centerX","centerY","getImageCenter","sinFactor","sin","cosFactor","coordY","Round","base","roundConfig","scatterNdConfig","ScatterNd","calculateShapes","lowerBound","mid","upperBound","searchSortedConfig","SearchSorted","sortedSequence","side","sortedInputs","numInputs","numValues","sortedInputsSlice","searchSortedImpl","selectConfig","Select","conditionRank","tValues","eValues","scaleAlpha","SELU_SCALEALPHA","SELU_SCALE","selu","Selu","seluConfig","Sign","signConfig","Sin","sinConfig","sinh","Sinh","sinhConfig","threshold","softplus","Softplus","tooLarge","tooSmall","expX","softplusConfig","spaceToBatchNDConfig","SpaceToBatchND","completePaddings","paddedX","reshapedPaddedShape","permutedReshapedPaddedPermutation","paddedXReshaped","paddedXT","sparseFillEmptyRowsConfig","SparseFillEmptyRows","$indices","$values","$denseShape","$defaultValue","outputIndicesShape","sparseReshapeConfig","SparseReshape","$inputShape","$inputIndices","sparseSegmentMeanConfig","SparseSegmentMean","$data","$segmentIds","outputData","outputDataShape","sparseSegmentSumConfig","SparseSegmentSum","sparseToDenseConfig","SparseToDense","sparseIndices","sparseValues","Boolean","splitVConfig","SplitV","numOrSizeSplits","splitSizes","prepareSplitSize","sliceT","squareConfig","Square","Step","stepAttrs","NaN","stepConfig","stridedSliceConfig","StridedSlice","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","finalShapeSparse","finalShape","isIdentity","sliceDim0","isSimpleSlice","$end","$strides","sliceInfo","sliced","stringNGramsConfig","StringNGrams","$dataSplits","stringSplitConfig","StringSplit","$input","$delimiter","stringToHashBucketFastConfig","StringToHashBucketFast","tan","Tan","tanConfig","tanh","Tanh","tanhConfig","tileConfig","Tile","topKConfig","TopK","transformConfig","Transform","transforms","interpolation","fillMode","batchStride","rowStride","colStride","transformVals","transform","outY","outX","projection","inX","inY","mapCoord","nearestInterpolation","bilinearInterpolation","outCoord","len","inCoord","sz2","clamp","mapCoordReflect","sz","mapCoordWrap","mapCoordNearest","mapCoordConstant","readWithFillValue","yFloor","xFloor","yCeil","xCeil","uniqueConfig","Unique","unpackConfig","Unpack","valueRank","tempRes","unsortedSegmentSumConfig","UnsortedSegmentSum","numSegments","numIters","expanded","scalarValue","segmentId","maskCasted","mul","sumTensorInfo","kernelConfigs","kernelConfig","registerKernel"],"mappings":"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hB,GACAmjB,GACA34B,EACA45B,GACAx5B,EACA05B,GACAt5B,EACAs+B,GACAO,GACAE,GACA3+B,EACAq/B,GACAC,GACAK,GACAE,GACAI,GACAv+B,EACAI,GACA7I,EACA8nC,GACArZ,GACAyZ,GACAI,GACAE,GACA1sB,GACA7S,GACAI,GACAo/B,GACA5+B,GACAg/B,GACAI,GACAG,GACAI,GACAC,GACAW,GACAU,GACAtgC,GACAwgC,GACAE,GACAE,GACAK,GACAE,GACAQ,GACAI,GACA1hC,GACA4hC,GACAU,GACAW,GACA5iC,GACAM,GACAsjC,GACAU,GACAK,GACA/jC,GACAukC,GACAU,GACAM,GACAE,GACAM,GACA11B,GACApP,GACA+kC,GACA1xC,EACAkgC,GACA4R,GACA31B,GACAG,GACAU,GACA+0B,GACA6B,GACA4B,GACAM,GACAe,GACAI,GACAc,GACAlqC,GACAmqC,GACAM,GACAS,GACAU,GACA7qC,GACA+qC,GACAE,GACAG,GACAlqC,GACA09B,GACA+M,GACAC,GACAQ,GACAO,GACAI,GACAM,GACAE,GACAK,GACAtoC,GACA4oC,GACAvoC,GACA4oC,GACAC,GACAgB,GACAG,GACAI,GACAlmC,GACAykB,GACA6hB,GACAG,GACAC,GACAE,GACAE,GACArzC,GACAs1C,GACAE,GACAI,GACArR,IAGF,IAAK,MAAMgS,KAAgBD,GACzBE,iBAAeD,gDClWD"}