/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@tensorflow/tfjs-core")):"function"==typeof define&&define.amd?define(["exports","@tensorflow/tfjs-core"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).tf=t.tf||{},t.tf)}(this,(function(t,e){"use strict";function n(t){if(t&&t.__esModule)return t;var e=Object.create(null);return t&&Object.keys(t).forEach((function(n){if("default"!==n){var r=Object.getOwnPropertyDescriptor(t,n);Object.defineProperty(e,n,r.get?r:{enumerable:!0,get:function(){return t[n]}})}})),e.default=t,e}var r=n(e);var s,a;e.env().registerFlag("KEEP_INTERMEDIATE_TENSORS",(()=>!1),(t=>{t&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")})),function(t){t[t.DT_INVALID=0]="DT_INVALID",t[t.DT_FLOAT=1]="DT_FLOAT",t[t.DT_DOUBLE=2]="DT_DOUBLE",t[t.DT_INT32=3]="DT_INT32",t[t.DT_UINT8=4]="DT_UINT8",t[t.DT_INT16=5]="DT_INT16",t[t.DT_INT8=6]="DT_INT8",t[t.DT_STRING=7]="DT_STRING",t[t.DT_COMPLEX64=8]="DT_COMPLEX64",t[t.DT_INT64=9]="DT_INT64",t[t.DT_BOOL=10]="DT_BOOL",t[t.DT_QINT8=11]="DT_QINT8",t[t.DT_QUINT8=12]="DT_QUINT8",t[t.DT_QINT32=13]="DT_QINT32",t[t.DT_BFLOAT16=14]="DT_BFLOAT16",t[t.DT_QINT16=15]="DT_QINT16",t[t.DT_QUINT16=16]="DT_QUINT16",t[t.DT_UINT16=17]="DT_UINT16",t[t.DT_COMPLEX128=18]="DT_COMPLEX128",t[t.DT_HALF=19]="DT_HALF",t[t.DT_RESOURCE=20]="DT_RESOURCE",t[t.DT_VARIANT=21]="DT_VARIANT",t[t.DT_UINT32=22]="DT_UINT32",t[t.DT_UINT64=23]="DT_UINT64",t[t.DT_FLOAT_REF=101]="DT_FLOAT_REF",t[t.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",t[t.DT_INT32_REF=103]="DT_INT32_REF",t[t.DT_UINT8_REF=104]="DT_UINT8_REF",t[t.DT_INT16_REF=105]="DT_INT16_REF",t[t.DT_INT8_REF=106]="DT_INT8_REF",t[t.DT_STRING_REF=107]="DT_STRING_REF",t[t.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",t[t.DT_INT64_REF=109]="DT_INT64_REF",t[t.DT_BOOL_REF=110]="DT_BOOL_REF",t[t.DT_QINT8_REF=111]="DT_QINT8_REF",t[t.DT_QUINT8_REF=112]="DT_QUINT8_REF",t[t.DT_QINT32_REF=113]="DT_QINT32_REF",t[t.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",t[t.DT_QINT16_REF=115]="DT_QINT16_REF",t[t.DT_QUINT16_REF=116]="DT_QUINT16_REF",t[t.DT_UINT16_REF=117]="DT_UINT16_REF",t[t.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",t[t.DT_HALF_REF=119]="DT_HALF_REF",t[t.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",t[t.DT_VARIANT_REF=121]="DT_VARIANT_REF",t[t.DT_UINT32_REF=122]="DT_UINT32_REF",t[t.DT_UINT64_REF=123]="DT_UINT64_REF"}(s||(s={})),function(t){var e;(e=t.CheckpointFormatVersion||(t.CheckpointFormatVersion={}))[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(a||(a={}));const o={};function i(t){return o[t]}function u(t,n,r,s,a){const o=n.inputParams[t];if(o&&void 0!==o.inputIndexStart){const t=o.inputIndexStart,i=0===o.inputIndexEnd?void 0:void 0===o.inputIndexEnd?t+1:o.inputIndexEnd;if("tensor"===o.type)return p(n.inputNames[o.inputIndexStart],r,s,a);if("tensors"===o.type){return n.inputNames.slice(t,i).map((t=>p(t,r,s,a)))}const u=p(n.inputNames.slice(t)[0],r,s,a),l=u.dataSync();return"number"===o.type?l[0]:e.util.toNestedArray(u.shape,l)}const i=n.attrParams[t];return i&&i.value}function p(t,e,n,r){const[s,a]=h(t);if(null!=r){const t=r.getHashTableHandleByName(s);if(null!=t)return t}const o=n.currentContextIds.find((t=>!!e[c(s,t)]));return void 0!==o?e[c(s,o)][a]:void 0}function l(t,e){const[n,r,s]=h(t);return[c(n,e&&e.currentContextId),r,s]}function c(t,e){return e?`${t}-${e}`:t}function h(t){const e=t.split(":");if(1===e.length)return[t,0,void 0];const n=e[0],r=3===e.length?e[1]:void 0;return[n,Number(e[e.length-1]),r]}function d(t,e,n){let r=u("pad",t,e,n);if("explicit"===r){r=u("explicitPaddings",t,e,n);const s=[[0,0],[0,0],[0,0],[0,0]];for(let t=0;t<4;t++)s[t][0]=r[2*t],s[t][1]=r[2*t+1];return s}return r}function m(t){return t.kept?t:e.clone(t)}var f={__proto__:null,json:[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]};var y={__proto__:null,json:[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]};var g={__proto__:null,json:[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}]};var b={__proto__:null,json:[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number"}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}]};var x={__proto__:null,json:[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}]};var N={__proto__:null,json:[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]};var k={__proto__:null,json:[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}]};var w={__proto__:null,json:[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}]};var T={__proto__:null,json:[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}]};var _={__proto__:null,json:[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}]};var v={__proto__:null,json:[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]};var S={__proto__:null,json:[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}]};var E={__proto__:null,json:[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}]};var $={__proto__:null,json:[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}]};var I={__proto__:null,json:[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}]};var D={__proto__:null,json:[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}]};var O={__proto__:null,json:[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}]};var A={__proto__:null,json:[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}]};var M={__proto__:null,json:[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}]};class F{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const t=[].concat(...[f,y,g,b,x,N,k,w,T,_,v,S,E,$,I,D,O,A,M].map((t=>t.json)));this.opMappers=t.reduce(((t,e)=>(t[e.tfOpName]=e,t)),{})}transformGraph(t,e={}){const n=t.node,r=[],s=[],a=[],o=n.reduce(((t,e)=>(t[e.name]=this.mapNode(e),e.op.startsWith("Placeholder")?r.push(t[e.name]):"Const"===e.op?s.push(t[e.name]):null!=e.input&&0!==e.input.length||a.push(t[e.name]),t)),{});let i=[];const u=[];let p={},c={};null!=e&&(p=this.mapSignatureEntries(e.inputs),c=this.mapSignatureEntries(e.outputs));const h=Object.keys(o);h.forEach((t=>{const e=o[t];e.inputNames.forEach(((t,n)=>{const[r,,s]=l(t),a=o[r];if(null!=a.outputs){const t=a.outputs.indexOf(s);if(-1!==t){const s=`${r}:${t}`;e.inputNames[n]=s}}e.inputs.push(a),a.children.push(e)}))})),0===Object.keys(c).length?h.forEach((t=>{const e=o[t];0===e.children.length&&u.push(e)})):Object.keys(c).forEach((t=>{const[e]=l(t),n=o[e];null!=n&&(n.signatureKey=c[t],u.push(n))})),Object.keys(p).length>0?Object.keys(p).forEach((t=>{const[e]=l(t),n=o[e];n&&(n.signatureKey=p[t],i.push(n))})):i=r;let d={};null!=t.library&&null!=t.library.function&&(d=t.library.function.reduce(((t,e)=>(t[e.signature.name]=this.mapFunction(e),t)),{}));const m={nodes:o,inputs:i,outputs:u,weights:s,placeholders:r,signature:e,functions:d};return a.length>0&&(m.initNodes=a),m}mapSignatureEntries(t){return Object.keys(t||{}).reduce(((e,n)=>(e[t[n].name]=n,e)),{})}mapNode(t){const e=i(t.op)||this.opMappers[t.op]||{};null==t.attr&&(t.attr={});const n={name:t.name,op:t.op,category:e.category,inputNames:(t.input||[]).map((t=>t.startsWith("^")?t.slice(1):t)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:t.attr,outputs:e.outputs};return null!=e.inputs&&(n.inputParams=e.inputs.reduce(((t,e)=>(t[e.name]={type:e.type,inputIndexStart:e.start,inputIndexEnd:e.end},t)),{})),null!=e.attrs&&(n.attrParams=e.attrs.reduce(((e,n)=>{const r=n.type;let s;switch(n.type){case"string":s=V(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=V(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":s=W(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=W(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":s=z(t.attr,n.tfName,n.defaultValue||0),void 0===s&&n.tfDeprecatedName&&(s=z(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":s=j(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=j(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":s=R(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=R(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":s=G(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=G(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":s=U(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=U(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":s=H(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=H(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":s=P(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=P(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":s=K(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=K(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":s=B(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=B(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${t.op}`)}return e[n.name]={value:s,type:r},e}),{})),n}mapFunction(t){const e=t.nodeDef,n=[];let r={};null!=e&&(r=e.reduce(((t,e)=>(t[e.name]=this.mapNode(e),"Const"===e.op&&n.push(t[e.name]),t)),{}));const s=[],a=[];t.signature.inputArg.forEach((t=>{const[e]=l(t.name),n={name:e,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:L(t.type),type:"dtype"}},children:[]};n.signatureKey=t.name,s.push(n),r[e]=n}));Object.keys(r).forEach((t=>{const e=r[t];e.inputNames.forEach(((t,n)=>{const[s,,a]=l(t),o=r[s];if(null!=o.outputs){const t=o.outputs.indexOf(a);if(-1!==t){const r=`${s}:${t}`;e.inputNames[n]=r}}e.inputs.push(o),o.children.push(e)}))}));const o=t.ret;t.signature.outputArg.forEach((t=>{const[e,n]=l(o[t.name]),s=r[e];null!=s&&(s.defaultOutput=n,a.push(s))}));const i=this.mapArgsToSignature(t);return{nodes:r,inputs:s,outputs:a,weights:n,placeholders:[],signature:i}}mapArgsToSignature(t){return{methodName:t.signature.name,inputs:t.signature.inputArg.reduce(((t,e)=>(t[e.name]=this.mapArgToTensorInfo(e),t)),{}),outputs:t.signature.outputArg.reduce(((e,n)=>(e[n.name]=this.mapArgToTensorInfo(n,t.ret),e)),{})}}mapArgToTensorInfo(t,e){let n=t.name;return null!=e&&(n=e[n]),{name:n,dtype:t.type}}}function C(t,n){const r=Array.isArray(t)?String.fromCharCode.apply(null,t):function(t){const n=e.env().global;if("undefined"!=typeof n.atob)return n.atob(t);if("undefined"!=typeof Buffer)return new Buffer(t,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(t);return n?r:r.toLowerCase()}function V(t,e,n,r=!1){const s=t[e];return null!=s?C(s.s,r):n}function R(t,e,n){const r=t[e];return r?r.b:n}function z(t,e,n){const r=t[e]||{},s=null!=r.i?r.i:null!=r.f?r.f:n;return"number"==typeof s?s:parseInt(s,10)}function L(t){switch("string"==typeof t&&(t=s[t]),t){case s.DT_FLOAT:case s.DT_HALF:return"float32";case s.DT_INT32:case s.DT_INT64:case s.DT_INT8:case s.DT_UINT8:return"int32";case s.DT_BOOL:return"bool";case s.DT_DOUBLE:return"float32";case s.DT_STRING:return"string";default:return null}}function B(t,e,n){const r=t[e];return r&&r.func?r.func.name:n}function P(t,e,n){const r=t[e];return r&&r.type?L(r.type):n}function K(t,e,n){const r=t[e];return r&&r.list&&r.list.type?r.list.type.map((t=>L(t))):n}function q(t){if(!t.unknownRank)return null!=t.dim?t.dim.map((t=>"number"==typeof t.size?t.size:parseInt(t.size,10))):[]}function U(t,e,n){const r=t[e];return r&&r.shape?q(r.shape):n}function j(t,e,n){const r=t[e];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map((t=>"number"==typeof t?t:parseInt(t,10))):n}function W(t,e,n,r=!1){const s=t[e];return s&&s.list&&s.list.s?s.list.s.map((t=>C(t,r))):n}function H(t,e,n){const r=t[e];return r&&r.list&&r.list.shape?r.list.shape.map((t=>q(t))):n}function G(t,e,n){const r=t[e];return r&&r.list&&r.list.b?r.list.b:n}class Z{constructor(t,e,n){this.node=t,this.tensorMap=e,this.context=n,this.inputs=[],this.attrs={},this.inputs=t.inputNames.map((t=>this.getInput(t))),null!=t.rawAttrs&&(this.attrs=Object.keys(t.rawAttrs).reduce(((t,e)=>(t[e]=this.getAttr(e),t)),{}))}getInput(t){return p(t,this.tensorMap,this.context)}getAttr(t,e){const n=this.node.rawAttrs[t];if(null!=n.tensor)return p(t,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return z(this.node.rawAttrs,t,e);if(null!=n.s)return V(this.node.rawAttrs,t,e);if(null!=n.b)return R(this.node.rawAttrs,t,e);if(null!=n.shape)return U(this.node.rawAttrs,t,e);if(null!=n.type)return P(this.node.rawAttrs,t,e);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return j(this.node.rawAttrs,t,e);if(null!=n.list.s)return W(this.node.rawAttrs,t,e);if(null!=n.list.shape)return H(this.node.rawAttrs,t,e);if(null!=n.list.b)return G(this.node.rawAttrs,t,e);if(null!=n.list.type)return K(this.node.rawAttrs,t,e)}return e}}function Q(t){throw new Error(`'${t}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function Y(t,e){if(!t)throw new Error("string"==typeof e?e:e())}function X(t,e,n=""){Y(nt(t,e),(()=>n+` Shapes ${t} and ${e} must match`))}function J(t){Y(null!=t,(()=>"The input to the tensor constructor must be a non-null value."))}function tt(t,e=[],n=!1){if(null==e&&(e=[]),Array.isArray(t)||ot(t)&&!n)for(let r=0;r<t.length;++r)tt(t[r],e,n);else e.push(t);return e}function et(t){if(0===t.length)return 1;let e=t[0];for(let n=1;n<t.length;n++)e*=t[n];return e}function nt(t,e){if(t===e)return!0;if(null==t||null==e)return!1;if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(t[n]!==e[n])return!1;return!0}function rt(t){return t%1==0}function st(t,e){return e<=t.length?t:t+" ".repeat(e-t.length)}function at(t,e){const n=e.length;return Y((t=null==t?e.map(((t,e)=>e)):[].concat(t)).every((t=>t>=-n&&t<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${t}`)),Y(t.every((t=>rt(t))),(()=>`All values in axis param must be integers but got axis ${t}`)),t.map((t=>t<0?n+t:t))}function ot(t){return t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array||t instanceof Uint8ClampedArray}function it(t){if("float32"===t||"int32"===t)return 4;if("complex64"===t)return 8;if("bool"===t)return 1;throw new Error(`Unknown dtype ${t}`)}function ut(t){return"string"==typeof t||t instanceof String}function pt(t){return Array.isArray(t)?pt(t[0]):t instanceof Float32Array?"float32":t instanceof Int32Array||t instanceof Uint8Array||t instanceof Uint8ClampedArray?"int32":"number"==typeof t?"float32":ut(t)?"string":function(t){return"boolean"==typeof t}(t)?"bool":"float32"}function lt(t){return!!(t&&t.constructor&&t.call&&t.apply)}function ct(t){const e=t.length;if(e<2)return[];const n=new Array(e-1);n[e-2]=t[e-1];for(let r=e-3;r>=0;--r)n[r]=n[r+1]*t[r+1];return n}function ht(t,e,n,r=!1){const s=new Array;if(1===e.length){const a=e[0]*(r?2:1);for(let e=0;e<a;e++)s[e]=n[t+e]}else{const a=e[0],o=e.slice(1),i=o.reduce(((t,e)=>t*e))*(r?2:1);for(let e=0;e<a;e++)s[e]=ht(t+e*i,o,n,r)}return s}function dt(t,e,n=!1){if(0===t.length)return e[0];const r=t.reduce(((t,e)=>t*e))*(n?2:1);if(0===r)return[];if(r!==e.length)throw new Error(`[${t}] does not match the input size ${e.length}${n?" for a complex tensor":""}.`);return ht(0,t,e,n)}function mt(t,e){const n=ft(t,e);for(let t=0;t<n.length;t++)n[t]=1;return n}function ft(t,e){if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e)return new Uint8Array(t);throw new Error(`Unknown data type ${e}`)}function yt(t){t.forEach((e=>{Y(Number.isInteger(e)&&e>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${t}].`))}))}function gt(t){return t&&t.then&&"function"==typeof t.then}const bt="tfjsflags";class xt{constructor(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=Nt,this.populateURLFlags()}setPlatform(t,e){null!=this.platform&&(kt().getBool("IS_TEST")||kt().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`)),this.platformName=t,this.platform=e}registerFlag(t,e,n){if(this.flagRegistry[t]={evaluationFn:e,setHook:n},null!=this.urlFlags[t]){const e=this.urlFlags[t];kt().getBool("IS_TEST")||kt().getBool("PROD")||console.warn(`Setting feature override from URL ${t}: ${e}.`),this.set(t,e)}}async getAsync(t){return t in this.flags||(this.flags[t]=await this.evaluateFlag(t)),this.flags[t]}get(t){if(t in this.flags)return this.flags[t];const e=this.evaluateFlag(t);if(gt(e))throw new Error(`Flag ${t} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[t]=e,this.flags[t]}getNumber(t){return this.get(t)}getBool(t){return this.get(t)}getFlags(){return this.flags}get features(){return this.flags}set(t,e){if(null==this.flagRegistry[t])throw new Error(`Cannot set flag ${t} as it has not been registered.`);this.flags[t]=e,null!=this.flagRegistry[t].setHook&&this.flagRegistry[t].setHook(e)}evaluateFlag(t){if(null==this.flagRegistry[t])throw new Error(`Cannot evaluate flag '${t}': no evaluation function found.`);return this.flagRegistry[t].evaluationFn()}setFlags(t){this.flags=Object.assign({},t)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if("undefined"==typeof this.global||"undefined"==typeof this.global.location||"undefined"==typeof this.global.location.search)return;const t=this.getQueryParams(this.global.location.search);if(bt in t){t.tfjsflags.split(",").forEach((t=>{const[e,n]=t.split(":");this.urlFlags[e]=function(t,e){if("true"===(e=e.toLowerCase())||"false"===e)return"true"===e;if(""+ +e===e)return+e;throw new Error(`Could not parse value flag value ${e} for flag ${t}.`)}(e,n)}))}}}function Nt(t){const e={};return t.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((t,...n)=>(function(t,e,n){t[decodeURIComponent(e)]=decodeURIComponent(n||"")}(e,n[0],n[1]),n.join("=")))),e}function kt(){return Tt}let wt,Tt=null;function _t(){if(null==wt){let t;if("undefined"!=typeof window)t=window;else if("undefined"!=typeof global)t=global;else if("undefined"!=typeof process)t=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");t=self}wt=t}return wt}function vt(t,e){const n=function(){const t=_t();return null==t._tfGlobals&&(t._tfGlobals=new Map),t._tfGlobals}();if(n.has(t))return n.get(t);{const r=e();return n.set(t,r),n.get(t)}}const St="Cast",Et="Identity",$t="Tile",It="Transpose",Dt="_FusedMatMul",Ot="FusedConv2D",At="FusedDepthwiseConv2D";function Mt(...t){kt().getBool("IS_TEST")||kt().getBool("PROD")||console.warn(...t)}const Ft=vt("kernelRegistry",(()=>new Map)),Ct=vt("gradRegistry",(()=>new Map));function Vt(t,e){const n=function(t,e){return`${e}_${t}`}(t,e);return Ft.get(n)}function Rt(t){return Ct.get(t)}function zt(t){const e=Ft.entries(),n=[];for(;;){const{done:r,value:s}=e.next();if(r)break;const[a,o]=s,[i]=a.split("_");i===t&&n.push(o)}return n}var Lt=Pt,Bt=null;try{Bt=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(t){}function Pt(t,e,n){this.low=0|t,this.high=0|e,this.unsigned=!!n}function Kt(t){return!0===(t&&t.__isLong__)}Pt.prototype.__isLong__,Object.defineProperty(Pt.prototype,"__isLong__",{value:!0}),Pt.isLong=Kt;var qt={},Ut={};function jt(t,e){var n,r,s;return e?(s=0<=(t>>>=0)&&t<256)&&(r=Ut[t])?r:(n=Ht(t,(0|t)<0?-1:0,!0),s&&(Ut[t]=n),n):(s=-128<=(t|=0)&&t<128)&&(r=qt[t])?r:(n=Ht(t,t<0?-1:0,!1),s&&(qt[t]=n),n)}function Wt(t,e){if(isNaN(t))return e?ne:ee;if(e){if(t<0)return ne;if(t>=Xt)return ie}else{if(t<=-Jt)return ue;if(t+1>=Jt)return oe}return t<0?Wt(-t,e).neg():Ht(t%Yt|0,t/Yt|0,e)}function Ht(t,e,n){return new Pt(t,e,n)}Pt.fromInt=jt,Pt.fromNumber=Wt,Pt.fromBits=Ht;var Gt=Math.pow;function Zt(t,e,n){if(0===t.length)throw Error("empty string");if("NaN"===t||"Infinity"===t||"+Infinity"===t||"-Infinity"===t)return ee;if("number"==typeof e?(n=e,e=!1):e=!!e,(n=n||10)<2||36<n)throw RangeError("radix");var r;if((r=t.indexOf("-"))>0)throw Error("interior hyphen");if(0===r)return Zt(t.substring(1),e,n).neg();for(var s=Wt(Gt(n,8)),a=ee,o=0;o<t.length;o+=8){var i=Math.min(8,t.length-o),u=parseInt(t.substring(o,o+i),n);if(i<8){var p=Wt(Gt(n,i));a=a.mul(p).add(Wt(u))}else a=(a=a.mul(s)).add(Wt(u))}return a.unsigned=e,a}function Qt(t,e){return"number"==typeof t?Wt(t,e):"string"==typeof t?Zt(t,e):Ht(t.low,t.high,"boolean"==typeof e?e:t.unsigned)}Pt.fromString=Zt,Pt.fromValue=Qt;var Yt=4294967296,Xt=Yt*Yt,Jt=Xt/2,te=jt(1<<24),ee=jt(0);Pt.ZERO=ee;var ne=jt(0,!0);Pt.UZERO=ne;var re=jt(1);Pt.ONE=re;var se=jt(1,!0);Pt.UONE=se;var ae=jt(-1);Pt.NEG_ONE=ae;var oe=Ht(-1,2147483647,!1);Pt.MAX_VALUE=oe;var ie=Ht(-1,-1,!0);Pt.MAX_UNSIGNED_VALUE=ie;var ue=Ht(0,-2147483648,!1);Pt.MIN_VALUE=ue;var pe=Pt.prototype;pe.toInt=function(){return this.unsigned?this.low>>>0:this.low},pe.toNumber=function(){return this.unsigned?(this.high>>>0)*Yt+(this.low>>>0):this.high*Yt+(this.low>>>0)},pe.toString=function(t){if((t=t||10)<2||36<t)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(ue)){var e=Wt(t),n=this.div(e),r=n.mul(e).sub(this);return n.toString(t)+r.toInt().toString(t)}return"-"+this.neg().toString(t)}for(var s=Wt(Gt(t,6),this.unsigned),a=this,o="";;){var i=a.div(s),u=(a.sub(i.mul(s)).toInt()>>>0).toString(t);if((a=i).isZero())return u+o;for(;u.length<6;)u="0"+u;o=""+u+o}},pe.getHighBits=function(){return this.high},pe.getHighBitsUnsigned=function(){return this.high>>>0},pe.getLowBits=function(){return this.low},pe.getLowBitsUnsigned=function(){return this.low>>>0},pe.getNumBitsAbs=function(){if(this.isNegative())return this.eq(ue)?64:this.neg().getNumBitsAbs();for(var t=0!=this.high?this.high:this.low,e=31;e>0&&0==(t&1<<e);e--);return 0!=this.high?e+33:e+1},pe.isZero=function(){return 0===this.high&&0===this.low},pe.eqz=pe.isZero,pe.isNegative=function(){return!this.unsigned&&this.high<0},pe.isPositive=function(){return this.unsigned||this.high>=0},pe.isOdd=function(){return 1==(1&this.low)},pe.isEven=function(){return 0==(1&this.low)},pe.equals=function(t){return Kt(t)||(t=Qt(t)),(this.unsigned===t.unsigned||this.high>>>31!=1||t.high>>>31!=1)&&(this.high===t.high&&this.low===t.low)},pe.eq=pe.equals,pe.notEquals=function(t){return!this.eq(t)},pe.neq=pe.notEquals,pe.ne=pe.notEquals,pe.lessThan=function(t){return this.comp(t)<0},pe.lt=pe.lessThan,pe.lessThanOrEqual=function(t){return this.comp(t)<=0},pe.lte=pe.lessThanOrEqual,pe.le=pe.lessThanOrEqual,pe.greaterThan=function(t){return this.comp(t)>0},pe.gt=pe.greaterThan,pe.greaterThanOrEqual=function(t){return this.comp(t)>=0},pe.gte=pe.greaterThanOrEqual,pe.ge=pe.greaterThanOrEqual,pe.compare=function(t){if(Kt(t)||(t=Qt(t)),this.eq(t))return 0;var e=this.isNegative(),n=t.isNegative();return e&&!n?-1:!e&&n?1:this.unsigned?t.high>>>0>this.high>>>0||t.high===this.high&&t.low>>>0>this.low>>>0?-1:1:this.sub(t).isNegative()?-1:1},pe.comp=pe.compare,pe.negate=function(){return!this.unsigned&&this.eq(ue)?ue:this.not().add(re)},pe.neg=pe.negate,pe.add=function(t){Kt(t)||(t=Qt(t));var e=this.high>>>16,n=65535&this.high,r=this.low>>>16,s=65535&this.low,a=t.high>>>16,o=65535&t.high,i=t.low>>>16,u=0,p=0,l=0,c=0;return l+=(c+=s+(65535&t.low))>>>16,p+=(l+=r+i)>>>16,u+=(p+=n+o)>>>16,u+=e+a,Ht((l&=65535)<<16|(c&=65535),(u&=65535)<<16|(p&=65535),this.unsigned)},pe.subtract=function(t){return Kt(t)||(t=Qt(t)),this.add(t.neg())},pe.sub=pe.subtract,pe.multiply=function(t){if(this.isZero())return ee;if(Kt(t)||(t=Qt(t)),Bt)return Ht(Bt.mul(this.low,this.high,t.low,t.high),Bt.get_high(),this.unsigned);if(t.isZero())return ee;if(this.eq(ue))return t.isOdd()?ue:ee;if(t.eq(ue))return this.isOdd()?ue:ee;if(this.isNegative())return t.isNegative()?this.neg().mul(t.neg()):this.neg().mul(t).neg();if(t.isNegative())return this.mul(t.neg()).neg();if(this.lt(te)&&t.lt(te))return Wt(this.toNumber()*t.toNumber(),this.unsigned);var e=this.high>>>16,n=65535&this.high,r=this.low>>>16,s=65535&this.low,a=t.high>>>16,o=65535&t.high,i=t.low>>>16,u=65535&t.low,p=0,l=0,c=0,h=0;return c+=(h+=s*u)>>>16,l+=(c+=r*u)>>>16,c&=65535,l+=(c+=s*i)>>>16,p+=(l+=n*u)>>>16,l&=65535,p+=(l+=r*i)>>>16,l&=65535,p+=(l+=s*o)>>>16,p+=e*u+n*i+r*o+s*a,Ht((c&=65535)<<16|(h&=65535),(p&=65535)<<16|(l&=65535),this.unsigned)},pe.mul=pe.multiply,pe.divide=function(t){if(Kt(t)||(t=Qt(t)),t.isZero())throw Error("division by zero");var e,n,r;if(Bt)return this.unsigned||-2147483648!==this.high||-1!==t.low||-1!==t.high?Ht((this.unsigned?Bt.div_u:Bt.div_s)(this.low,this.high,t.low,t.high),Bt.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?ne:ee;if(this.unsigned){if(t.unsigned||(t=t.toUnsigned()),t.gt(this))return ne;if(t.gt(this.shru(1)))return se;r=ne}else{if(this.eq(ue))return t.eq(re)||t.eq(ae)?ue:t.eq(ue)?re:(e=this.shr(1).div(t).shl(1)).eq(ee)?t.isNegative()?re:ae:(n=this.sub(t.mul(e)),r=e.add(n.div(t)));if(t.eq(ue))return this.unsigned?ne:ee;if(this.isNegative())return t.isNegative()?this.neg().div(t.neg()):this.neg().div(t).neg();if(t.isNegative())return this.div(t.neg()).neg();r=ee}for(n=this;n.gte(t);){e=Math.max(1,Math.floor(n.toNumber()/t.toNumber()));for(var s=Math.ceil(Math.log(e)/Math.LN2),a=s<=48?1:Gt(2,s-48),o=Wt(e),i=o.mul(t);i.isNegative()||i.gt(n);)i=(o=Wt(e-=a,this.unsigned)).mul(t);o.isZero()&&(o=re),r=r.add(o),n=n.sub(i)}return r},pe.div=pe.divide,pe.modulo=function(t){return Kt(t)||(t=Qt(t)),Bt?Ht((this.unsigned?Bt.rem_u:Bt.rem_s)(this.low,this.high,t.low,t.high),Bt.get_high(),this.unsigned):this.sub(this.div(t).mul(t))},pe.mod=pe.modulo,pe.rem=pe.modulo,pe.not=function(){return Ht(~this.low,~this.high,this.unsigned)},pe.and=function(t){return Kt(t)||(t=Qt(t)),Ht(this.low&t.low,this.high&t.high,this.unsigned)},pe.or=function(t){return Kt(t)||(t=Qt(t)),Ht(this.low|t.low,this.high|t.high,this.unsigned)},pe.xor=function(t){return Kt(t)||(t=Qt(t)),Ht(this.low^t.low,this.high^t.high,this.unsigned)},pe.shiftLeft=function(t){return Kt(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?Ht(this.low<<t,this.high<<t|this.low>>>32-t,this.unsigned):Ht(0,this.low<<t-32,this.unsigned)},pe.shl=pe.shiftLeft,pe.shiftRight=function(t){return Kt(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?Ht(this.low>>>t|this.high<<32-t,this.high>>t,this.unsigned):Ht(this.high>>t-32,this.high>=0?0:-1,this.unsigned)},pe.shr=pe.shiftRight,pe.shiftRightUnsigned=function(t){if(Kt(t)&&(t=t.toInt()),0===(t&=63))return this;var e=this.high;return t<32?Ht(this.low>>>t|e<<32-t,e>>>t,this.unsigned):Ht(32===t?e:e>>>t-32,0,this.unsigned)},pe.shru=pe.shiftRightUnsigned,pe.shr_u=pe.shiftRightUnsigned,pe.toSigned=function(){return this.unsigned?Ht(this.low,this.high,!1):this},pe.toUnsigned=function(){return this.unsigned?this:Ht(this.low,this.high,!0)},pe.toBytes=function(t){return t?this.toBytesLE():this.toBytesBE()},pe.toBytesLE=function(){var t=this.high,e=this.low;return[255&e,e>>>8&255,e>>>16&255,e>>>24,255&t,t>>>8&255,t>>>16&255,t>>>24]},pe.toBytesBE=function(){var t=this.high,e=this.low;return[t>>>24,t>>>16&255,t>>>8&255,255&t,e>>>24,e>>>16&255,e>>>8&255,255&e]},Pt.fromBytes=function(t,e,n){return n?Pt.fromBytesLE(t,e):Pt.fromBytesBE(t,e)},Pt.fromBytesLE=function(t,e){return new Pt(t[0]|t[1]<<8|t[2]<<16|t[3]<<24,t[4]|t[5]<<8|t[6]<<16|t[7]<<24,e)},Pt.fromBytesBE=function(t,e){return new Pt(t[4]<<24|t[5]<<16|t[6]<<8|t[7],t[0]<<24|t[1]<<16|t[2]<<8|t[3],e)};const le=Lt||Object.assign(Object.create(null),Lt,{default:Lt});function ce(t){return le.fromString(t,!0,16)}function he(t,e){if("string"===e)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(t)&&(t=tt(t)),kt().getBool("DEBUG")&&function(t,e){for(let n=0;n<t.length;n++){const r=t[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${e} being uploaded contains ${r}.`)}}(t,e),function(t,e){return t instanceof Float32Array&&"float32"===e||t instanceof Int32Array&&"int32"===e||t instanceof Uint8Array&&"bool"===e}(t,e))return t;if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e){const e=new Uint8Array(t.length);for(let n=0;n<e.length;++n)0!==Math.round(t[n])&&(e[n]=1);return e}throw new Error(`Unknown data type ${e}`)}function de(){return kt().platform.now()}function me(t,e="utf-8"){return e=e||"utf-8",kt().platform.decode(t,e)}ce("c3a5c85c97cb3127"),ce("b492b66fbe98f273"),ce("9ae16a3b2f90404f");class fe{constructor(t,e){this.backendTimer=t,this.logger=e,null==e&&(this.logger=new ge)}profileKernel(t,e,n){let r;const s=()=>{r=n()};let a;const o=de();if(this.backendTimer.timerAvailable())a=this.backendTimer.time(s);else{s();for(const t of r)t.dataSync();a=Promise.resolve({kernelMs:de()-o})}if(kt().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let e=0;e<r.length;e++){const n=r[e];n.data().then((e=>{ye(e,n.dtype,t)}))}return{kernelName:t,outputs:r,inputs:e,timeMs:a.then((t=>t.kernelMs)),extraInfo:a.then((t=>null!=t.getExtraProfileInfo?t.getExtraProfileInfo():""))}}logKernelProfile(t){const{kernelName:e,outputs:n,timeMs:r,inputs:s,extraInfo:a}=t;n.forEach((t=>{Promise.all([t.data(),r,a]).then((n=>{this.logger.logKernelProfile(e,t,n[0],n[1],s,n[2])}))}))}}function ye(t,e,n){if("float32"!==e)return!1;for(let e=0;e<t.length;e++){const r=t[e];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${n}'`),!0}return!1}class ge{logKernelProfile(t,e,n,r,s,a){const o="number"==typeof r?st(`${r}ms`,9):r.error,i=st(t,25),u=e.rank,p=e.size,l=st(e.shape.toString(),14);let c="";for(const t in s){const n=s[t];if(null!=n){const r=n.shape||e.shape,s=r.length;c+=`${t}: ${s}D ${s>0?r:""} `}}console.log(`%c${i}\t%c${o}\t%c${u}D ${l}\t%c${p}\t%c${c}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function be(t,e,n,r){const s=ct(e),a=function(t,e,n,r){const s=et(e),a=r[r.length-1],o=new Array(a).fill(0),i=e.length,u="complex64"===n?we(t):t;if(i>1)for(let t=0;t<s/a;t++){const e=t*a;for(let t=0;t<a;t++)o[t]=Math.max(o[t],xe(u[e+t],0,n).length)}return o}(t,e,n,s),o=e.length,i=ke(t,e,n,s,a),u=["Tensor"];return r&&(u.push(`  dtype: ${n}`),u.push(`  rank: ${o}`),u.push(`  shape: [${e}]`),u.push("  values:")),u.push(i.map((t=>"    "+t)).join("\n")),u.join("\n")}function xe(t,e,n){let r;return r=Array.isArray(t)?`${parseFloat(t[0].toFixed(7))} + ${parseFloat(t[1].toFixed(7))}j`:ut(t)?`'${t}'`:"bool"===n?Ne(t):parseFloat(t.toFixed(7)).toString(),st(r,e)}function Ne(t){return 0===t?"false":"true"}function ke(t,e,n,r,s,a=!0){const o="complex64"===n?2:1,i=e[0],u=e.length;if(0===u){if("complex64"===n){return[xe(we(t)[0],0,n)]}return"bool"===n?[Ne(t[0])]:[t[0].toString()]}if(1===u){if(i>20){const e=3*o;let r=Array.from(t.slice(0,e)),a=Array.from(t.slice((i-3)*o,i*o));return"complex64"===n&&(r=we(r),a=we(a)),["["+r.map(((t,e)=>xe(t,s[e],n))).join(", ")+", ..., "+a.map(((t,e)=>xe(t,s[i-3+e],n))).join(", ")+"]"]}return["["+("complex64"===n?we(t):Array.from(t)).map(((t,e)=>xe(t,s[e],n))).join(", ")+"]"]}const p=e.slice(1),l=r.slice(1),c=r[0]*o,h=[];if(i>20){for(let e=0;e<3;e++){const r=e*c,a=r+c;h.push(...ke(t.slice(r,a),p,n,l,s,!1))}h.push("...");for(let e=i-3;e<i;e++){const r=e*c,a=r+c;h.push(...ke(t.slice(r,a),p,n,l,s,e===i-1))}}else for(let e=0;e<i;e++){const r=e*c,a=r+c;h.push(...ke(t.slice(r,a),p,n,l,s,e===i-1))}const d=2===u?",":"";h[0]="["+h[0]+d;for(let t=1;t<h.length-1;t++)h[t]=" "+h[t]+d;let m=",\n";for(let t=2;t<u;t++)m+="\n";return h[h.length-1]=" "+h[h.length-1]+"]"+(a?"":m),h}function we(t){const e=[];for(let n=0;n<t.length;n+=2)e.push([t[n],t[n+1]]);return e}class Te{constructor(t,e,n){if(this.dtype=e,this.shape=t.slice(),this.size=et(t),null!=n){const t=n.length;Y(t===this.size,(()=>`Length of values '${t}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===e)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||function(t,e){let n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else if("bool"===t)n=new Uint8Array(e);else{if("string"!==t)throw new Error(`Unknown data type ${t}`);n=new Array(e)}return n}(e,this.size),this.strides=ct(t)}set(t,...e){0===e.length&&(e=[0]),Y(e.length===this.rank,(()=>`The number of provided coordinates (${e.length}) must match the rank (${this.rank})`));const n=this.locToIndex(e);this.values[n]=t}get(...t){0===t.length&&(t=[0]);let e=0;for(const n of t){if(n<0||n>=this.shape[e]){const e=`Requested out of range element at ${t}.   Buffer shape=${this.shape}`;throw new Error(e)}e++}let n=t[t.length-1];for(let e=0;e<t.length-1;++e)n+=this.strides[e]*t[e];return this.values[n]}locToIndex(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];let e=t[t.length-1];for(let n=0;n<t.length-1;++n)e+=this.strides[n]*t[n];return e}indexToLoc(t){if(0===this.rank)return[];if(1===this.rank)return[t];const e=new Array(this.shape.length);for(let n=0;n<e.length-1;++n)e[n]=Math.floor(t/this.strides[n]),t-=e[n]*this.strides[n];return e[e.length-1]=t,e}get rank(){return this.shape.length}toTensor(){return _e().makeTensor(this.values,this.shape,this.dtype)}}let _e=null,ve=null;class Se{constructor(t,e,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||"float32",this.size=et(t),this.strides=ct(t),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const t=await this.data();return ve.buffer(this.shape,this.dtype,t)}bufferSync(){return ve.buffer(this.shape,this.dtype,this.dataSync())}async array(){const t=await this.data();return dt(this.shape,t,"complex64"===this.dtype)}arraySync(){return dt(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const t=_e().read(this.dataId);if("string"===this.dtype){const e=await t;try{return e.map((t=>me(t)))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return t}dataToGPU(t){return this.throwIfDisposed(),_e().readToGPU(this.dataId,t)}dataSync(){this.throwIfDisposed();const t=_e().readSync(this.dataId);if("string"===this.dtype)try{return t.map((t=>me(t)))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return t}async bytes(){this.throwIfDisposed();const t=await _e().read(this.dataId);return"string"===this.dtype?t:new Uint8Array(t.buffer)}dispose(){this.isDisposed||(_e().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(t=!1){return ve.print(this,t)}clone(){return this.throwIfDisposed(),ve.clone(this)}toString(t=!1){return be(this.dataSync(),this.shape,this.dtype,t)}cast(t){return this.throwIfDisposed(),ve.cast(this,t)}variable(t=!0,e,n){return this.throwIfDisposed(),_e().makeVariable(this,t,e,n)}}Object.defineProperty(Se,Symbol.hasInstance,{value:t=>!!t&&null!=t.data&&null!=t.dataSync&&null!=t.throwIfDisposed}),vt("Tensor",(()=>Se));class Ee extends Se{constructor(t,e,n,r){super(t.shape,t.dtype,t.dataId,r),this.trainable=e,this.name=n}assign(t){if(t.dtype!==this.dtype)throw new Error(`dtype of the new value (${t.dtype}) and previous value (${this.dtype}) must match`);if(!nt(t.shape,this.shape))throw new Error(`shape of the new value (${t.shape}) and previous value (${this.shape}) must match`);_e().disposeTensor(this),this.dataId=t.dataId,_e().incRef(this,null)}dispose(){_e().disposeVariable(this),this.isDisposedInternal=!0}}var $e,Ie,De,Oe,Ae;Object.defineProperty(Ee,Symbol.hasInstance,{value:t=>t instanceof Se&&null!=t.assign&&t.assign instanceof Function}),function(t){t.R0="R0",t.R1="R1",t.R2="R2",t.R3="R3",t.R4="R4",t.R5="R5",t.R6="R6"}($e||($e={})),function(t){t.float32="float32",t.int32="int32",t.bool="int32",t.complex64="complex64"}(Ie||(Ie={})),function(t){t.float32="float32",t.int32="int32",t.bool="bool",t.complex64="complex64"}(De||(De={})),function(t){t.float32="float32",t.int32="float32",t.bool="float32",t.complex64="complex64"}(Oe||(Oe={})),function(t){t.float32="complex64",t.int32="complex64",t.bool="complex64",t.complex64="complex64"}(Ae||(Ae={}));const Me={float32:Oe,int32:Ie,bool:De,complex64:Ae};function Fe(t,e){if(t.dtype===e.dtype)return[t,e];const n=function(t,e){if("string"===t||"string"===e){if("string"===t&&"string"===e)return"string";throw new Error(`Can not upcast ${t} with ${e}`)}return Me[t][e]}(t.dtype,e.dtype);return[t.cast(n),e.cast(n)]}function Ce(t){const e=[];return Ve(t,e,new Set),e}function Ve(t,e,n){if(null==t)return;if(t instanceof Se)return void e.push(t);if(r=t,!Array.isArray(r)&&"object"!=typeof r)return;var r;const s=t;for(const t in s){const r=s[t];n.has(r)||(n.add(r),Ve(r,e,n))}}function Re(t){return null!=t.kernelName}class ze{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((t=>t.name))))}}}dispose(){for(const t in this.registeredVariables)this.registeredVariables[t].dispose()}}class Le{constructor(t){this.ENV=t,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new ze}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const t=this.getSortedBackends();for(let e=0;e<t.length;e++){const n=t[e];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:t,asyncInit:e}=this.initializeBackendsAndReturnBest();if(e)throw new Error(`The highest priority backend '${t}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(t)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(t){if(!(t in this.registry)){if(!(t in this.registryFactory))return null;{const{asyncInit:e}=this.initializeBackend(t);if(e)return null}}return this.registry[t]}findBackendFactory(t){return t in this.registryFactory?this.registryFactory[t].factory:null}registerBackend(t,e,n=1){return t in this.registryFactory?(Mt(`${t} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[t]={factory:e,priority:n},!0)}async setBackend(t){if(null==this.registryFactory[t])throw new Error(`Backend name '${t}' not found in registry`);if(this.backendName=t,null==this.registry[t]){this.backendInstance=null;const{success:e,asyncInit:n}=this.initializeBackend(t);if(!(n?await e:e))return!1}return this.backendInstance=this.registry[t],this.setupRegisteredKernels(),this.profiler=new fe(this.backendInstance),!0}setupRegisteredKernels(){zt(this.backendName).forEach((t=>{null!=t.setupFunc&&t.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(t){zt(t).forEach((e=>{null!=e.disposeFunc&&e.disposeFunc(this.registry[t])}))}initializeBackend(t){const e=this.registryFactory[t];if(null==e)throw new Error(`Cannot initialize backend ${t}, no registration found.`);try{const n=e.factory();if(!n||n instanceof class{refCount(t){return Q("refCount")}incRef(t){return Q("incRef")}timerAvailable(){return!0}time(t){return Q("time")}read(t){return Q("read")}readSync(t){return Q("readSync")}readToGPU(t,e){return Q("readToGPU")}numDataIds(){return Q("numDataIds")}disposeData(t,e){return Q("disposeData")}write(t,e,n){return Q("write")}move(t,e,n,r,s){return Q("move")}memory(){return Q("memory")}floatPrecision(){return Q("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return Q("dispose")}}||"function"!=typeof n.then)return this.registry[t]=n,{success:!0,asyncInit:!1};{const e=++this.pendingBackendInitId,r=n.then((n=>!(e<this.pendingBackendInitId)&&(this.registry[t]=n,this.pendingBackendInit=null,!0))).catch((n=>(e<this.pendingBackendInitId||(this.pendingBackendInit=null,Mt(`Initialization of backend ${t} failed`),Mt(n.stack||n.message)),!1)));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}}catch(e){return Mt(`Initialization of backend ${t} failed`),Mt(e.stack||e.message),{success:!1,asyncInit:!1}}}removeBackend(t){if(!(t in this.registryFactory))throw new Error(`${t} backend not found in registry`);this.backendName===t&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,t in this.registry&&(this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t]),delete this.registryFactory[t],this.backendName===t&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((t,e)=>this.registryFactory[e].priority-this.registryFactory[t].priority))}initializeBackendsAndReturnBest(){const t=this.getSortedBackends();for(let e=0;e<t.length;e++){const n=t[e],{success:r,asyncInit:s}=this.initializeBackend(n);if(s||r)return{name:n,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(t,e){const n=this.state.tensorInfo.get(e),r=n.backend,s=this.readSync(e),a=r.refCount(e);r.disposeData(e,!0),n.backend=t,t.move(e,s,n.shape,n.dtype,a),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(t,e){let n,r=null;if(null==e){if("function"!=typeof t)throw new Error("Please provide a function to tidy()");e=t}else{if("string"!=typeof t&&!(t instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof e)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=t}return this.scopedRun((()=>this.startScope(r)),(()=>this.endScope(n)),(()=>(n=e(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(t,e,n){t();try{const t=n();return e(),t}catch(t){throw e(),t}}nextTensorId(){return Le.nextTensorId++}nextVariableId(){return Le.nextVariableId++}clone(t){const e=Be.runKernel(Et,{x:t}),n={x:t};return this.addTapeNode(this.state.activeScope.name,n,[e],(t=>({x:()=>{const e={x:t},n={dtype:"float32"};return Be.runKernel(St,e,n)}})),[],{}),e}runKernel(t,e,n){null==this.backendName&&this.backend;if(!(null!=Vt(t,this.backendName)))throw new Error(`Kernel '${t}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:t,inputs:e,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(t,e,n){const r=this.backend.numDataIds();let s=0;n.forEach((t=>{s+="complex64"===t.dtype?3:1}));const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],o=r-e-s-a;if(o>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${o} data ids) after running '${t}'`)}runKernelFunc(t){let e,n=[];const r=this.isTapeOn(),s=this.state.numBytes,a=this.state.numTensors;let o,i;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const u=Re(t)?t.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(Re(t)){const{kernelName:e,inputs:s,attrs:a}=t;null==this.backendName&&this.backend;const u=Vt(e,this.backendName);Y(null!=u,(()=>`Cannot find registered kernel '${e}' for backend '${this.backendName}'`)),o=()=>{const t=this.backend.numDataIds();i=u.kernelFunc({inputs:s,attrs:a,backend:this.backend});const o=Array.isArray(i)?i:[i];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(e,t,o);const p=o.map((t=>null!=t.rank?t:this.makeTensorFromTensorInfo(t)));if(r){const t=this.getTensorsForGradient(e,s,p);n=this.saveTensorsForBackwardMode(t)}return p}}else{const{forwardFunc:e}=t,s=t=>{r&&(n=t.map((t=>this.keep(this.clone(t)))))};o=()=>{const t=this.backend.numDataIds();i=this.tidy((()=>e(this.backend,s)));const n=Array.isArray(i)?i:[i];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(u,t,n),n}}const{inputs:p,attrs:l}=t,c=Re(t)?null:t.backwardsFunc;let h;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(h=this.profiler.profileKernel(u,p,(()=>o())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(h),e=h.outputs):e=o()})),r&&this.addTapeNode(u,p,e,c,n,l),this.state.profiling&&this.state.activeProfile.kernels.push({name:u,bytesAdded:this.state.numBytes-s,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-a,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(p).map((t=>null!=p[t]?p[t].shape:null)),outputShapes:e.map((t=>t.shape)),kernelTimeMs:h.timeMs,extraInfo:h.extraInfo}),Array.isArray(i)?e:e[0]}saveTensorsForBackwardMode(t){return t.map((t=>this.keep(this.clone(t))))}getTensorsForGradient(t,e,n){const r=Rt(t);if(null!=r){const t=r.inputsToSave||[],s=r.outputsToSave||[];let a;r.saveAllInputs?(Y(Array.isArray(e),(()=>"saveAllInputs is true, expected inputs to be an array.")),a=Object.keys(e).map((t=>e[t]))):a=t.map((t=>e[t]));const o=n.filter(((t,e)=>s[e]));return a.concat(o)}return[]}makeTensor(t,e,n,r){if(null==t)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let s=t;"string"===n&&ut(t[0])&&(s=t.map((t=>function(t,e="utf-8"){return e=e||"utf-8",kt().platform.encode(t,e)}(t))));const a=r.write(s,e,n),o=new Se(e,n,a,this.nextTensorId());if(this.trackTensor(o,r),"string"===n){const t=this.state.tensorInfo.get(a),e=function(t){if(null==t)return 0;let e=0;return t.forEach((t=>e+=t.length)),e}(s);this.state.numBytes+=e-t.bytes,t.bytes=e}return o}makeTensorFromDataId(t,e,n,r){const s={dataId:t,shape:e,dtype:n=n||"float32"};return this.makeTensorFromTensorInfo(s,r)}makeTensorFromTensorInfo(t,e){const{dataId:n,shape:r,dtype:s}=t,a=new Se(r,s,n,this.nextTensorId());return this.trackTensor(a,e),a}makeVariable(t,e=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==t.dtype&&(t=t.cast(r));const s=new Ee(t,e,n,this.nextTensorId());if(null!=this.state.registeredVariables[s.name])throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}trackTensor(t,e){this.state.numTensors++,"string"===t.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==t.dtype&&"string"!==t.dtype&&(n=t.size*it(t.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(t.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(t.dataId,{backend:e||this.backend,dtype:t.dtype,shape:t.shape,bytes:n})),t instanceof Ee||this.track(t)}incRef(t,e){this.trackTensor(t,e),this.backend.incRef(t.dataId)}removeDataId(t,e){this.state.tensorInfo.has(t)&&this.state.tensorInfo.get(t).backend===e&&(this.state.tensorInfo.delete(t),this.state.numDataBuffers--)}disposeTensor(t){if(!this.state.tensorInfo.has(t.dataId))return;const e=this.state.tensorInfo.get(t.dataId);if(this.state.numTensors--,"string"===t.dtype&&(this.state.numStringTensors--,this.state.numBytes-=e.bytes),"complex64"!==t.dtype&&"string"!==t.dtype){const e=t.size*it(t.dtype);this.state.numBytes-=e}e.backend.disposeData(t.dataId)&&this.removeDataId(t.dataId,e.backend)}disposeVariables(){for(const t in this.state.registeredVariables){const e=this.state.registeredVariables[t];this.disposeVariable(e)}}disposeVariable(t){this.disposeTensor(t),null!=this.state.registeredVariables[t.name]&&delete this.state.registeredVariables[t.name]}memory(){const t=this.backend.memory();return t.numTensors=this.state.numTensors,t.numDataBuffers=this.state.numDataBuffers,t.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(t.unreliable=!0,null==t.reasons&&(t.reasons=[]),t.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),t}async profile(t){this.state.profiling=!0;const e=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await t(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((t=>t.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-e,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const t of this.state.activeProfile.kernels)t.kernelTimeMs=await t.kernelTimeMs,t.extraInfo=await t.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(t,e,n,r,s,a){const o={id:this.state.nextTapeNodeId++,kernelName:t,inputs:e,outputs:n,saved:s},i=Rt(t);null!=i&&(r=i.gradFunc),null!=r&&(o.gradient=t=>(t=t.map(((t,e)=>{if(null==t){const t=n[e],r=ft(t.size,t.dtype);return this.makeTensor(r,t.shape,t.dtype)}return t})),r(t.length>1?t:t[0],s,a))),this.state.activeTape.push(o)}keep(t){return t.kept=!0,t}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(t){const e={track:[],name:"unnamed scope",id:this.state.nextScopeId++};t&&(e.name=t),this.state.scopeStack.push(e),this.state.activeScope=e}endScope(t){const e=Ce(t),n=new Set(e.map((t=>t.id)));for(let t=0;t<this.state.activeScope.track.length;t++){const e=this.state.activeScope.track[t];e.kept||n.has(e.id)||e.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],e.forEach((t=>{t.kept||t.scopeId!==r.id||this.track(t)}))}gradients(t,e,n,r=!1){if(Y(e.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const s=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",t)));Y(s instanceof Se,(()=>"The result y returned by f() must be a tensor."));const a=function(t,e,n){const r={},s={};for(let t=0;t<e.length;t++)r[e[t].id]=!0;for(let n=0;n<t.length;n++){const a=t[n],o=a.inputs;for(const t in o){const n=o[t];let i=!1;for(let t=0;t<e.length;t++)if(r[n.id]){a.outputs.forEach((t=>r[t.id]=!0)),i=!0,s[a.id]=!0;break}if(i)break}}const a={};a[n.id]=!0;const o={};for(let e=t.length-1;e>=0;e--){const n=t[e],r=n.inputs;for(let t=0;t<n.outputs.length;t++)if(a[n.outputs[t].id]){for(const t in r)a[r[t].id]=!0,o[n.id]=!0;break}}const i=[];for(let e=0;e<t.length;e++){const n=t[e];if(s[n.id]&&o[n.id]){const t={};for(const e in n.inputs){const s=n.inputs[e];r[s.id]&&(t[e]=s)}const e=Object.assign({},n);e.inputs=t,e.outputs=n.outputs,i.push(e)}}return i}(this.state.activeTape,e,s);if(!r&&0===a.length&&e.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const t={};t[s.id]=null==n?function(t){const e=mt(et(t),"float32");return Be.makeTensor(e,t,"float32")}(s.shape):n,function(t,e,n,r){for(let s=e.length-1;s>=0;s--){const a=e[s],o=[];if(a.outputs.forEach((e=>{const n=t[e.id];null!=n?o.push(n):o.push(null)})),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const i=a.gradient(o);for(const e in a.inputs){if(!(e in i))throw new Error(`Cannot backprop through input ${e}. Available gradients found: ${Object.keys(i)}.`);const s=n((()=>i[e]()));if("float32"!==s.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${e} must have 'float32' dtype, but has '${s.dtype}'`);const o=a.inputs[e];if(!nt(s.shape,o.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${e}' has shape '${s.shape}', which does not match the shape of the input '${o.shape}'`);if(null==t[o.id])t[o.id]=s;else{const e=t[o.id];t[o.id]=r(e,s),e.dispose()}}}}(t,a,(t=>this.tidy(t)),Pe);const r=e.map((e=>t[e.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((t=>{for(const e of t.saved)e.dispose()})),this.state.activeTape=null),{value:s,grads:r}}))}customGrad(t){return Y(lt(t),(()=>"The f passed in customGrad(f) must be a function.")),(...e)=>{let n;Y(e.every((t=>t instanceof Se)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const r={};e.forEach(((t,e)=>{r[e]=t}));return this.runKernelFunc({forwardFunc:(r,s)=>(n=t(...e,s),Y(n.value instanceof Se,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),Y(lt(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(t,r)=>{const s=n.gradFunc(t,r),a=Array.isArray(s)?s:[s];Y(a.length===e.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),Y(a.every((t=>t instanceof Se)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const o={};return a.forEach(((t,e)=>{o[e]=()=>t})),o},inputs:r})}}readSync(t){return this.state.tensorInfo.get(t).backend.readSync(t)}read(t){return this.state.tensorInfo.get(t).backend.read(t)}readToGPU(t,e){return this.state.tensorInfo.get(t).backend.readToGPU(t,e)}async time(t){const e=de(),n=await this.backend.time(t);return n.wallMs=de()-e,n}track(t){return null!=this.state.activeScope&&(t.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(t)),t}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new ze;for(const t in this.registry)this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}Le.nextTensorId=0,Le.nextVariableId=0;const Be=function(){const t=_t();if(null==t._tfengine){const e=new xt(t);t._tfengine=new Le(e)}var e;return e=t._tfengine.ENV,Tt=e,_e=()=>t._tfengine,t._tfengine}();function Pe(t,e){const n={a:t,b:e};return Be.runKernel("Add",n)}function Ke(t,e){let n=t;if(ot(t))return"string"===e?[]:[t.length];if(!Array.isArray(t))return[];const r=[];for(;Array.isArray(n)||ot(n)&&"string"!==e;)r.push(n.length),n=n[0];return Array.isArray(t)&&kt().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&qe(t,r,[]),r}function qe(t,e,n){if(n=n||[],!Array.isArray(t)&&!ot(t))return void Y(0===e.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${e[0]} elements`));Y(e.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${t.length} elements`)),Y(t.length===e[0],(()=>`Element arr[${n.join("][")}] should have ${e[0]} elements, but has ${t.length} elements`));const r=e.slice(1);for(let e=0;e<t.length;++e)qe(t[e],r,n.concat(e))}function Ue(t,e,n,r){if("string_or_numeric"!==t){if(null==t)throw new Error("Expected dtype cannot be null.");if("numeric"!==t&&t!==e||"numeric"===t&&"string"===e)throw new Error(`Argument '${n}' passed to '${r}' must be ${t} tensor, but got ${e} tensor`)}}function je(t,e,n,r="numeric"){if(t instanceof Se)return Ue(r,t.dtype,e,n),t;let s=pt(t);if("string"!==s&&["bool","int32","float32"].indexOf(r)>=0&&(s=r),Ue(r,s,e,n),null==t||!ot(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t){const r=null==t?"null":t.constructor.name;throw new Error(`Argument '${e}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const a=Ke(t,s);ot(t)||Array.isArray(t)||(t=[t]);const o="string"!==s?he(t,s):tt(t,[],!0);return Be.makeTensor(o,a,s)}function We(t,e,n,r="numeric"){if(!Array.isArray(t))throw new Error(`Argument ${e} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return t.map(((t,s)=>je(t,`${e}[${s}]`,n,r)))}function He(t){const e=Object.keys(t);if(1!==e.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${e.length} keys.`);let n=e[0];const r=t[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+="__op";const s=(...t)=>{Be.startScope(n);try{const e=r(...t);return gt(e)&&console.error("Cannot return a Promise inside of tidy."),Be.endScope(e),e}catch(t){throw Be.endScope(null),t}};return Object.defineProperty(s,"name",{value:n,configurable:!0}),s}const Ge=He({abs_:function(t){const e=je(t,"x","abs");if("complex64"===e.dtype){const t={x:e};return Be.runKernel("ComplexAbs",t)}{const t={x:e};return Be.runKernel("Abs",t)}}});const Ze=He({acos_:function(t){const e={x:je(t,"x","acos")};return Be.runKernel("Acos",e)}});const Qe=He({acosh_:function(t){const e={x:je(t,"x","acosh")};return Be.runKernel("Acosh",e)}});const Ye=He({add_:function(t,e){let n=je(t,"a","add"),r=je(e,"b","add");[n,r]=Fe(n,r);const s={a:n,b:r};return Be.runKernel("Add",s)}});const Xe=He({addN_:function(t){Y(Array.isArray(t),(()=>"The argument passed to tf.addN() must be a list of tensors")),Y(t.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${t.length}`));const e=t.map(((t,e)=>je(t,`tensors${e}`,"addN"))),n=e[0];e.forEach((t=>{if(t.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),e.forEach((t=>{if(!nt(t.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const r=e;return Be.runKernel("AddN",r)}});const Je=He({all_:function(t,e=null,n=!1){const r={x:je(t,"x","all","bool")},s={axis:e,keepDims:n};return Be.runKernel("All",r,s)}});const tn=He({any_:function(t,e=null,n=!1){const r={x:je(t,"x","any","bool")},s={axis:e,keepDims:n};return Be.runKernel("Any",r,s)}});const en=He({argMax_:function(t,e=0){const n={x:je(t,"x","argMax")},r={axis:e};return Be.runKernel("ArgMax",n,r)}});const nn=He({argMin_:function(t,e=0){const n={x:je(t,"x","argMin")},r={axis:e};return Be.runKernel("ArgMin",n,r)}});const rn=He({asin_:function(t){const e={x:je(t,"x","asin")};return Be.runKernel("Asin",e)}});const sn=He({asinh_:function(t){const e={x:je(t,"x","asinh")};return Be.runKernel("Asinh",e)}});const an=He({atan_:function(t){const e={x:je(t,"x","atan")};return Be.runKernel("Atan",e)}});const on=He({atan2_:function(t,e){let n=je(t,"a","atan2"),r=je(e,"b","atan2");[n,r]=Fe(n,r);const s={a:n,b:r};return Be.runKernel("Atan2",s)}});const un=He({atanh_:function(t){const e={x:je(t,"x","atanh")};return Be.runKernel("Atanh",e)}});const pn=He({cast_:function(t,e){const n=je(t,"x","cast");if(!function(t){return"bool"===t||"complex64"===t||"float32"===t||"int32"===t||"string"===t}(e))throw new Error(`Failed to cast to unknown dtype ${e}`);if("string"===e&&"string"!==n.dtype||"string"!==e&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const r={x:n},s={dtype:e};return Be.runKernel(St,r,s)}});function ln(t,e,n,r,s,a,o=!1,i="channelsLast"){let[u,p,l,c]=[-1,-1,-1,-1];if("channelsLast"===i)[u,p,l,c]=t;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[u,c,p,l]=t}const[h,d,,m]=e,[f,y]=cn(n),[g,b]=cn(r),x=hn(h,g),N=hn(d,b),{padInfo:k,outHeight:w,outWidth:T}=function(t,e,n,r,s,a,o,i,u){let p,l,c;if("number"==typeof t){p={top:t,bottom:t,left:t,right:t,type:0===t?"VALID":"NUMBER"};const s=function(t,e,n,r,s){null==r&&(r=function(t,e,n,r=1){const s=hn(e,r);return Math.floor((t[0]*(n-1)-n+s)/2)}(t,e,n));const a=t[0],o=t[1],i=dn((a-e+2*r)/n+1,s),u=dn((o-e+2*r)/n+1,s);return[i,u]}([e,n],a,r,t,i);l=s[0],c=s[1]}else if("same"===t){l=Math.ceil(e/r),c=Math.ceil(n/s);const t=Math.max(0,(l-1)*r+a-e),i=Math.max(0,(c-1)*s+o-n),u=Math.floor(t/2),h=t-u,d=Math.floor(i/2);p={top:u,bottom:h,left:d,right:i-d,type:"SAME"}}else if("valid"===t)p={top:0,bottom:0,left:0,right:0,type:"VALID"},l=Math.ceil((e-a+1)/r),c=Math.ceil((n-o+1)/s);else{if("object"!=typeof t)throw Error(`Unknown padding parameter: ${t}`);{const h="channelsLast"===u?t[1][0]:t[2][0],d="channelsLast"===u?t[1][1]:t[2][1],m="channelsLast"===u?t[2][0]:t[3][0],f="channelsLast"===u?t[2][1]:t[3][1];p={top:h,bottom:d,left:m,right:f,type:0===h&&0===d&&0===m&&0===f?"VALID":"EXPLICIT"},l=dn((e-a+h+d)/r+1,i),c=dn((n-o+m+f)/s+1,i)}}return{padInfo:p,outHeight:l,outWidth:c}}(s,p,l,f,y,x,N,a,i),_=o?m*c:m;let v;return"channelsFirst"===i?v=[u,_,w,T]:"channelsLast"===i&&(v=[u,w,T,_]),{batchSize:u,dataFormat:i,inHeight:p,inWidth:l,inChannels:c,outHeight:w,outWidth:T,outChannels:_,padInfo:k,strideHeight:f,strideWidth:y,filterHeight:h,filterWidth:d,effectiveFilterHeight:x,effectiveFilterWidth:N,dilationHeight:g,dilationWidth:b,inShape:t,outShape:v,filterShape:e}}function cn(t){return"number"==typeof t?[t,t,t]:2===t.length?[t[0],t[1],1]:t}function hn(t,e){return e<=1?t:t+(t-1)*(e-1)}function dn(t,e){if(!e)return Math.trunc(t);switch(e){case"round":return Math.round(t);case"ceil":return Math.ceil(t);case"floor":return Math.floor(t);default:throw new Error(`Unknown roundingMode ${e}`)}}function mn(t){const[e,n,r]=cn(t);return 1===e&&1===n&&1===r}function fn(t,e){return mn(t)||mn(e)}function yn(t,e,n){if(null!=n){if("string"==typeof e)throw Error(`Error in ${t}: pad must be an integer when using dimRoundingMode ${n} but got pad ${e}.`);if("number"==typeof e)Y(rt(e),(()=>`Error in ${t}: pad must be an integer when using dimRoundingMode ${n} but got pad ${e}.`));else{if("object"!=typeof e)throw Error(`Error in ${t}: Unknown padding parameter: ${e}`);e.forEach((e=>{e.forEach((e=>{Y(rt(e),(()=>`Error in ${t}: pad must be an integer when using dimRoundingMode ${n} but got pad ${e}.`))}))}))}}}const gn=He({reshape_:function(t,e){const n={x:je(t,"x","reshape","string_or_numeric")},r={shape:e};return Be.runKernel("Reshape",n,r)}});const bn=He({avgPool_:function(t,e,n,r,s){const a=je(t,"x","avgPool","float32");Y(fn(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let o=a,i=!1;3===a.rank&&(i=!0,o=gn(a,[1,a.shape[0],a.shape[1],a.shape[2]])),Y(4===o.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${o.rank}.`)),yn("avgPool",r,s);const u={x:o},p={filterSize:e,strides:n,pad:r,dimRoundingMode:s};let l=Be.runKernel("AvgPool",u,p);return l=pn(l,a.dtype),i?gn(l,[l.shape[1],l.shape[2],l.shape[3]]):l}});const xn=He({avgPool3d_:function(t,e,n,r,s,a="NDHWC"){const o=je(t,"x","avgPool3d","float32");let i=o,u=!1;4===o.rank&&(u=!0,i=gn(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),Y(5===i.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${i.rank}.`)),Y("NDHWC"===a,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),yn("avgPool3d",r,s);const p={x:i},l={filterSize:e,strides:n,pad:r,dimRoundingMode:s,dataFormat:a};let c=Be.runKernel("AvgPool3D",p,l);return c=pn(c,i.dtype),u?gn(c,[c.shape[1],c.shape[2],c.shape[3],c.shape[4]]):c}});const Nn=He({clone_:function(t){const e={x:je(t,"x","clone","string_or_numeric")};return Be.runKernel(Et,e)}});const kn=He({concat_:function(t,e=0){Y(t.length>=1,(()=>"Pass at least one tensor to concat"));const n=We(t,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((t=>{if("complex64"!==t.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${t.dtype}. `)})),1===n.length)return Nn(n[0]);const r=n,s={axis:e};return Be.runKernel("Concat",r,s)}});const wn=He({matMul_:function(t,e,n=!1,r=!1){let s=je(t,"a","matMul"),a=je(e,"b","matMul");[s,a]=Fe(s,a);const o={a:s,b:a},i={transposeA:n,transposeB:r};return Be.runKernel("BatchMatMul",o,i)}});const Tn=He({mul_:function(t,e){let n=je(t,"a","mul"),r=je(e,"b","mul");[n,r]=Fe(n,r);const s={a:n,b:r};return Be.runKernel("Multiply",s)}});const _n=He({sigmoid_:function(t){const e={x:je(t,"x","sigmoid","float32")};return Be.runKernel("Sigmoid",e)}});const vn=He({slice_:function(t,e,n){const r=je(t,"x","slice","string_or_numeric");if(0===r.rank)throw new Error("Slicing scalar is not possible");const s={x:r},a={begin:e,size:n};return Be.runKernel("Slice",s,a)}});const Sn=He({tanh_:function(t){const e={x:je(t,"x","tanh","float32")};return Be.runKernel("Tanh",e)}});He({basicLSTMCell_:function(t,e,n,r,s,a){const o=je(t,"forgetBias","basicLSTMCell"),i=je(e,"lstmKernel","basicLSTMCell"),u=je(n,"lstmBias","basicLSTMCell"),p=je(r,"data","basicLSTMCell"),l=je(s,"c","basicLSTMCell"),c=je(a,"h","basicLSTMCell"),h=kn([p,c],1),d=wn(h,i),m=Ye(d,u),f=m.shape[0],y=m.shape[1]/4,g=[f,y],b=vn(m,[0,0],g),x=vn(m,[0,y],g),N=vn(m,[0,2*y],g),k=vn(m,[0,3*y],g),w=Ye(Tn(_n(b),Sn(x)),Tn(l,_n(Ye(o,N))));return[w,Tn(Sn(w),_n(k))]}});const En=He({batchToSpaceND_:function(t,e,n){const r=je(t,"x","batchToSpaceND"),s=e.reduce(((t,e)=>t*e));Y(r.rank>=1+e.length,(()=>`input rank is ${r.rank} but should be > than blockShape.length ${e.length}`)),Y(n.length===e.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${e.length}`)),Y(r.shape[0]%s==0,(()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${e.join(" * ")} === ${s}`));const a={x:r},o={blockShape:e,crops:n};return Be.runKernel("BatchToSpaceND",a,o)}});const $n=He({batchNorm_:function(t,e,n,r,s,a){null==a&&(a=.001);const o=je(t,"x","batchNorm"),i=je(e,"mean","batchNorm"),u=je(n,"variance","batchNorm");let p,l;null!=s&&(p=je(s,"scale","batchNorm")),null!=r&&(l=je(r,"offset","batchNorm")),Y(i.rank===u.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),Y(null==l||i.rank===l.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),Y(null==p||i.rank===p.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const c={x:function(t){let e;return e=0===t.rank||1===t.rank?gn(t,[1,1,1,t.size]):2===t.rank?gn(t,[1,1,t.shape[0],t.shape[1]]):3===t.rank?gn(t,[1,t.shape[0],t.shape[1],t.shape[2]]):t,e}(o),scale:p,offset:l,mean:i,variance:u},h={varianceEpsilon:a},d=Be.runKernel("FusedBatchNorm",c,h);return gn(d,o.shape)}});He({batchNorm2d_:function(t,e,n,r,s,a){const o=je(t,"x","batchNorm"),i=je(e,"mean","batchNorm"),u=je(n,"variance","batchNorm");let p,l;return null!=s&&(p=je(s,"scale","batchNorm")),null!=r&&(l=je(r,"offset","batchNorm")),Y(2===o.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${o.rank}.`)),Y(2===i.rank||1===i.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${i.rank}.`)),Y(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=p&&Y(2===p.rank||1===p.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${p.rank}.`)),null!=l&&Y(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${l.rank}.`)),$n(o,i,u,l,p,a)}}),He({batchNorm3d_:function(t,e,n,r,s,a){const o=je(t,"x","batchNorm"),i=je(e,"mean","batchNorm"),u=je(n,"variance","batchNorm");let p,l;return null!=s&&(p=je(s,"scale","batchNorm")),null!=r&&(l=je(r,"offset","batchNorm")),Y(3===o.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${o.rank}.`)),Y(3===i.rank||1===i.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${i.rank}.`)),Y(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=p&&Y(3===p.rank||1===p.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${p.rank}.`)),null!=l&&Y(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${l.rank}.`)),$n(o,i,u,l,p,a)}}),He({batchNorm4d_:function(t,e,n,r,s,a){const o=je(t,"x","batchNorm"),i=je(e,"mean","batchNorm"),u=je(n,"variance","batchNorm");let p,l;return null!=s&&(p=je(s,"scale","batchNorm")),null!=r&&(l=je(r,"offset","batchNorm")),Y(4===o.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${o.rank}.`)),Y(4===i.rank||1===i.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${i.rank}.`)),Y(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=p&&Y(4===p.rank||1===p.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${p.rank}.`)),null!=l&&Y(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${l.rank}.`)),$n(o,i,u,l,p,a)}});const In=He({bincount_:function(t,e,n){const r=je(t,"x","bincount"),s=je(e,"weights","bincount");Y("int32"===r.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${r.dtype}`)),Y(n>=0,(()=>`size must be non-negative, but got ${n}.`)),Y(s.size===r.size||0===s.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${r.shape}, weights shape: ${s.shape}.`));const a={x:r,weights:s},o={size:n};return Be.runKernel("Bincount",a,o)}});const Dn=He({broadcastArgs_:function(t,e){const n=je(t,"s0","broadcastArgs","int32"),r=je(e,"s1","broadcastArgs","int32");if(1!==n.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);if(1!==r.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${r.rank}`);const s={s0:n,s1:r};return Be.runKernel("BroadcastArgs",s)}});const On=He({broadcastTo_:function(t,e){let n=je(t,"broadcastTo","x");const r=n.shape;if(e.some((t=>!(t>0)||t%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${e}].`);if(e.length<n.rank)throw new Error(`broadcastTo(): shape.length=${e.length} < input.rank=${n.rank}.`);if(e.length>n.rank){const t=n.shape.slice();for(;t.length<e.length;)t.unshift(1);n=gn(n,t)}const s=n.shape,a=Array.from(e);for(let t=e.length-1;t>=0;t--)if(s[t]===e[t])a[t]=1;else if(1!==n.shape[t])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${e}].`);if(0===a.map(((t,e)=>t>1?e:-1)).filter((t=>t>=0)).length)return Nn(n);const o={x:n},i={reps:a};return Be.runKernel($t,o,i)}});function An(t,e="float32",n){return e=e||"float32",yt(t),new Te(t,e,n)}const Mn=He({ceil_:function(t){const e={x:je(t,"x","ceil","float32")};return Be.runKernel("Ceil",e)}});const Fn=He({clipByValue_:function(t,e,n){const r=je(t,"x","clipByValue");Y(e<=n,(()=>`Error in clip: min (${e}) must be less than or equal to max (${n}).`));const s={x:r},a={clipValueMin:e,clipValueMax:n};return Be.runKernel("ClipByValue",s,a)}});const Cn=He({complex_:function(t,e){const n=je(t,"real","complex"),r=je(e,"imag","complex");X(n.shape,r.shape,`real and imag shapes, ${n.shape} and ${r.shape}, must match in call to tf.complex().`);const s={real:n,imag:r};return Be.runKernel("Complex",s)}});He({concat1d_:function(t){return kn(t,0)}}),He({concat2d_:function(t,e){return kn(t,e)}}),He({concat3d_:function(t,e){return kn(t,e)}}),He({concat4d_:function(t,e){return kn(t,e)}});const Vn=He({conv2d_:function(t,e,n,r,s="NHWC",a=[1,1],o){const i=je(t,"x","conv2d","float32"),u=je(e,"filter","conv2d","float32");let p=i,l=!1;3===i.rank&&(l=!0,p=gn(i,[1,i.shape[0],i.shape[1],i.shape[2]])),Y(4===p.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${p.rank}.`)),Y(4===u.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${u.rank}.`)),yn("conv2d",r,o);const c="NHWC"===s?p.shape[3]:p.shape[1];Y(c===u.shape[2],(()=>`Error in conv2d: depth of input (${c}) must match input depth for filter ${u.shape[2]}.`)),Y(fn(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const h={x:p,filter:u},d={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o},m=Be.runKernel("Conv2D",h,d);return l?gn(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});const Rn=He({conv1d_:function(t,e,n,r,s="NWC",a=1,o){const i=je(t,"x","conv1d"),u=je(e,"filter","conv1d");let p=i,l=!1;2===i.rank&&(l=!0,p=gn(i,[1,i.shape[0],i.shape[1]])),Y(3===p.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${p.rank}.`)),Y(3===u.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${u.rank}.`)),yn("conv1d",r,o),Y(p.shape[2]===u.shape[1],(()=>`Error in conv1d: depth of input (${p.shape[2]}) must match input depth for filter ${u.shape[1]}.`)),Y(fn(n,a),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`)),Y("NWC"===s,(()=>`Error in conv1d: got dataFormat of ${s} but only NWC is currently supported.`));const c=gn(u,[1,u.shape[0],u.shape[1],u.shape[2]]),h=gn(p,[p.shape[0],1,p.shape[1],p.shape[2]]),d=Vn(h,c,[1,n],r,"NHWC",[1,a],o);return gn(d,l?[d.shape[2],d.shape[3]]:[d.shape[0],d.shape[2],d.shape[3]])}});const zn=He({conv2DBackpropInput_:function(t,e,n,r,s,a="NHWC",o){Y(t.length===e.rank,(()=>`Length of inShape (${t.length}) and rank of dy (${e.rank}) must match`));let i=t,u=e,p=!1;3===e.rank&&(p=!0,u=gn(e,[1,e.shape[0],e.shape[1],e.shape[2]]),i=[1,t[0],t[1],t[2]]),Y(4===i.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${i.length}.`)),Y(4===u.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${u.rank}`)),Y(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const l="NHWC"===a?i[3]:i[1],c="NHWC"===a?u.shape[3]:u.shape[1];Y(l===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[2]}.`)),Y(c===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${c}) must match output depth for filter ${n.shape[3]}.`)),yn("conv2dDerInput",s,o);const h={dy:u,filter:n},d={strides:r,pad:s,dataFormat:a,dimRoundingMode:o,inputShape:i},m=Be.runKernel("Conv2DBackpropInput",h,d);return p?gn(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});const Ln=He({conv2dTranspose_:function(t,e,n,r,s,a){const o=je(t,"x","conv2dTranspose"),i=je(e,"filter","conv2dTranspose");return zn(n,o,i,r,s,"NHWC",a)}});const Bn=He({conv3d_:function(t,e,n,r,s="NDHWC",a=[1,1,1]){const o=je(t,"x","conv3d"),i=je(e,"filter","conv3d");let u=o,p=!1;4===o.rank&&(p=!0,u=gn(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),Y(5===u.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${u.rank}.`)),Y(5===i.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${i.rank}.`)),Y(u.shape[4]===i.shape[3],(()=>`Error in conv3d: depth of input (${u.shape[4]}) must match input depth for filter ${i.shape[3]}.`)),Y(fn(n,a),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),Y("NDHWC"===s,(()=>`Error in conv3d: got dataFormat of ${s} but only NDHWC is currently supported.`));const l={x:u,filter:i},c={strides:n,pad:r,dataFormat:s,dilations:a},h=Be.runKernel("Conv3D",l,c);return p?gn(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const Pn=He({conv3DBackpropInput_:function(t,e,n,r,s){Y(t.length===e.rank,(()=>`Length of inShape (${t.length}) and rank of dy (${e.rank}) must match`));let a=t,o=e,i=!1;4===e.rank&&(i=!0,o=gn(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]),a=[1,t[0],t[1],t[2],t[3]]);const u=a[4],p=o.shape[4];Y(5===a.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${a.length}.`)),Y(5===o.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${o.rank}`)),Y(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),Y(u===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${u}) must match input depth for filter ${n.shape[3]}.`)),Y(p===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${p}) must match output depth for filter ${n.shape[4]}.`));const l={dy:o,filter:n},c={pad:s,strides:r,inputShape:a},h=Be.runKernel("Conv3DBackpropInputV2",l,c);return i?gn(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});He({conv3dTranspose_:function(t,e,n,r,s){const a=je(t,"x","conv3dTranspose"),o=je(e,"filter","conv3dTranspose");return Pn(n,a,o,r,s)}});const Kn=He({cos_:function(t){const e={x:je(t,"x","cos","float32")};return Be.runKernel("Cos",e)}});const qn=He({cosh_:function(t){const e={x:je(t,"x","cosh","float32")};return Be.runKernel("Cosh",e)}});const Un=He({cumprod_:function(t,e=0,n=!1,r=!1){const s={x:je(t,"x","cumprod")},a={axis:e,exclusive:n,reverse:r};return Be.runKernel("Cumprod",s,a)}});const jn=He({cumsum_:function(t,e=0,n=!1,r=!1){const s={x:je(t,"x","cumsum")},a={axis:e,exclusive:n,reverse:r};return Be.runKernel("Cumsum",s,a)}});const Wn=He({denseBincount_:function(t,e,n,r=!1){const s=je(t,"x","denseBincount"),a=je(e,"weights","denseBincount");Y("int32"===s.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${s.dtype}`)),Y(s.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${s.rank}.`)),Y(n>=0,(()=>`size must be non-negative, but got ${n}.`)),Y(a.size===s.size||0===a.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${s.shape}, weights shape: ${a.shape}.`));const o={x:s,weights:a},i={size:n,binaryOutput:r};return Be.runKernel("DenseBincount",o,i)}});const Hn=He({depthToSpace_:function(t,e,n="NHWC"){const r=je(t,"x","depthToSpace","float32"),s="NHWC"===n?r.shape[1]:r.shape[2],a="NHWC"===n?r.shape[2]:r.shape[3],o="NHWC"===n?r.shape[3]:r.shape[1];Y(e>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${e}`)),Y(s*e>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${s} and ${e}  for depthToSpace with input shape\n    ${r.shape}`)),Y(a*e>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${e} for depthToSpace with input shape\n        ${r.shape}`)),Y(o%(e*e)==0,(()=>`Dimension size must be evenly divisible by ${e*e} but is ${o} for depthToSpace with input shape ${r.shape}`));const i={x:r},u={blockSize:e,dataFormat:n};return Be.runKernel("DepthToSpace",i,u)}});const Gn=He({depthwiseConv2d_:function(t,e,n,r,s="NHWC",a=[1,1],o){const i=je(t,"x","depthwiseConv2d","float32"),u=je(e,"filter","depthwiseConv2d","float32");let p=i,l=!1;3===i.rank&&(l=!0,p=gn(i,[1,i.shape[0],i.shape[1],i.shape[2]])),Y(4===p.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${p.rank}.`)),Y(4===u.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${u.rank}.`)),Y(p.shape[3]===u.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${p.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`)),yn("depthwiseConv2d",r,o);const c={x:p,filter:u},h={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o},d=Be.runKernel("DepthwiseConv2dNative",c,h);return l?gn(d,[d.shape[1],d.shape[2],d.shape[3]]):d}});He({diag_:function(t){const e={x:je(t,"x","diag")};return Be.runKernel("Diag",e)}});const Zn=He({dilation2d_:function(t,e,n,r,s=[1,1],a="NHWC"){const o=je(t,"x","dilation2d"),i=je(e,"filter","dilation2d");Y(3===o.rank||4===o.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${o.rank}.`)),Y(3===i.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${i.rank}.`)),Y("NHWC"===a,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${a}`));let u=o,p=!1;3===o.rank&&(u=gn(o,[1,o.shape[0],o.shape[1],o.shape[2]]),p=!0);const l={x:u,filter:i},c={strides:n,pad:r,dilations:s},h=Be.runKernel("Dilation2D",l,c);return p?gn(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const Qn=He({floorDiv_:function(t,e){let n=je(t,"a","floorDiv"),r=je(e,"b","floorDiv");[n,r]=Fe(n,r);const s={a:n,b:r};return Be.runKernel("FloorDiv",s)}});const Yn=He({div_:function(t,e){let n=je(t,"a","div"),r=je(e,"b","div");if([n,r]=Fe(n,r),"int32"===n.dtype&&"int32"===r.dtype)return Qn(n,r);const s={a:n,b:r};return Be.runKernel("RealDiv",s,{})}});function Xn(t,e){const n=[],r=Math.max(t.length,e.length);for(let s=0;s<r;s++){let r=t[t.length-s-1];null==r&&(r=1);let a=e[e.length-s-1];if(null==a&&(a=1),1===r)n.unshift(a);else if(1===a)n.unshift(r);else{if(r!==a){throw Error(`Operands could not be broadcast together with shapes ${t} and ${e}.`)}n.unshift(r)}}return n}const Jn=He({equal_:function(t,e){let n=je(t,"a","equal","string_or_numeric"),r=je(e,"b","equal","string_or_numeric");[n,r]=Fe(n,r),Xn(n.shape,r.shape);const s={a:n,b:r};return Be.runKernel("Equal",s)}});const tr=He({where_:function(t,e,n){const r=je(e,"a","where"),s=je(n,"b","where"),a=je(t,"condition","where","bool"),o=Xn(Xn(a.shape,r.shape),s.shape),i={condition:On(a,o),t:On(r,o),e:On(s,o)};return Be.runKernel("Select",i)}});const er=He({zerosLike_:function(t){const e={x:je(t,"x","zerosLike")};return Be.runKernel("ZerosLike",e)}});const nr=He({divNoNan_:function(t,e){let n=je(t,"a","div"),r=je(e,"b","div");[n,r]=Fe(n,r);const s=Yn(n,r),a=er(s),o=Jn(r,a);return tr(o,a,s)}});He({dot_:function(t,e){const n=je(t,"t1","dot"),r=je(e,"t2","dot");Y(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`));const s=1===n.rank?n.size:n.shape[1],a=1===r.rank?r.size:r.shape[0];if(Y(s===a,(()=>`Error in dot: inner dimensions of inputs must match, but got ${s} and ${a}.`)),1===n.rank&&1===r.rank){const t=gn(n,[1,-1]),e=gn(r,[-1,1]),s=wn(t,e);return gn(s,[])}if(1===n.rank&&2===r.rank){const t=gn(n,[1,-1]),e=gn(r,[r.shape[0],r.shape[1]]),s=wn(t,e);return gn(s,[s.size])}if(2===n.rank&&1===r.rank){const t=gn(r,[-1,1]),e=wn(n,t);return gn(e,[e.size])}{const t=gn(r,[r.shape[0],r.shape[1]]);return wn(n,t)}}});const rr=He({einsum_:function(t,...e){const n=e.map(((t,e)=>je(t,`tensors${e}`,"einsum"))),r={equation:t};return Be.runKernel("Einsum",n,r)}});const sr=He({elu_:function(t){const e={x:je(t,"x","elu","float32")};return Be.runKernel("Elu",e)}});const ar=He({erf_:function(t){let e=je(t,"x","erf");Y("int32"===e.dtype||"float32"===e.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===e.dtype&&(e=pn(e,"float32"));const n={x:e};return Be.runKernel("Erf",n)}});function or(t,e){return function(t,e,n){const r=t.length+e.length,s=[];let a=0,o=0;for(let i=0;i<r;i++)-1===n.indexOf(i)?s.push(t[a++]):s.push(e[o++]);return s}(t,e.map((t=>1)),e)}const ir=He({max_:function(t,e=null,n=!1){const r={x:je(t,"x","max")},s={reductionIndices:e,keepDims:n};return Be.runKernel("Max",r,s)}});const ur=He({min_:function(t,e=null,n=!1){const r={x:je(t,"x","min")},s={axis:e,keepDims:n};return Be.runKernel("Min",r,s)}});const pr=He({pow_:function(t,e){let n=je(t,"base","pow"),r=je(e,"exp","pow");[n,r]=Fe(n,r);const s={a:n,b:r};return Be.runKernel("Pow",s)}});function lr(t,e,n,r){if(null==r&&(r=pt(t)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!ot(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=e){yt(e);const t=et(e),r=et(n);Y(t===r,(()=>`Based on the provided shape, [${e}], the tensor should have ${t} values but has ${r}`));for(let t=0;t<n.length;++t){const r=n[t],s=t!==n.length-1||r!==et(e.slice(t));Y(n[t]===e[t]||!s,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${e}). `))}}return ot(t)||Array.isArray(t)||(t=[t]),e=e||n,t="string"!==r?he(t,r):tt(t,[],!0),Be.makeTensor(t,e,r)}function cr(t,e){if((ot(t)&&"string"!==e||Array.isArray(t))&&"complex64"!==e)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===e&&ot(t)&&!(t instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return lr(t,[],[],e)}const hr=He({sqrt_:function(t){const e={x:je(t,"x","sqrt","float32")};return Be.runKernel("Sqrt",e)}});const dr=He({square_:function(t){const e=je(t,"x","square");return Be.runKernel("Square",{x:e},{})}});const mr=He({sum_:function(t,e=null,n=!1){let r=je(t,"x","sum");"bool"===r.dtype&&(r=pn(r,"int32"));const s={x:r},a={axis:e,keepDims:n};return Be.runKernel("Sum",s,a)}});function fr(t,e,n=null){if(0===t.rank)return Ge(t);if(1!==t.rank&&null===n)return fr(gn(t,[-1]),e,n);if(1===t.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===e)return mr(Ge(t),n);if(e===1/0)return ir(Ge(t),n);if(e===-1/0)return ur(Ge(t),n);if("euclidean"===e||2===e)return hr(mr(pr(Ge(t),cr(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${e}`)}if(Array.isArray(n)&&2===n.length){if(1===e)return ir(mr(Ge(t),n[0]),n[1]-1);if(e===1/0)return ir(mr(Ge(t),n[1]),n[0]);if(e===-1/0)return ur(mr(Ge(t),n[1]),n[0]);if("fro"===e||"euclidean"===e)return hr(mr(dr(t),n));throw new Error(`Error in norm: invalid ord value: ${e}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const yr=He({norm_:function(t,e="euclidean",n=null,r=!1){const s=fr(t=je(t,"x","norm"),e,n);let a=s.shape;if(r){const e=at(n,t.shape);a=or(s.shape,e)}return gn(s,a)}});const gr=He({euclideanNorm_:function(t,e=null,n=!1){return yr(t,"euclidean",e,n)}});const br=He({exp_:function(t){const e={x:je(t,"x","exp")};return Be.runKernel("Exp",e)}});const xr=He({expandDims_:function(t,e=0){const n=je(t,"x","expandDims","string_or_numeric");Y(e<=n.rank,(()=>"Axis must be <= rank of the tensor"));const r={input:n},s={dim:e};return Be.runKernel("ExpandDims",r,s)}});const Nr=He({expm1_:function(t){const e={x:je(t,"x","expm1")};return Be.runKernel("Expm1",e)}});const kr=He({tile_:function(t,e){const n=je(t,"x","tile","string_or_numeric");Y(n.rank===e.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${e}.`));const r={x:n},s={reps:e};return Be.runKernel($t,r,s)}});const wr=He({eye_:function(t,e,n,r="float32"){null==e&&(e=t);const s=An([t,e],r),a=t<=e?t:e;for(let t=0;t<a;++t)s.set(1,t,t);const o=gn(s.toTensor(),[t,e]);if(null==n)return o;if(1===n.length)return kr(xr(o,0),[n[0],1,1]);if(2===n.length)return kr(xr(xr(o,0),0),[n[0],n[1],1,1]);if(3===n.length)return kr(xr(xr(xr(o,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});function Tr(t,e,n){const r={shape:t,value:e,dtype:n};return Be.runKernel("Fill",{},r)}const _r=He({floor_:function(t){const e={x:je(t,"x","floor","float32")};return Be.runKernel("Floor",e)}});const vr=He({gather_:function(t,e,n=0,r=0){const s={x:je(t,"x","gather"),indices:je(e,"indices","gather","int32")},a={axis:n,batchDims:r};return Be.runKernel("GatherV2",s,a)}});const Sr=He({greater_:function(t,e){let n=je(t,"a","greater","string_or_numeric"),r=je(e,"b","greater","string_or_numeric");[n,r]=Fe(n,r),Xn(n.shape,r.shape);const s={a:n,b:r};return Be.runKernel("Greater",s)}});const Er=He({greaterEqual_:function(t,e){let n=je(t,"a","greaterEqual","string_or_numeric"),r=je(e,"b","greaterEqual","string_or_numeric");[n,r]=Fe(n,r),Xn(n.shape,r.shape);const s={a:n,b:r};return Be.runKernel("GreaterEqual",s)}});const $r=He({imag_:function(t){const e={input:je(t,"input","imag")};return Be.runKernel("Imag",e)}});He({isFinite_:function(t){const e={x:je(t,"x","isFinite")};return Be.runKernel("IsFinite",e)}}),He({isInf_:function(t){const e={x:je(t,"x","isInf")};return Be.runKernel("IsInf",e)}});const Ir=He({isNaN_:function(t){const e={x:je(t,"x","isNaN")};return Be.runKernel("IsNan",e)}});const Dr=He({leakyRelu_:function(t,e=.2){const n={x:je(t,"x","leakyRelu")},r={alpha:e};return Be.runKernel("LeakyRelu",n,r)}});const Or=He({less_:function(t,e){let n=je(t,"a","less","string_or_numeric"),r=je(e,"b","less","string_or_numeric");[n,r]=Fe(n,r),Xn(n.shape,r.shape);const s={a:n,b:r};return Be.runKernel("Less",s)}});const Ar=He({lessEqual_:function(t,e){let n=je(t,"a","lessEqual","string_or_numeric"),r=je(e,"b","lessEqual","string_or_numeric");[n,r]=Fe(n,r),Xn(n.shape,r.shape);const s={a:n,b:r};return Be.runKernel("LessEqual",s)}});function Mr(t,e,n){if(n<=0)throw new Error("The number of values should be positive.");const r={start:t,stop:e,num:n};return Be.runKernel("LinSpace",{},r)}const Fr=He({localResponseNormalization_:function(t,e=5,n=1,r=1,s=.5){const a=je(t,"x","localResponseNormalization");Y(4===a.rank||3===a.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`)),Y(rt(e),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${e}.`));let o=a,i=!1;3===a.rank&&(i=!0,o=gn(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const u={x:o},p={depthRadius:e,bias:n,alpha:r,beta:s},l=Be.runKernel("LRN",u,p);return i?gn(l,[l.shape[1],l.shape[2],l.shape[3]]):l}});const Cr=He({log_:function(t){const e={x:je(t,"x","log","float32")};return Be.runKernel("Log",e)}});const Vr=He({log1p_:function(t){const e={x:je(t,"x","log1p")};return Be.runKernel("Log1p",e)}});function Rr(t){return Be.customGrad(t)}const zr=He({neg_:function(t){const e={x:je(t,"x","neg")};return Be.runKernel("Neg",e)}});const Lr=He({softplus_:function(t){const e={x:je(t,"x","softplus")};return Be.runKernel("Softplus",e)}});He({logSigmoid_:function(t){const e=je(t,"x","logSigmoid");return Rr((t=>({value:zr(Lr(zr(t))),gradFunc:e=>Tn(e,_n(zr(t)))})))(e)}});const Br=He({sub_:function(t,e){let n=je(t,"a","sub"),r=je(e,"b","sub");[n,r]=Fe(n,r);const s={a:n,b:r};return Be.runKernel("Sub",s)}});const Pr=He({logSoftmax_:function(t,e=-1){const n=je(t,"logits","logSoftmax");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${e}`);return Rr(((t,n)=>{const r=ir(t,e,!0),s=Br(t,r),a=Br(pn(s,"float32"),Cr(mr(br(s),e,!0)));n([a]);return{value:a,gradFunc:(t,n)=>{const[r]=n,s=br(r);return Br(t,Tn(mr(t,e,!0),s))}}}))(n)}});const Kr=He({logSumExp_:function(t,e=null,n=!1){const r=je(t,"x","logSumExp"),s=at(e,r.shape),a=ir(r,s,!0),o=Br(r,a),i=br(o),u=mr(i,s),p=Cr(u),l=Ye(gn(a,p.shape),p);if(n){const t=or(l.shape,s);return gn(l,t)}return l}});const qr=He({logicalAnd_:function(t,e){const n=je(t,"a","logicalAnd","bool"),r=je(e,"b","logicalAnd","bool");Xn(n.shape,r.shape);const s={a:n,b:r};return Be.runKernel("LogicalAnd",s)}});const Ur=He({logicalNot_:function(t){const e={x:je(t,"x","logicalNot","bool")};return Be.runKernel("LogicalNot",e)}});const jr=He({logicalOr_:function(t,e){const n=je(t,"a","logicalOr","bool"),r=je(e,"b","logicalOr","bool");Xn(n.shape,r.shape);const s={a:n,b:r};return Be.runKernel("LogicalOr",s)}});He({logicalXor_:function(t,e){const n=je(t,"a","logicalXor","bool"),r=je(e,"b","logicalXor","bool");return Xn(n.shape,r.shape),qr(jr(t,e),Ur(qr(t,e)))}});const Wr=2147483648;const Hr=He({searchSorted_:function(t,e,n="left"){const r=je(t,"sortedSequence","searchSorted"),s=je(e,"values","searchSorted"),a=r.shape[r.shape.length-1],o=s.shape[s.shape.length-1],i=gn(r,[-1,a]),u=gn(s,[-1,o]);if(i.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(i.shape[0]!==u.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(et(u.shape)>=Wr)throw new Error("values tensor size must less than 2147483648");if(i.shape[1]>=Wr)throw new Error(`trailing dim_size must less than 2147483648 for int32 output type, was ${i.shape[1]}`);const p={sortedSequence:i,values:u},l={side:n};return Be.runKernel("SearchSorted",p,l)}});function Gr(t,e){return Hr(t,e,"left")}const Zr=He({maxPool_:function(t,e,n,r,s){const a=je(t,"x","maxPool");let o=a,i=!1;3===a.rank&&(i=!0,o=gn(a,[1,a.shape[0],a.shape[1],a.shape[2]])),Y(4===o.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${o.rank}.`)),Y(fn(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),yn("maxPool",r,s);const u={x:o},p={filterSize:e,strides:n,pad:r,dimRoundingMode:s},l=Be.runKernel("MaxPool",u,p);return i?gn(l,[l.shape[1],l.shape[2],l.shape[3]]):l}});const Qr=He({maxPool3d_:function(t,e=[1,1,1],n,r,s,a="NDHWC"){const o=je(t,"x","maxPool3d");let i=o,u=!1;4===o.rank&&(u=!0,i=gn(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),Y(5===i.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${i.rank}.`)),Y("NDHWC"===a,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),yn("maxPool3d",r,s);const p={x:i},l={filterSize:e,strides:n,pad:r,dimRoundingMode:s,dataFormat:a},c=Be.runKernel("MaxPool3D",p,l);return u?gn(c,[c.shape[1],c.shape[2],c.shape[3],c.shape[4]]):c}});const Yr=He({maxPoolWithArgmax_:function(t,e,n,r,s=!1){const a={x:je(t,"x","maxPoolWithArgmax")},o={filterSize:e,strides:n,pad:r,includeBatchInIndex:s},i=Be.runKernel("MaxPoolWithArgmax",a,o);return{result:i[0],indexes:i[1]}}});const Xr=He({maximum_:function(t,e){let n=je(t,"a","maximum"),r=je(e,"b","maximum");[n,r]=Fe(n,r),"bool"===n.dtype&&(n=pn(n,"int32"),r=pn(r,"int32")),Xn(n.shape,r.shape);const s={a:n,b:r};return Be.runKernel("Maximum",s)}});const Jr=He({mean_:function(t,e=null,n=!1){const r={x:je(t,"x","mean")},s={axis:e,keepDims:n};return Be.runKernel("Mean",r,s)}});function ts(t,e="float32"){if("complex64"===e){const e=ts(t,"float32"),n=ts(t,"float32");return Cn(e,n)}const n=ft(et(t),e);return Be.makeTensor(n,t,e)}function es(t,e="float32"){if("complex64"===e){const e=es(t,"float32"),n=ts(t,"float32");return Cn(e,n)}const n=mt(et(t),e);return Be.makeTensor(n,t,e)}const ns=He({minimum_:function(t,e){let n=je(t,"a","minimum"),r=je(e,"b","minimum");[n,r]=Fe(n,r),"bool"===n.dtype&&(n=pn(n,"int32"),r=pn(r,"int32")),Xn(n.shape,r.shape);const s={a:n,b:r};return Be.runKernel("Minimum",s)}});const rs=He({mirrorPad_:function(t,e,n){Y("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const r=je(t,"x","mirrorPad");if(0===r.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");Y(e.length===r.rank,(()=>`Padding doesn't match input. Must be ${r.rank}. Got ${e.length}.`));const s="reflect"===n?1:0;for(let t=0;t<r.rank;t++)Y(2===e[t].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),Y(e[t][0]>=0&&e[t][0]<=r.shape[t]-s&&e[t][1]>=0&&e[t][1]<=r.shape[t]-s,(()=>`Padding in dimension ${t} cannot be greater than or equal to ${r.shape[t]-s} or less than 0 for input of shape ${r.shape}`));const a={paddings:e,mode:n},o={x:r};return Be.runKernel("MirrorPad",o,a)}});const ss=He({mod_:function(t,e){let n=je(t,"a","mod"),r=je(e,"b","mod");[n,r]=Fe(n,r);const s={a:n,b:r};return Be.runKernel("Mod",s)}});He({moments_:function(t,e=null,n=!1){const r=at(e,(t=je(t,"x","moments")).shape),s=Jr(t,r,n);let a=s.shape;n||(a=or(s.shape,r));const o=dr(Br(pn(t,"float32"),gn(s,a)));return{mean:s,variance:Jr(o,r,n)}}}),He({multiRNNCell_:function(t,e,n,r){const s=je(e,"data","multiRNNCell"),a=We(n,"c","multiRNNCell"),o=We(r,"h","multiRNNCell");let i=s;const u=[];for(let e=0;e<t.length;e++){const n=t[e](i,a[e],o[e]);u.push(n[0]),u.push(n[1]),i=n[1]}const p=[],l=[];for(let t=0;t<u.length;t+=2)p.push(u[t]),l.push(u[t+1]);return[p,l]}});const as=He({multinomial_:function(t,e,n,r=!1){const s=je(t,"logits","multinomial"),a=s.size,o=s.rank;if(a<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${a}.`);if(o>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${o}`);n=n||Math.random();const i={logits:1===o?gn(s,[1,-1]):s},u={numSamples:e,seed:n,normalized:r},p=Be.runKernel("Multinomial",i,u);return 1===o?gn(p,[p.size]):p}});const os=He({notEqual_:function(t,e){let n=je(t,"a","notEqual","string_or_numeric"),r=je(e,"b","notEqual","string_or_numeric");[n,r]=Fe(n,r),Xn(n.shape,r.shape);const s={a:n,b:r};return Be.runKernel("NotEqual",s)}});const is=He({oneHot_:function(t,e,n=1,r=0){if(e<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${e}`);const s={indices:je(t,"indices","oneHot","int32")},a={depth:e,onValue:n,offValue:r};return Be.runKernel("OneHot",s,a)}});const us=He({onesLike_:function(t){const e={x:je(t,"x","onesLike")};return Be.runKernel("OnesLike",e)}});He({outerProduct_:function(t,e){const n=je(t,"v1","outerProduct"),r=je(e,"v2","outerProduct");Y(1===n.rank&&1===r.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`));const s=gn(n,[-1,1]),a=gn(r,[1,-1]);return wn(s,a)}});const ps=He({pad_:function(t,e,n=0){const r=je(t,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const s={paddings:e,constantValue:n},a={x:r};return Be.runKernel("PadV2",a,s)}});He({pad1d_:function(t,e,n=0){return Y(2===e.length,(()=>"Invalid number of paddings. Must be length of 2.")),ps(t,[e],n)}}),He({pad2d_:function(t,e,n=0){return Y(2===e.length&&2===e[0].length&&2===e[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),ps(t,e,n)}}),He({pad3d_:function(t,e,n=0){return Y(3===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),ps(t,e,n)}}),He({pad4d_:function(t,e,n=0){return Y(4===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length&&2===e[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),ps(t,e,n)}});const ls=He({spaceToBatchND_:function(t,e,n){const r=je(t,"x","spaceToBatchND");Y(r.rank>=1+e.length,(()=>`input rank ${r.rank} should be > than [blockShape] ${e.length}`)),Y(n.length===e.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${e.length}`)),Y(r.shape.reduce(((t,r,s)=>s>0&&s<=e.length?t&&(r+n[s-1][0]+n[s-1][1])%e[s-1]==0:t),!0),(()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${e.toString()}`));const s={x:r},a={blockShape:e,paddings:n};return Be.runKernel("SpaceToBatchND",s,a)}});He({pool_:function(t,e,n,r,s,a,o){null==s&&(s=[1,1]),null==a&&(a=1),0===r&&(r="valid");const i=je(t,"x","maxPool");let u=i,p=!1;3===i.rank&&(p=!0,u=gn(i,[1,i.shape[0],i.shape[1],i.shape[2]])),Y(fn(a,s),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${s}'`));const l=function(t,e,n,r,s,a,o="channelsLast"){const[i,u]=cn(e);let p;if("channelsLast"===o)p=[i,u,t[3],t[3]];else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);p=[i,u,t[1],t[1]]}return ln(t,p,n,r,s,a,!1,o)}(u.shape,e,a,s,r),c=[l.dilationHeight,l.dilationWidth];let h;h="same"===r?function(t,e){const n=t.map(((t,n)=>t+(t-1)*(e[n]-1))).map((t=>t-1)),r=n.map((t=>Math.floor(t/2))),s=n.map(((t,e)=>t-r[e]));return n.map(((t,e)=>[r[e],s[e]]))}([l.filterHeight,l.filterWidth],c):[[0,0],[0,0]];const d=1===c[0]&&1===c[1],[m,f]=function(t,e,n){const r=n.map((t=>t[0])),s=n.map((t=>t[1])),a=t.concat(r,s),o=e.map(((t,e)=>(t-a[e]%t)%t)),i=s.map(((t,e)=>t+o[e])),u=e.map(((t,e)=>[r[e],i[e]])),p=e.map(((t,e)=>[0,o[e]]));return[u,p]}([l.inHeight,l.inWidth],c,h),y=d?r:"valid",g=d?u:ls(u,c,m),b=("avg"===n?()=>bn(g,e,a,y,o):()=>Zr(g,e,a,y,o))(),x=d?b:En(b,c,f);return p?gn(x,[x.shape[1],x.shape[2],x.shape[3]]):x}});const cs=He({prelu_:function(t,e){const n={x:je(t,"x","prelu"),alpha:je(e,"alpha","prelu")};return Be.runKernel("Prelu",n)}});const hs=He({prod_:function(t,e=null,n=!1){let r=je(t,"x","prod");"bool"===r.dtype&&(r=pn(r,"int32"));const s={x:r},a={axis:e,keepDims:n};return Be.runKernel("Prod",s,a)}});He({rand_:function(t,e,n){const r=et(t);let s=null;if(null==n||"float32"===n)s=new Float32Array(r);else if("int32"===n)s=new Int32Array(r);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);s=new Uint8Array(r)}for(let t=0;t<r;t++)s[t]=e();return Be.makeTensor(s,t,n)}});var ds="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function ms(t){if(t.__esModule)return t;var e=Object.defineProperty({},"__esModule",{value:!0});return Object.keys(t).forEach((function(n){var r=Object.getOwnPropertyDescriptor(t,n);Object.defineProperty(e,n,r.get?r:{enumerable:!0,get:function(){return t[n]}})})),e}function fs(t){var e={exports:{}};return t(e,e.exports),e.exports}var ys=fs((function(t){!function(t,e,n){function r(t){var e,n=this,r=(e=4022871197,function(t){t=String(t);for(var n=0;n<t.length;n++){var r=.02519603282416938*(e+=t.charCodeAt(n));r-=e=r>>>0,e=(r*=e)>>>0,e+=4294967296*(r-=e)}return 2.3283064365386963e-10*(e>>>0)});n.next=function(){var t=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=t-(n.c=0|t)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(t),n.s0<0&&(n.s0+=1),n.s1-=r(t),n.s1<0&&(n.s1+=1),n.s2-=r(t),n.s2<0&&(n.s2+=1),r=null}function s(t,e){return e.c=t.c,e.s0=t.s0,e.s1=t.s1,e.s2=t.s2,e}function a(t,e){var n=new r(t),a=e&&e.state,o=n.next;return o.int32=function(){return 4294967296*n.next()|0},o.double=function(){return o()+11102230246251565e-32*(2097152*o()|0)},o.quick=o,a&&("object"==typeof a&&s(a,n),o.state=function(){return s(n,{})}),o}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.alea=a}(0,t,!1)})),gs=fs((function(t){!function(t,e,n){function r(t){var e=this,n="";e.x=0,e.y=0,e.z=0,e.w=0,e.next=function(){var t=e.x^e.x<<11;return e.x=e.y,e.y=e.z,e.z=e.w,e.w^=e.w>>>19^t^t>>>8},t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),e.next()}function s(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e}function a(t,e){var n=new r(t),a=e&&e.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=n.next,o.quick=o,a&&("object"==typeof a&&s(a,n),o.state=function(){return s(n,{})}),o}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xor128=a}(0,t,!1)})),bs=fs((function(t){!function(t,e,n){function r(t){var e=this,n="";e.next=function(){var t=e.x^e.x>>>2;return e.x=e.y,e.y=e.z,e.z=e.w,e.w=e.v,(e.d=e.d+362437|0)+(e.v=e.v^e.v<<4^t^t<<1)|0},e.x=0,e.y=0,e.z=0,e.w=0,e.v=0,t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),r==n.length&&(e.d=e.x<<10^e.x>>>4),e.next()}function s(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e.v=t.v,e.d=t.d,e}function a(t,e){var n=new r(t),a=e&&e.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=n.next,o.quick=o,a&&("object"==typeof a&&s(a,n),o.state=function(){return s(n,{})}),o}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xorwow=a}(0,t,!1)})),xs=fs((function(t){!function(t,e,n){function r(t){var e=this;e.next=function(){var t,n,r=e.x,s=e.i;return t=r[s],n=(t^=t>>>7)^t<<24,n^=(t=r[s+1&7])^t>>>10,n^=(t=r[s+3&7])^t>>>3,n^=(t=r[s+4&7])^t<<7,t=r[s+7&7],n^=(t^=t<<13)^t<<9,r[s]=n,e.i=s+1&7,n},function(t,e){var n,r=[];if(e===(0|e))r[0]=e;else for(e=""+e,n=0;n<e.length;++n)r[7&n]=r[7&n]<<15^e.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n&&(r[7]=-1),t.x=r,t.i=0,n=256;n>0;--n)t.next()}(e,t)}function s(t,e){return e.x=t.x.slice(),e.i=t.i,e}function a(t,e){null==t&&(t=+new Date);var n=new r(t),a=e&&e.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=n.next,o.quick=o,a&&(a.x&&s(a,n),o.state=function(){return s(n,{})}),o}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xorshift7=a}(0,t,!1)})),Ns=fs((function(t){!function(t,e,n){function r(t){var e=this;e.next=function(){var t,n,r=e.w,s=e.X,a=e.i;return e.w=r=r+1640531527|0,n=s[a+34&127],t=s[a=a+1&127],n^=n<<13,t^=t<<17,n^=n>>>15,t^=t>>>12,n=s[a]=n^t,e.i=a,n+(r^r>>>16)|0},function(t,e){var n,r,s,a,o,i=[],u=128;for(e===(0|e)?(r=e,e=null):(e+="\0",r=0,u=Math.max(u,e.length)),s=0,a=-32;a<u;++a)e&&(r^=e.charCodeAt((a+32)%e.length)),0===a&&(o=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,a>=0&&(o=o+1640531527|0,s=0==(n=i[127&a]^=r+o)?s+1:0);for(s>=128&&(i[127&(e&&e.length||0)]=-1),s=127,a=512;a>0;--a)r=i[s+34&127],n=i[s=s+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,i[s]=r^n;t.w=o,t.X=i,t.i=s}(e,t)}function s(t,e){return e.i=t.i,e.w=t.w,e.X=t.X.slice(),e}function a(t,e){null==t&&(t=+new Date);var n=new r(t),a=e&&e.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=n.next,o.quick=o,a&&(a.X&&s(a,n),o.state=function(){return s(n,{})}),o}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xor4096=a}(0,t,!1)})),ks=fs((function(t){!function(t,e,n){function r(t){var e=this,n="";e.next=function(){var t=e.b,n=e.c,r=e.d,s=e.a;return t=t<<25^t>>>7^n,n=n-r|0,r=r<<24^r>>>8^s,s=s-t|0,e.b=t=t<<20^t>>>12^n,e.c=n=n-r|0,e.d=r<<16^n>>>16^s,e.a=s-t|0},e.a=0,e.b=0,e.c=-1640531527,e.d=1367130551,t===Math.floor(t)?(e.a=t/4294967296|0,e.b=0|t):n+=t;for(var r=0;r<n.length+20;r++)e.b^=0|n.charCodeAt(r),e.next()}function s(t,e){return e.a=t.a,e.b=t.b,e.c=t.c,e.d=t.d,e}function a(t,e){var n=new r(t),a=e&&e.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=n.next,o.quick=o,a&&("object"==typeof a&&s(a,n),o.state=function(){return s(n,{})}),o}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.tychei=a}(0,t,!1)})),ws=ms({__proto__:null,default:{}}),Ts=fs((function(t){!function(e,n,r){var s,a=256,o=r.pow(a,6),i=r.pow(2,52),u=2*i,p=255;function l(t,p,l){var y=[],g=m(d((p=1==p?{entropy:!0}:p||{}).entropy?[t,f(n)]:null==t?function(){try{var t;return s&&(t=s.randomBytes)?t=t(a):(t=new Uint8Array(a),(e.crypto||e.msCrypto).getRandomValues(t)),f(t)}catch(t){var r=e.navigator,o=r&&r.plugins;return[+new Date,e,o,e.screen,f(n)]}}():t,3),y),b=new c(y),x=function(){for(var t=b.g(6),e=o,n=0;t<i;)t=(t+n)*a,e*=a,n=b.g(1);for(;t>=u;)t/=2,e/=2,n>>>=1;return(t+n)/e};return x.int32=function(){return 0|b.g(4)},x.quick=function(){return b.g(4)/4294967296},x.double=x,m(f(b.S),n),(p.pass||l||function(t,e,n,s){return s&&(s.S&&h(s,b),t.state=function(){return h(b,{})}),n?(r.random=t,e):t})(x,g,"global"in p?p.global:this==r,p.state)}function c(t){var e,n=t.length,r=this,s=0,o=r.i=r.j=0,i=r.S=[];for(n||(t=[n++]);s<a;)i[s]=s++;for(s=0;s<a;s++)i[s]=i[o=p&o+t[s%n]+(e=i[s])],i[o]=e;(r.g=function(t){for(var e,n=0,s=r.i,o=r.j,i=r.S;t--;)e=i[s=p&s+1],n=n*a+i[p&(i[s]=i[o=p&o+e])+(i[o]=e)];return r.i=s,r.j=o,n})(a)}function h(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function d(t,e){var n,r=[],s=typeof t;if(e&&"object"==s)for(n in t)try{r.push(d(t[n],e-1))}catch(t){}return r.length?r:"string"==s?t:t+"\0"}function m(t,e){for(var n,r=t+"",s=0;s<r.length;)e[p&s]=p&(n^=19*e[p&s])+r.charCodeAt(s++);return f(e)}function f(t){return String.fromCharCode.apply(0,t)}if(m(r.random(),n),t.exports){t.exports=l;try{s=ws}catch(t){}}else r.seedrandom=l}("undefined"!=typeof self?self:ds,[],Math)}));Ts.alea=ys,Ts.xor128=gs,Ts.xorwow=bs,Ts.xorshift7=xs,Ts.xor4096=Ns,Ts.tychei=ks;var _s=Ts;class vs{constructor(t,e,n,r,s){this.mean=t,this.stdDev=e,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=s||Math.random();this.random=_s.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const t=this.nextVal;return this.nextVal=NaN,t}let t,e,n=!1;for(;!n;){let r,s,a;do{r=2*this.random()-1,s=2*this.random()-1,a=r*r+s*s}while(a>=1||0===a);const o=Math.sqrt(-2*Math.log(a)/a);t=this.mean+this.stdDev*r*o,e=this.mean+this.stdDev*s*o,this.truncated&&!this.isValidTruncated(t)||(n=!0)}return this.truncated&&!this.isValidTruncated(e)||(this.nextVal=this.convertValue(e)),this.convertValue(t)}convertValue(t){return null==this.dtype||"float32"===this.dtype?t:Math.round(t)}isValidTruncated(t){return t<=this.upper&&t>=this.lower}}class Ss{constructor(t,e,n,r){this.alpha=t,this.beta=1/e,this.dtype=n;const s=r||Math.random();this.randu=_s.alea(s.toString()),this.randn=new vs(0,1,n,!1,this.randu()),this.d=t<1?t+2/3:t-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let t,e,n,r,s,a;for(;;){do{r=this.randn.nextValue(),a=1+this.c*r}while(a<=0);if(a*=a*a,t=r*r,e=1-.331*t*t,n=.5*t+this.d*(1-a+Math.log(a)),s=this.randu(),s<e||Math.log(s)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(t){return"float32"===this.dtype?t:Math.round(t)}}class Es{constructor(t=0,e=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=t,this.range=e-t,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${t} - ${e} <= 1 and dtype is not float`);this.random=_s.alea(r)}convertValue(t){return this.canReturnFloat()?t:Math.round(t)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}He({randomGamma_:function(t,e,n=1,r="float32",s){if(null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error(`Unsupported data type ${r}`);const a=new Ss(e,n,r,s),o=An(t,r);for(let t=0;t<o.values.length;t++)o.values[t]=a.nextValue();return o.toTensor()}}),He({randomNormal_:function(t,e=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error(`Unsupported data type ${r}`);const a=new vs(e,n,r,!1,s),o=An(t,r);for(let t=0;t<o.values.length;t++)o.values[t]=a.nextValue();return o.toTensor()}});const $s=He({randomUniform_:function(t,e=0,n=1,r="float32",s){const a=An(t,r),o=new Es(e,n,null,s);for(let t=0;t<a.values.length;t++)a.values[t]=o.nextValue();return a.toTensor()}});function Is(t,e,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");const s={start:t,stop:e,step:n,dtype:r};return Be.runKernel("Range",{},s)}const Ds=He({real_:function(t){const e={input:je(t,"input","real")};return Be.runKernel("Real",e)}});const Os=He({reciprocal_:function(t){const e={x:je(t,"x","reciprocal")};return Be.runKernel("Reciprocal",e)}});const As=He({relu_:function(t){const e={x:je(t,"x","relu")};return Be.runKernel("Relu",e)}});const Ms=He({relu6_:function(t){const e={x:je(t,"x","relu6")};return Be.runKernel("Relu6",e)}});const Fs=He({reverse_:function(t,e){const n={x:je(t,"x","reverse")},r={dims:e};return Be.runKernel("Reverse",n,r)}});He({reverse1d_:function(t){const e=je(t,"x","reverse");return Y(1===e.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${e.rank}.`)),Fs(e,0)}}),He({reverse2d_:function(t,e){const n=je(t,"x","reverse");return Y(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),Fs(n,e)}}),He({reverse3d_:function(t,e){const n=je(t,"x","reverse");return Y(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),Fs(n,e)}}),He({reverse4d_:function(t,e){const n=je(t,"x","reverse");return Y(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),Fs(n,e)}});const Cs=He({round_:function(t){const e={x:je(t,"x","round")};return Be.runKernel("Round",e)}});const Vs=He({rsqrt_:function(t){const e={x:je(t,"x","rsqrt","float32")};return Be.runKernel("Rsqrt",e)}});const Rs=He({selu_:function(t){const e={x:je(t,"x","selu")};return Be.runKernel("Selu",e)}});He({separableConv2d_:function(t,e,n,r,s,a=[1,1],o="NHWC"){const i=je(t,"x","separableConv2d"),u=je(e,"depthwiseFilter","separableConv2d"),p=je(n,"pointwiseFilter","separableConv2d");let l=i,c=!1;if(3===i.rank&&(c=!0,l=gn(i,[1,i.shape[0],i.shape[1],i.shape[2]])),"NCHW"===o)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");Y(4===l.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${l.rank}.`)),Y(4===u.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${u.rank}.`)),Y(4===p.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${u.rank}.`)),Y(1===p.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${p.shape[0]}.`)),Y(1===p.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${p.shape[1]}.`));const h=u.shape[2],d=u.shape[3];Y(p.shape[2]===h*d,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${h*d}, but got ${p.shape[2]}.`));const m=Gn(l,u,r,s,o,a),f=Vn(m,p,1,"valid",o);return c?gn(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const zs=async function(t,e){const n=je(t,"x","setdiff1d"),r=je(e,"y","setdiff1d");Y(n.dtype===r.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`)),Y(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),Y(1===r.rank,(()=>`y should be 1D tensor, but got y (${r.shape}).`));const s=await n.data(),a=await r.data(),o=new Set(a);let i=0;for(let t=0;t<s.length;t++)o.has(s[t])||i++;const u=new Te([i],n.dtype),p=new Te([i],"int32");for(let t=0,e=0;t<s.length;t++)o.has(s[t])||(u.values[e]=s[t],p.values[e]=t,e++);return[u.toTensor(),p.toTensor()]};const Ls=He({sign_:function(t){const e={x:je(t,"x","sign")};return Be.runKernel("Sign",e)}});const Bs=He({sin_:function(t){const e={x:je(t,"x","sin","float32")};return Be.runKernel("Sin",e)}});const Ps=He({sinh_:function(t){const e={x:je(t,"x","sinh")};return Be.runKernel("Sinh",e)}});He({slice1d_:function(t,e,n){const r=je(t,"x","slice1d");return Y(1===r.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`)),vn(r,[e],[n])}}),He({slice2d_:function(t,e,n){const r=je(t,"x","slice2d");return Y(2===r.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`)),vn(r,e,n)}}),He({slice3d_:function(t,e,n){const r=je(t,"x","slice3d");return Y(3===r.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`)),vn(r,e,n)}}),He({slice4d_:function(t,e,n){const r=je(t,"x","slice4d");return Y(4===r.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`)),vn(r,e,n)}});const Ks=He({softmax_:function(t,e=-1){const n=je(t,"logits","softmax","float32");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${e}`);const r={logits:n},s={dim:e};return Be.runKernel("Softmax",r,s)}});const qs=He({fft_:function(t){Y("complex64"===t.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${t.dtype}.`));const e={input:t};return Be.runKernel("FFT",e)}});const Us=He({ifft_:function(t){Y("complex64"===t.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${t.dtype}.`));const e={input:t};return Be.runKernel("IFFT",e)}});const js=He({irfft_:function(t){const e=t.shape[t.shape.length-1],n=t.size/e;let r;if(e<=2){const s=gn(t,[n,e]);r=Us(s)}else{const s=[n,2*(e-1)],a=gn(Ds(t),[n,e]),o=gn($r(t),[n,e]),i=Fs(vn(a,[0,1],[n,e-2]),1),u=Tn(Fs(vn(o,[0,1],[n,e-2]),1),cr(-1)),p=kn([a,i],1),l=kn([o,u],1),c=gn(Cn(p,l),[s[0],s[1]]);r=Us(c)}if(r=Ds(r),3===t.rank&&0!==t.shape[0]){const e=r,n=t.shape[0];r=gn(r,[n,r.shape[0]/n,r.shape[1]]),e.dispose()}return r}});const Ws=He({split_:function(t,e,n=0){const r={x:je(t,"x","split")},s={numOrSizeSplits:e,axis:n};return Be.runKernel("SplitV",r,s)}});const Hs=He({rfft_:function(t,e){Y("float32"===t.dtype,(()=>`The dtype for rfft() must be real value but got ${t.dtype}`));let n=t.shape[t.shape.length-1];const r=t.size/n;let s;if(null!=e&&e<n){const r=t.shape.map((t=>0)),a=t.shape.map((t=>t));a[t.shape.length-1]=e,s=vn(t,r,a),n=e}else if(null!=e&&e>n){const r=t.shape.map((t=>t));r[t.shape.length-1]=e-n,s=kn([t,ts(r)],t.shape.length-1),n=e}else s=t;const a=er(s),o=gn(Cn(s,a),[r,n]),i=qs(o),u=Math.floor(n/2)+1,p=Ds(i),l=$r(i),c=Ws(p,[u,n-u],p.shape.length-1),h=Ws(l,[u,n-u],l.shape.length-1),d=s.shape.slice();return d[s.shape.length-1]=u,gn(Cn(c[0],h[0]),d)}});const Gs=He({squaredDifference_:function(t,e){let n=je(t,"a","squaredDifference"),r=je(e,"b","squaredDifference");[n,r]=Fe(n,r),Xn(n.shape,r.shape);const s={a:n,b:r};return Be.runKernel("SquaredDifference",s,{})}});const Zs=He({squeeze_:function(t,e){const n=je(t,"x","squeeze");return gn(n,function(t,e){const n=[],r=[],s=null!=e&&Array.isArray(e)&&0===e.length,a=null==e||s?null:at(e,t).sort();let o=0;for(let e=0;e<t.length;++e){if(null!=a){if(a[o]===e&&1!==t[e])throw new Error(`Can't squeeze axis ${e} since its dim '${t[e]}' is not 1`);(null==a[o]||a[o]>e)&&1===t[e]&&(n.push(t[e]),r.push(e)),a[o]<=e&&o++}1!==t[e]&&(n.push(t[e]),r.push(e))}return{newShape:n,keptDims:r}}(n.shape,e).newShape)}});const Qs=He({stack_:function(t,e=0){const n=We(t,"tensors","stack","string_or_numeric");Y(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&Y(e<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const r=n,s={axis:e};return Be.runKernel("Pack",r,s)}});const Ys=He({step_:function(t,e=0){const n={x:je(t,"x","step")},r={alpha:e};return Be.runKernel("Step",n,r)}});const Xs=He({stridedSlice_:function(t,e,n,r,s=0,a=0,o=0,i=0,u=0){const p={x:je(t,"x","stridedSlice","string_or_numeric")},l={begin:e,end:n,strides:r,beginMask:s,endMask:a,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:u};return Be.runKernel("StridedSlice",p,l)}});const Js=He({tan_:function(t){const e={x:je(t,"x","tan","float32")};return Be.runKernel("Tan",e)}});function ta(t,e){J(t);const n=Ke(t,e);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return lr(t,null,n,e)}function ea(t,e,n){if(J(t),null!=e&&2!==e.length)throw new Error("tensor2d() requires shape to have two numbers");const r=Ke(t,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return lr(t,e,r,n)}const na=He({topk_:function(t,e=1,n=!0){const r=je(t,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const s=r.shape[r.shape.length-1];if(e<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${e}`);if(e>s)throw new Error(`'k' passed to topk() must be <= the last dimension (${s}) but got ${e}`);const a={x:r},o={k:e,sorted:n},[i,u]=Be.runKernel("TopK",a,o);return{values:i,indices:u}}});const ra=He({truncatedNormal_:function(t,e=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const a=new vs(e,n,r,!0,s),o=An(t,r);for(let t=0;t<o.values.length;t++)o.values[t]=a.nextValue();return o.toTensor()}});const sa=He({unique_:function(t,e=0){const n=je(t,"x","unique","string_or_numeric");Y(n.rank>0,(()=>"The input tensor must be at least 1D"));const r={x:n},s={axis:e},[a,o]=Be.runKernel("Unique",r,s);return{values:a,indices:o}}});He({unsortedSegmentSum_:function(t,e,n){const r=je(t,"x","unsortedSegmentSum"),s=je(e,"segmentIds","unsortedSegmentSum","int32");Y(rt(n),(()=>"numSegments must be of dtype int"));const a={x:r,segmentIds:s},o={numSegments:n};return Be.runKernel("UnsortedSegmentSum",a,o)}});const aa=He({unstack_:function(t,e=0){const n=je(t,"x","unstack","string_or_numeric");Y(e>=-n.shape.length&&e<n.shape.length,(()=>`Axis = ${e} is not in [-${n.shape.length}, ${n.shape.length})`));const r={value:n},s={axis:e};return Be.runKernel("Unpack",r,s)}});function oa(t,e){return Hr(t,e,"right")}const ia=async function(t){const e=je(t,"condition","whereAsync","bool"),n=await e.data(),r=function(t,e){const n=[];for(let t=0;t<e.length;t++)e[t]&&n.push(t);const r=An(t,"int32"),s=An([n.length,t.length],"int32");for(let e=0;e<n.length;e++){const a=r.indexToLoc(n[e]),o=e*t.length;s.values.set(a,o)}return s.toTensor()}(e.shape,n);return t!==e&&e.dispose(),r};const ua=He({transpose_:function(t,e,n){const r=je(t,"x","transpose");if(null==e&&(e=r.shape.map(((t,e)=>e)).reverse()),Y(r.rank===e.length,(()=>`Error in transpose: rank of input ${r.rank} must match length of perm ${e}.`)),e.forEach((t=>{Y(t>=0&&t<r.rank,(()=>"All entries in 'perm' must be between 0 and "+(r.rank-1)+` but got ${e}`))})),r.rank<=1)return r.clone();const s={x:r},a={perm:e};return"complex64"===r.dtype?(o=()=>{let t=Ds(r),e=$r(r);return t=Be.runKernel(It,{x:t},a),e=Be.runKernel(It,{x:e},a),n&&(e=zr(e)),Cn(t,e)},Be.tidy(o,i)):Be.runKernel(It,s,a);var o,i}});function pa(t,e,n){if(e.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);if(t.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${t.rank}.`);if("int32"!==e.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${e.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===e.size)throw new Error(`Indices specified for empty output. indices shape: ${e.shape}`);if(0===t.size)throw new Error(`Updates specified for empty output. updates shape: ${t.shape}`)}!function(t,e,n){const r=e.rank>1?e.shape[e.rank-1]:1,s=e.rank>1?e.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${e.shape}, shape: ${t}, sliceDim: ${r}, and batchDim: ${s}.`;if(n.rank<s)throw new Error(a+` update.rank < ${s}. `);if(t.length<r+(n.rank-s))throw new Error(a+` Output shape length < ${r+(n.rank-s)}`);if(n.rank!==s+t.length-r)throw new Error(a+" update.rank != "+(s+t.length-r));for(let t=0;t<s;++t)if(n.shape[t]!==e.shape[t])throw new Error(a+` updates.shape[${t}] (${n.shape[t]}) != indices.shape[${t}] (${e.shape[t]}).`);for(let e=0;e<n.rank-s;++e)if(n.shape[e+s]!==t[e+r])throw new Error(a+` updates.shape[${e+s}] (${n.shape[e+s]}) != shape[${e+s}] (${t[e+s]})`)}(n,e,t)}He({movingAverage_:function(t,e,n,r,s=!0){const a=je(t,"v","movingAverage"),o=je(e,"x","movingAverage"),i=je(n,"decay","movingAverage");var u,p;p=o,Y((u=a).dtype===p.dtype,(()=>`The dtypes of the first(${u.dtype}) and second(${p.dtype}) input must match`)),Y(nt(a.shape,o.shape),(()=>"Shape mismatch in v and x"));const l=cr(1),c=Br(l,i);let h=Tn(Br(o,a),c);if(s){Y(null!=r,(()=>"When using zeroDebias: true, step is required."));const t=je(r,"step","movingAverage");h=Yn(h,Br(l,pr(i,t)))}return Ye(a,h)}});const la=He({scatterND_:function(t,e,n){const r=je(t,"indices","scatterND","int32"),s=je(e,"updates","scatterND");pa(s,r,n);const a={indices:r,updates:s},o={shape:n};return Be.runKernel("ScatterNd",a,o)}});const ca=He({sparseToDense_:function(t,e,n,r=0){const s=je(t,"sparseIndices","sparseToDense","int32"),a=je(e,"sparseValues","sparseToDense","string_or_numeric"),o=je(r,"defaultValue","sparseToDense",a.dtype);!function(t,e,n,r){if("int32"!==t.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${t.shape}.`);const s=t.rank>0?t.shape[0]:1,a=t.rank>1?t.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const o=e.size;if(0!==e.rank&&(1!==e.rank||o!==s))throw new Error(`sparseValues has incorrect shape ${e.shape}, should be [] or [${s}]`);if(e.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(s,a,n,o);const i={sparseIndices:s,sparseValues:a,defaultValue:o},u={outputShape:n};return Be.runKernel("SparseToDense",i,u)}});const ha=He({gatherND_:function(t,e){const n=je(e,"indices","gatherND","int32"),r={params:je(t,"x","gatherND","string_or_numeric"),indices:n};return Be.runKernel("GatherNd",r)}});function da(t,e,n){const r=1-t%2,s=new Float32Array(t);for(let a=0;a<t;++a){const o=2*Math.PI*a/(t+r-1);s[a]=e-n*Math.cos(o)}return ta(s,"float32")}He({dropout_:function(t,e,n,r){const s=je(t,"x","dropout");if(Y("float32"===s.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${s.dtype} tensor instead.`)),Y(e>=0&&e<1,(()=>`rate must be a float in the range [0, 1), but got ${e}.`)),0===e)return t instanceof Se?s.clone():s;const a=function(t,e){if(null==e)return t.shape.slice();if(nt(t.shape,e))return e;if(t.shape.length===e.length){const n=[];for(let r=0;r<t.shape.length;r++)null==e[r]&&null!=t.shape[r]?n.push(t.shape[r]):n.push(e[r]);return n}return e}(s,n),o=1-e,i=Yn(_r(Ye($s(a,0,1,"float32",r),o)),o);return Tn(s,i)}});const ma=He({conv2DBackpropFilter_:function(t,e,n,r,s,a="NHWC",o){let i=t;3===t.rank&&(i=gn(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let u=e;3===u.rank&&(u=gn(e,[1,e.shape[0],e.shape[1],e.shape[2]])),Y(4===i.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${i.shape}.`)),Y(4===u.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${u.shape}.`)),Y(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const p="NHWC"===a?i.shape[3]:i.shape[1],l="NHWC"===a?u.shape[3]:u.shape[1];Y(p===n[2],(()=>`Error in conv2dDerFilter: depth of input ${p}) must match input depth in filter (${n[2]}.`)),Y(l===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${l}) must match output depth for filter (${n[3]}).`)),yn("conv2dDerFilter",s,o);const c={x:i,dy:u},h={strides:r,pad:s,dataFormat:a,dimRoundingMode:o,filterShape:n};return Be.runKernel("Conv2DBackpropFilter",c,h)}});function fa(t,e,n){if(null==n||"linear"===n)return t;if("relu"===n)return Tn(t,Ys(e));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function ya(t,e){let n=e;const r=function(t,e){const n=[];for(let r=0;r<e.length;r++){const s=t[t.length-r-1],a=e.length-r-1,o=e[a];(null==s||1===s&&o>1)&&n.unshift(a)}return n}(t.shape,e.shape);return r.length>0&&(n=mr(n,r)),gn(n,t.shape)}function ga(t,e,n,r){if("linear"===e)return t;if("relu"===e)return As(t);if("elu"===e)return sr(t);if("relu6"===e)return Ms(t);if("prelu"===e)return cs(t,n);if("leakyrelu"===e)return Dr(t,r);if("sigmoid"===e)return _n(t);throw new Error(`Unknown fused activation ${e}.`)}const ba=(t,e)=>!(t>0)||"linear"===e;const xa=He({fusedConv2d_:function({x:t,filter:e,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:o,bias:i,activation:u="linear",preluActivationWeights:p,leakyreluAlpha:l}){if(u=u||"linear",!1===ba(Be.state.gradientDepth,u)){Y("NHWC"===s,(()=>`Error in fused conv2d: got dataFormat of ${s} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`));let c=Vn(t,e,n,r,s,a,o);return null!=i&&(c=Ye(c,i)),ga(c,u,p,l)}const c=je(t,"x","conv2d","float32"),h=je(e,"filter","conv2d","float32");let d=c,m=!1;3===c.rank&&(m=!0,d=gn(c,[1,c.shape[0],c.shape[1],c.shape[2]])),Y(4===d.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${d.rank}.`)),Y(4===h.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${h.rank}.`)),yn("fused conv2d",r,o);const f="NHWC"===s?d.shape[3]:d.shape[1];Y(h.shape[2]===f,(()=>`Error in conv2d: depth of input (${f}) must match input depth for filter ${h.shape[2]}.`)),Y(fn(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const y=ln(d.shape,h.shape,n,a,r,o);let g,b;if(null!=i&&(g=je(i,"bias","fused conv2d"),[g]=Fe(g,c),"NHWC"===s?Xn(y.outShape,g.shape):(Y(g.shape.length<=1,(()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${g.shape.length}.`)),Y(0===g.shape.length||g.shape[0]===y.outChannels||1===g.shape[0],(()=>`Error in fused conv2d: bias shape (${g.shape}) is not compatible with the number of output channels (${y.outChannels})`)))),null!=p){const t=p.shape;if(Y(t.length<=1||3===t.length,(()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${t.length}.`)),1===t.length)Y(1===t[0]||t[0]===y.outChannels,(()=>`Error in fused conv2d: PReLU activation weights (${t}) is not compatible with the number of output channels (${y.outChannels}).`));else if(3===t.length)try{Xn(t,y.outShape)}catch(e){const n=`Error in fused conv2d: PReLU activation weights (${t}) is not compatible with the output shape of the conv2d (${y.outShape}).`;throw Error(n)}b=je(p,"prelu weights","fused conv2d")}const x=(t,e)=>{Y("NHWC"===s,(()=>`Error in gradient of fused conv2D: got dataFormat of ${s} but only NHWC is currently supported.`));const[o,i,p,l]=e,c=fa(t,p,u);Y(mn(a),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`));const h=[zn(i.shape,c,o,n,r),ma(i,c,o.shape,n,r)];if(null!=l){const t=ya(l,c);h.push(t)}return h},N={x:d,filter:h,bias:g,preluActivationWeights:b},k={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o,activation:u,leakyreluAlpha:l};if(null==i){return Rr(((t,e,n)=>{let r=Be.runKernel(Ot,N,k);return n([e,t,r]),m&&(r=gn(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:x}}))(d,h)}return Rr(((t,e,n,r)=>{let s=Be.runKernel(Ot,N,k);return r([e,t,s,n]),m&&(s=gn(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:x}}))(d,h,g)}});const Na=He({depthwiseConv2dNativeBackpropFilter_:function(t,e,n,r,s,a=[1,1],o){let i=t;3===t.rank&&(i=gn(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let u=e;3===u.rank&&(u=gn(e,[1,e.shape[0],e.shape[1],e.shape[2]]));const p={x:i,dy:u},l={strides:r,pad:s,dimRoundingMode:o,dilations:a,filterShape:n};return Be.runKernel("DepthwiseConv2dNativeBackpropFilter",p,l)}});const ka=He({depthwiseConv2dNativeBackpropInput_:function(t,e,n,r,s,a=[1,1],o){let i=e,u=!1;3===e.rank&&(u=!0,i=gn(e,[1,e.shape[0],e.shape[1],e.shape[2]]));const p={dy:i,filter:n},l={strides:r,pad:s,dimRoundingMode:o,dilations:a,inputShape:t},c=Be.runKernel("DepthwiseConv2dNativeBackpropInput",p,l);return u?gn(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const wa=He({fusedDepthwiseConv2d_:function({x:t,filter:e,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:o,bias:i,activation:u="linear",preluActivationWeights:p,leakyreluAlpha:l}){if(!1===ba(Be.state.gradientDepth,u)){let c=Gn(t,e,n,r,s,a,o);return null!=i&&(c=Ye(c,i)),ga(c,u,p,l)}const c=je(t,"x","depthwiseConv2d","float32"),h=je(e,"filter","depthwiseConv2d","float32");let d=c,m=!1;3===c.rank&&(m=!0,d=gn(c,[1,c.shape[0],c.shape[1],c.shape[2]])),Y(4===d.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`)),Y(4===h.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${h.rank}.`)),Y(d.shape[3]===h.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${h.shape[2]}.`)),null==a&&(a=[1,1]),Y(fn(n,a),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),yn("fused depthwiseConv2d",r,o);const f=ln(d.shape,h.shape,n,a,r,o,!0);let y,g;null!=i&&(y=je(i,"bias","fused conv2d"),[y]=Fe(y,c),Xn(f.outShape,y.shape)),null!=p&&(g=je(p,"prelu weights","fused depthwiseConv2d"));const b=(t,e)=>{Y(mn(a),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`));const[s,i,p,l]=e,c=fa(t,p,u),h=ka(i.shape,c,s,n,r,a,o),d=Na(i,c,s.shape,n,r,a,o);if(null!=l){return[h,d,ya(y,c)]}return[h,d]},x={x:d,filter:h,bias:y,preluActivationWeights:g},N={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o,activation:u,leakyreluAlpha:l};if(null==i){return Rr(((t,e,n)=>{let r=Be.runKernel(At,x,N);return n([e,t,r]),m&&(r=gn(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:b}}))(d,h)}return Rr(((t,e,n,r)=>{let s=Be.runKernel(At,x,N);return r([e,t,s,n]),m&&(s=gn(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:b}}))(d,h,y)}});const Ta=He({fusedMatMul_:function({a:t,b:e,transposeA:n=!1,transposeB:r=!1,bias:s,activation:a="linear",preluActivationWeights:o,leakyreluAlpha:i}){if(!1===ba(Be.state.gradientDepth,a)){let u=wn(t,e,n,r);return null!=s&&(u=Ye(u,s)),ga(u,a,o,i)}let u=je(t,"a","fused matMul"),p=je(e,"b","fused matMul");[u,p]=Fe(u,p);const l=n?u.shape[u.rank-2]:u.shape[u.rank-1],c=r?p.shape[p.rank-1]:p.shape[p.rank-2],h=n?u.shape[u.rank-1]:u.shape[u.rank-2],d=r?p.shape[p.rank-2]:p.shape[p.rank-1],m=u.shape.slice(0,-2),f=p.shape.slice(0,-2),y=et(m),g=et(f);Y(l===c,(()=>`Error in fused matMul: inner shapes (${l}) and (${c}) of Tensors with shapes ${u.shape} and ${p.shape} and transposeA=${n} and transposeB=${r} must match.`));const b=Xn(u.shape.slice(0,-2),p.shape.slice(0,-2)).concat([h,d]),x=gn(u,n?[y,l,h]:[y,h,l]),N=gn(p,r?[g,d,c]:[g,c,d]);let k,w;null!=s&&(k=je(s,"bias","fused matMul"),[k]=Fe(k,u),Xn(b,k.shape)),null!=o&&(w=je(o,"prelu weights","fused matMul"));const T=(t,e)=>{const[o,i,u,p]=e,l=fa(gn(t,u.shape),u,a);let c,h;if(n||r?!n&&r?(c=wn(l,i,!1,!1),h=wn(l,o,!0,!1)):n&&!r?(c=wn(i,l,!1,!0),h=wn(o,l,!1,!1)):(c=wn(i,l,!0,!0),h=wn(l,o,!0,!0)):(c=wn(l,i,!1,!0),h=wn(o,l,!0,!1)),null!=s){return[c,h,ya(p,l)]}return[c,h]},_={a:x,b:N,bias:k,preluActivationWeights:w},v={transposeA:n,transposeB:r,activation:a,leakyreluAlpha:i};if(null==s){return Rr(((t,e,n)=>{const r=Be.runKernel(Dt,_,v);return n([t,e,r]),{value:gn(r,b),gradFunc:T}}))(x,N)}return Rr(((t,e,n,r)=>{const s=Be.runKernel(Dt,_,v);return r([t,e,s,n]),{value:gn(s,b),gradFunc:T}}))(x,N,k)}});He({hammingWindow_:function(t){return da(t,.54,.46)}});const _a=He({hannWindow_:function(t){return da(t,.5,.5)}});const va=He({frame_:function(t,e,n,r=!1,s=0){let a=0;const o=[];for(;a+e<=t.size;)o.push(vn(t,a,e)),a+=n;if(r)for(;a<t.size;){const r=a+e-t.size,i=kn([vn(t,a,e-r),Tr([r],s)]);o.push(i),a+=n}return 0===o.length?ea([],[0,e]):gn(kn(o),[o.length,e])}});He({stft_:function(t,e,n,r,s=_a){var a;null==r&&(a=e,r=Math.floor(Math.pow(2,Math.ceil(Math.log(a)/Math.log(2)))));const o=va(t,e,n),i=Tn(o,s(e));return Hs(i,r)}});const Sa=He({cropAndResize_:function(t,e,n,r,s="bilinear",a=0){const o=je(t,"image","cropAndResize"),i=je(e,"boxes","cropAndResize","float32"),u=je(n,"boxInd","cropAndResize","int32"),p=i.shape[0];Y(4===o.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${o.rank}.`)),Y(2===i.rank&&4===i.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${p},4] but had shape ${i.shape}.`)),Y(1===u.rank&&u.shape[0]===p,(()=>`Error in cropAndResize: boxInd must be have size [${p}] but had shape ${i.shape}.`)),Y(2===r.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`)),Y(r[0]>=1&&r[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${r}`)),Y("bilinear"===s||"nearest"===s,(()=>`method must be bilinear or nearest, but was ${s}`));const l={image:o,boxes:i,boxInd:u},c={method:s,extrapolationValue:a,cropSize:r};return Be.runKernel("CropAndResize",l,c)}});const Ea=He({flipLeftRight_:function(t){const e=je(t,"image","flipLeftRight","float32");Y(4===e.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${e.rank}.`));const n={image:e};return Be.runKernel("FlipLeftRight",n,{})}});const $a=He({grayscaleToRGB_:function(t){const e=je(t,"image","grayscaleToRGB"),n=e.rank-1,r=e.shape[n];Y(e.rank>=2,(()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${e.rank}.`)),Y(1===r,(()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${r}.`));const s=new Array(e.rank);return s.fill(1,0,n),s[n]=3,kr(e,s)}});const Ia=He({rotateWithOffset_:function(t,e,n=0,r=.5){const s=je(t,"image","rotateWithOffset","float32");Y(4===s.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${s.rank}.`));const a={image:s},o={radians:e,fillValue:n,center:r};return Be.runKernel("RotateWithOffset",a,o)}});function Da(t,e,n,r,s,a){null==r&&(r=.5),null==s&&(s=Number.NEGATIVE_INFINITY),null==a&&(a=0);const o=t.shape[0];return n=Math.min(n,o),Y(0<=r&&r<=1,(()=>`iouThreshold must be in [0, 1], but was '${r}'`)),Y(2===t.rank,(()=>`boxes must be a 2D tensor, but was of rank '${t.rank}'`)),Y(4===t.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${t.shape[1]}`)),Y(1===e.rank,(()=>"scores must be a 1D tensor")),Y(e.shape[0]===o,(()=>`scores has incompatible shape with boxes. Expected ${o}, but was ${e.shape[0]}`)),Y(0<=a&&a<=1,(()=>`softNmsSigma must be in [0, 1], but was '${a}'`)),{maxOutputSize:n,iouThreshold:r,scoreThreshold:s,softNmsSigma:a}}const Oa=He({nonMaxSuppression_:function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=je(t,"boxes","nonMaxSuppression","float32"),o=je(e,"scores","nonMaxSuppression","float32"),i=Da(a,o,n,r,s),u={maxOutputSize:n=i.maxOutputSize,iouThreshold:r=i.iouThreshold,scoreThreshold:s=i.scoreThreshold};return Be.runKernel("NonMaxSuppressionV3",{boxes:a,scores:o},u)}});function Aa(t,e,n){const r=function(t,e,n){return function(t,e,n){let r=0,s=t.length,a=0,o=!1;for(;r<s;){a=r+(s-r>>>1);const i=n(e,t[a]);i>0?r=a+1:(s=a,o=!i)}return o?r:-r-1}(t,e,n||Ma)}(t,e,n),s=r<0?-(r+1):r;t.splice(s,0,e)}function Ma(t,e){return t>e?1:t<e?-1:0}function Fa(t,e,n,r,s,a,o=!1,i=!1,u=!1){const p=[];for(let t=0;t<e.length;t++)e[t]>s&&p.push({score:e[t],boxIndex:t,suppressBeginIndex:0});p.sort(Ra);const l=a>0?-.5/a:0,c=[],h=[];for(;c.length<n&&p.length>0;){const e=p.pop(),{score:n,boxIndex:a,suppressBeginIndex:o}=e;if(n<s)break;let i=!1;for(let n=c.length-1;n>=o;--n){const o=Ca(t,a,c[n]);if(o>=r){i=!0;break}if(e.score=e.score*Va(r,l,o),e.score<=s)break}e.suppressBeginIndex=c.length,i||(e.score===n?(c.push(a),h.push(e.score)):e.score>s&&Aa(p,e,Ra))}const d=c.length,m=n-d;i&&m>0&&(c.push(...new Array(m).fill(0)),h.push(...new Array(m).fill(0)));const f={selectedIndices:c};return o&&(f.selectedScores=h),u&&(f.validOutputs=d),f}function Ca(t,e,n){const r=t.subarray(4*e,4*e+4),s=t.subarray(4*n,4*n+4),a=Math.min(r[0],r[2]),o=Math.min(r[1],r[3]),i=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),p=Math.min(s[0],s[2]),l=Math.min(s[1],s[3]),c=Math.max(s[0],s[2]),h=Math.max(s[1],s[3]),d=(i-a)*(u-o),m=(c-p)*(h-l);if(d<=0||m<=0)return 0;const f=Math.max(a,p),y=Math.max(o,l),g=Math.min(i,c),b=Math.min(u,h),x=Math.max(g-f,0)*Math.max(b-y,0);return x/(d+m-x)}function Va(t,e,n){const r=Math.exp(e*n*n);return n<=t?r:0}function Ra(t,e){return t.score-e.score||t.score===e.score&&e.boxIndex-t.boxIndex}const za=async function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=je(t,"boxes","nonMaxSuppressionAsync"),o=je(e,"scores","nonMaxSuppressionAsync"),i=Da(a,o,n,r,s);n=i.maxOutputSize,r=i.iouThreshold,s=i.scoreThreshold;const u=await Promise.all([a.data(),o.data()]),p=u[0],l=u[1],{selectedIndices:c}=function(t,e,n,r,s){return Fa(t,e,n,r,s,0)}(p,l,n,r,s);return a!==t&&a.dispose(),o!==e&&o.dispose(),ta(c,"int32")};const La=He({nonMaxSuppressionWithScore_:function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const o=je(t,"boxes","nonMaxSuppression"),i=je(e,"scores","nonMaxSuppression"),u=Da(o,i,n,r,s,a),p={boxes:o,scores:i},l={maxOutputSize:n=u.maxOutputSize,iouThreshold:r=u.iouThreshold,scoreThreshold:s=u.scoreThreshold,softNmsSigma:a=u.softNmsSigma},c=Be.runKernel("NonMaxSuppressionV5",p,l);return{selectedIndices:c[0],selectedScores:c[1]}}});const Ba=async function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const o=je(t,"boxes","nonMaxSuppressionAsync"),i=je(e,"scores","nonMaxSuppressionAsync"),u=Da(o,i,n,r,s,a);n=u.maxOutputSize,r=u.iouThreshold,s=u.scoreThreshold,a=u.softNmsSigma;const p=await Promise.all([o.data(),i.data()]),l=p[0],c=p[1],{selectedIndices:h,selectedScores:d}=function(t,e,n,r,s,a){return Fa(t,e,n,r,s,a,!0)}(l,c,n,r,s,a);return o!==t&&o.dispose(),i!==e&&i.dispose(),{selectedIndices:ta(h,"int32"),selectedScores:ta(d)}};const Pa=He({nonMaxSuppressionPadded_:function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const o=je(t,"boxes","nonMaxSuppression"),i=je(e,"scores","nonMaxSuppression"),u=Da(o,i,n,r,s,null),p={boxes:o,scores:i},l={maxOutputSize:u.maxOutputSize,iouThreshold:u.iouThreshold,scoreThreshold:u.scoreThreshold,padToMaxOutputSize:a},c=Be.runKernel("NonMaxSuppressionV4",p,l);return{selectedIndices:c[0],validOutputs:c[1]}}});const Ka=async function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const o=je(t,"boxes","nonMaxSuppressionAsync"),i=je(e,"scores","nonMaxSuppressionAsync"),u=Da(o,i,n,r,s,null),p=u.maxOutputSize,l=u.iouThreshold,c=u.scoreThreshold,[h,d]=await Promise.all([o.data(),i.data()]),{selectedIndices:m,validOutputs:f}=function(t,e,n,r,s,a){return Fa(t,e,n,r,s,0,!1,a,!0)}(h,d,p,l,c,a);return o!==t&&o.dispose(),i!==e&&i.dispose(),{selectedIndices:ta(m,"int32"),validOutputs:cr(f,"int32")}};const qa=He({resizeBilinear_:function(t,e,n=!1,r=!1){const s=je(t,"images","resizeBilinear");Y(3===s.rank||4===s.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${s.rank}.`)),Y(2===e.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${e}.`)),Y(!1===r||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let a=s,o=!1;3===s.rank&&(o=!0,a=gn(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const i={images:a},u={alignCorners:n,halfPixelCenters:r,size:e},p=Be.runKernel("ResizeBilinear",i,u);return o?gn(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});const Ua=He({resizeNearestNeighbor_:function(t,e,n=!1,r=!1){const s=je(t,"images","resizeNearestNeighbor");Y(3===s.rank||4===s.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${s.rank}.`)),Y(2===e.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${e}.`)),Y("float32"===s.dtype||"int32"===s.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),Y(!1===r||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let a=s,o=!1;3===s.rank&&(o=!0,a=gn(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const i={images:a},u={alignCorners:n,halfPixelCenters:r,size:e},p=Be.runKernel("ResizeNearestNeighbor",i,u);return o?gn(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});const ja=He({threshold_:function(t,e="binary",n=!1,r=.5){const s=je(t,"image","threshold"),a=s.shape[0]*s.shape[1];let o,i,u,p,l=Tn(ta([r]),255);if(Y(3===s.rank,(()=>`Error in threshold: image must be rank 3,but got rank ${s.rank}.`)),Y(3===s.shape[2]||1===s.shape[2],(()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${s.shape[2]}.`)),Y("int32"===s.dtype||"float32"===s.dtype,(()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${s.dtype}.`)),Y("otsu"===e||"binary"===e,(()=>`Method must be binary or otsu, but was ${e}`)),3===s.shape[2]){[o,i,u]=Ws(s,[1,1,1],-1);const t=Tn(o,.2989),e=Tn(i,.587),n=Tn(u,.114);p=Ye(Ye(t,e),n)}else p=t;if("otsu"===e){l=function(t,e){let n,r,s,a,o,i,u=ta([-1]),p=ta([0]),l=ta([0]);for(let c=0;c<t.size-1;c++){n=vn(t,0,c+1),r=vn(t,c+1),o=Yn(mr(n),e),i=Yn(mr(r),e);const h=mr(Tn(n,Is(0,n.size)));s=Yn(h,mr(n));const d=Tr(r.shape,n.size),m=Ye(Is(0,r.size),d),f=Tn(r,m);a=Yn(mr(f),mr(r));const y=Br(s,a),g=Br(s,a),b=Tn(o,i);l=Tn(Tn(b,y),g);const x=Sr(l,p);p=tr(x,l,p),u=tr(x,ta([c]),u)}return u}(In(pn(Cs(p),"int32"),lr(c=[],h,Ke(c,d),d),256),a)}var c,h,d;const m=n?Ar(p,l):Sr(p,l);return pn(Tn(m,255),"int32")}});const Wa=He({transform_:function(t,e,n="nearest",r="constant",s=0,a){const o=je(t,"image","transform","float32"),i=je(e,"transforms","transform","float32");Y(4===o.rank,(()=>`Error in transform: image must be rank 4,but got rank ${o.rank}.`)),Y(2===i.rank&&(i.shape[0]===o.shape[0]||1===i.shape[0])&&8===i.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),Y(null==a||2===a.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${a}.`));const u={image:o,transforms:i},p={interpolation:n,fillMode:r,fillValue:s,outputShape:a};return Be.runKernel("Transform",u,p)}});function Ha(t,e=!1){return Be.tidy((()=>{Y(2===t.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${t.shape.length}D Tensor.`));const n=t.shape[0],r=t.shape[1];let s=wr(n),a=Nn(t);const o=ea([[1]],[1,1]);let i=Nn(o);const u=n>=r?r:n;for(let t=0;t<u;++t){const e=a,u=i,p=s;[i,a,s]=Be.tidy((()=>{const e=vn(a,[t,t],[n-t,1]),u=yr(e),p=vn(a,[t,t],[1,1]),l=tr(Sr(p,0),ea([[-1]]),ea([[1]])),c=Br(p,Tn(l,u)),h=Yn(e,c);i=1===h.shape[0]?Nn(o):kn([o,vn(h,[1,0],[h.shape[0]-1,h.shape[1]])],0);const d=zr(Yn(wn(l,c),u)),m=vn(a,[t,0],[n-t,r]),f=Tn(d,i),y=ua(i);if(0===t)a=Br(m,wn(f,wn(y,m)));else{const e=Br(m,wn(f,wn(y,m)));a=kn([vn(a,[0,0],[t,r]),e],0)}const g=ua(f),b=vn(s,[0,t],[n,s.shape[1]-t]);if(0===t)s=Br(b,wn(wn(b,i),g));else{const e=Br(b,wn(wn(b,i),g));s=kn([vn(s,[0,0],[n,t]),e],1)}return[i,a,s]})),Ce([e,u,p]).forEach((t=>t.dispose()))}return!e&&n>r&&(s=vn(s,[0,0],[n,r]),a=vn(a,[0,0],[r,r])),[s,a]}))}var Ga;He({bandPart_:function(t,e,n){Y(e%1==0,(()=>`bandPart(): numLower must be an integer, got ${e}.`)),Y(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const r=je(t,"a","bandPart");Y(r.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`));const s=r.shape,[a,o]=r.shape.slice(-2);if(!(e<=a))throw new Error(`bandPart(): numLower (${e}) must not be greater than the number of rows (${a}).`);if(!(n<=o))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${o}).`);e<0&&(e=a),n<0&&(n=o);const i=gn(Is(0,a,1,"int32"),[-1,1]),u=Is(0,o,1,"int32"),p=Br(i,u),l=qr(Ar(p,cr(+e,"int32")),Er(p,cr(-n,"int32"))),c=ts([a,o],r.dtype);return gn(Qs(aa(gn(r,[-1,a,o])).map((t=>tr(l,t,c)))),s)}}),He({gramSchmidt_:function(t){let e;if(Array.isArray(t)){e=!1,Y(null!=t&&t.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=t[0].shape[0];for(let e=1;e<t.length;++e)Y(t[e].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${t[e].shape[0]} vs. ${n})`))}else e=!0,t=Ws(t,t.shape[0],0).map((t=>Zs(t,[0])));Y(t.length<=t[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${t.length}) exceeds number of dimensions (${t[0].shape[0]}).`));const n=[],r=t;for(let e=0;e<t.length;++e)n.push(Be.tidy((()=>{let t=r[e];if(e>0)for(let r=0;r<e;++r){const e=Tn(mr(Tn(n[r],t)),n[r]);t=Br(t,e)}return Yn(t,yr(t,"euclidean"))})));return e?Qs(n,0):n}}),He({qr_:function(t,e=!1){if(Y(t.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${t.rank}`)),2===t.rank)return Ha(t,e);{const n=t.shape.slice(0,t.shape.length-2).reduce(((t,e)=>t*e)),r=aa(gn(t,[n,t.shape[t.shape.length-2],t.shape[t.shape.length-1]]),0),s=[],a=[];r.forEach((t=>{const[n,r]=Ha(t,e);s.push(n),a.push(r)}));return[gn(Qs(s,0),t.shape),gn(Qs(a,0),t.shape)]}}}),function(t){t[t.NONE=0]="NONE",t[t.MEAN=1]="MEAN",t[t.SUM=2]="SUM",t[t.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(Ga||(Ga={}));const Za=He({computeWeightedLoss_:function(t,e,n=Ga.SUM_BY_NONZERO_WEIGHTS){const r=je(t,"losses","computeWeightedLoss");let s=null;null!=e&&(s=je(e,"weights","computeWeightedLoss"));const a=null==s?r:Tn(r,s);if(n===Ga.NONE)return a;if(n===Ga.SUM)return mr(a);if(n===Ga.MEAN){if(null==s)return Jr(a);{const t=r.size/s.size,e=Yn(mr(a),mr(s));return t>1?Yn(e,cr(t)):e}}if(n===Ga.SUM_BY_NONZERO_WEIGHTS){if(null==s)return Yn(mr(a),cr(r.size));{const t=Tn(s,es(r.shape)),e=pn(mr(os(t,cr(0))),"float32");return Yn(mr(a),e)}}throw Error(`Unknown reduction: ${n}`)}});He({absoluteDifference_:function(t,e,n,r=Ga.SUM_BY_NONZERO_WEIGHTS){const s=je(t,"labels","absoluteDifference"),a=je(e,"predictions","absoluteDifference");let o=null;null!=n&&(o=je(n,"weights","absoluteDifference")),X(s.shape,a.shape,"Error in absoluteDifference: ");const i=Ge(Br(s,a));return Za(i,o,r)}}),He({cosineDistance_:function(t,e,n,r,s=Ga.SUM_BY_NONZERO_WEIGHTS){const a=je(t,"labels","cosineDistance"),o=je(e,"predictions","cosineDistance");let i=null;null!=r&&(i=je(r,"weights","cosineDistance")),X(a.shape,o.shape,"Error in cosineDistance: ");const u=cr(1),p=Br(u,mr(Tn(a,o),n,!0));return Za(p,i,s)}}),He({hingeLoss_:function(t,e,n,r=Ga.SUM_BY_NONZERO_WEIGHTS){let s=je(t,"labels","hingeLoss");const a=je(e,"predictions","hingeLoss");let o=null;null!=n&&(o=je(n,"weights","hingeLoss")),X(s.shape,a.shape,"Error in hingeLoss: ");const i=cr(1);s=Br(Tn(cr(2),s),i);const u=As(Br(i,Tn(s,a)));return Za(u,o,r)}}),He({huberLoss_:function(t,e,n,r=1,s=Ga.SUM_BY_NONZERO_WEIGHTS){const a=je(t,"labels","huberLoss"),o=je(e,"predictions","huberLoss");let i=null;null!=n&&(i=je(n,"weights","huberLoss")),X(a.shape,o.shape,"Error in huberLoss: ");const u=cr(r),p=Ge(Br(o,a)),l=ns(p,u),c=Br(p,l),h=Ye(Tn(cr(.5),dr(l)),Tn(u,c));return Za(h,i,s)}}),He({logLoss_:function(t,e,n,r=1e-7,s=Ga.SUM_BY_NONZERO_WEIGHTS){const a=je(t,"labels","logLoss"),o=je(e,"predictions","logLoss");let i=null;null!=n&&(i=je(n,"weights","logLoss")),X(a.shape,o.shape,"Error in logLoss: ");const u=cr(1),p=cr(r),l=zr(Tn(a,Cr(Ye(o,p)))),c=Tn(Br(u,a),Cr(Ye(Br(u,o),p))),h=Br(l,c);return Za(h,i,s)}}),He({meanSquaredError_:function(t,e,n,r=Ga.SUM_BY_NONZERO_WEIGHTS){const s=je(t,"labels","meanSquaredError"),a=je(e,"predictions","meanSquaredError");let o=null;null!=n&&(o=je(n,"weights","meanSquaredError")),X(s.shape,a.shape,"Error in meanSquaredError: ");const i=Gs(s,a);return Za(i,o,r)}}),He({sigmoidCrossEntropy_:function(t,e,n,r=0,s=Ga.SUM_BY_NONZERO_WEIGHTS){let a=je(t,"multiClassLabels","sigmoidCrossEntropy");const o=je(e,"logits","sigmoidCrossEntropy");let i=null;if(null!=n&&(i=je(n,"weights","sigmoidCrossEntropy")),X(a.shape,o.shape,"Error in sigmoidCrossEntropy: "),r>0){const t=cr(r),e=cr(1),n=cr(.5);a=Ye(Tn(a,Br(e,t)),Tn(n,t))}const u=function(t,e){const n=je(t,"labels","sigmoidCrossEntropyWithLogits"),r=je(e,"logits","sigmoidCrossEntropyWithLogits");X(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const s=As(r),a=Tn(r,n),o=Vr(br(zr(Ge(r))));return Ye(Br(s,a),o)}(a,o);return Za(u,i,s)}}),He({softmaxCrossEntropy_:function(t,e,n,r=0,s=Ga.SUM_BY_NONZERO_WEIGHTS){let a=je(t,"onehotLabels","softmaxCrossEntropy");const o=je(e,"logits","softmaxCrossEntropy");let i=null;if(null!=n&&(i=je(n,"weights","softmaxCrossEntropy")),X(a.shape,o.shape,"Error in softmaxCrossEntropy: "),r>0){const t=cr(r),e=cr(1),n=cr(a.shape[1]);a=Ye(Tn(a,Br(e,t)),Yn(t,n))}const u=function(t,e,n=-1){if(-1===n&&(n=e.rank-1),n!==e.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${e.rank} and dim was ${n}`);return Rr(((t,e,r)=>{const s=Kr(e,[n],!0),a=Br(pn(e,"float32"),s);r([t,a]);const o=zr(Tn(a,t));return{value:mr(o,[n]),gradFunc:(t,e)=>{const[r,s]=e,a=or(t.shape,[n]);return[Tn(gn(t,a),Br(pn(r,"float32"),br(s))),Tn(gn(t,a),Br(br(s),pn(r,"float32")))]}}}))(t,e)}(a,o);return Za(u,i,s)}});const Qa=He({sparseFillEmptyRows_:function(t,e,n,r){const s=je(t,"indices","sparseFillEmptyRows","int32"),a=je(e,"values","sparseFillEmptyRows"),o=je(n,"denseShape","sparseFillEmptyRows","int32"),i=je(r,"defaultValue","sparseFillEmptyRows",a.dtype);if(2!==s.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${s.shape}`);if(1!==a.rank)throw new Error(`Values should be Tensor1D but received shape ${a.shape}`);if(1!==o.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${o.shape}`);if(0!==i.rank)throw new Error(`Default value should be a scalar but received shape ${i.shape}`);const u={indices:s,values:a,denseShape:o,defaultValue:i},p=Be.runKernel("SparseFillEmptyRows",u);return{outputIndices:p[0],outputValues:p[1],emptyRowIndicator:p[2],reverseIndexMap:p[3]}}});const Ya=He({sparseReshape_:function(t,e,n){const r=je(t,"inputIndices","sparseReshape","int32"),s=je(e,"inputShape","sparseReshape","int32"),a=je(n,"newShape","sparseReshape","int32");if(2!==r.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==s.rank)throw new Error(`Input shape should be Tensor1D but received shape ${s.shape}`);if(1!==a.rank)throw new Error(`New shape should be Tensor1D but received shape ${a.shape}`);const o={inputIndices:r,inputShape:s,newShape:a},i=Be.runKernel("SparseReshape",o);return{outputIndices:i[0],outputShape:i[1]}}});const Xa=He({sparseSegmentMean_:function(t,e,n){const r=je(t,"data","sparseSegmentMean"),s=je(e,"indices","sparseSegmentMean","int32"),a=je(n,"segmentIds","sparseSegmentMean","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${s.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${a.shape}`);const o={data:r,indices:s,segmentIds:a};return Be.runKernel("SparseSegmentMean",o)}});const Ja=He({sparseSegmentSum_:function(t,e,n){const r=je(t,"data","sparseSegmentSum"),s=je(e,"indices","sparseSegmentSum","int32"),a=je(n,"segmentIds","sparseSegmentSum","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${s.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${a.shape}`);const o={data:r,indices:s,segmentIds:a};return Be.runKernel("SparseSegmentSum",o)}});const to=He({stringNGrams_:function(t,e,n,r,s,a,o,i){const u=je(t,"data","stringNGrams","string");if("string"!==u.dtype)throw new Error("Data must be of datatype string");if(1!==u.shape.length)throw new Error(`Data must be a vector, saw: ${u.shape}`);const p=je(e,"dataSplits","stringNGrams");if("int32"!==p.dtype)throw new Error("Data splits must be of datatype int32");const l={separator:n,nGramWidths:r,leftPad:s,rightPad:a,padWidth:o,preserveShortSequences:i},c={data:u,dataSplits:p},h=Be.runKernel("StringNGrams",c,l);return{nGrams:h[0],nGramsSplits:h[1]}}});const eo=He({stringSplit_:function(t,e,n=!0){const r=je(t,"input","stringSplit","string"),s=je(e,"delimiter","stringSplit","string");if(1!==r.rank)throw new Error(`Input should be Tensor1D but received shape ${r.shape}`);if(0!==s.rank)throw new Error(`Delimiter should be a scalar but received shape ${s.shape}`);const a={skipEmpty:n},o={input:r,delimiter:s},i=Be.runKernel("StringSplit",o,a);return{indices:i[0],values:i[1],shape:i[2]}}});const no=He({stringToHashBucketFast_:function(t,e){const n=je(t,"input","stringToHashBucketFast","string"),r={numBuckets:e};if(e<=0)throw new Error("Number of buckets must be at least 1");const s={input:n};return Be.runKernel("StringToHashBucketFast",s,r)}}),ro={flipLeftRight:Ea,grayscaleToRGB:$a,resizeNearestNeighbor:Ua,resizeBilinear:qa,rotateWithOffset:Ia,cropAndResize:Sa,nonMaxSuppression:Oa,nonMaxSuppressionAsync:za,nonMaxSuppressionWithScore:La,nonMaxSuppressionWithScoreAsync:Ba,nonMaxSuppressionPadded:Pa,nonMaxSuppressionPaddedAsync:Ka,threshold:ja,transform:Wa},so={sparseFillEmptyRows:Qa,sparseReshape:Ya,sparseSegmentMean:Xa,sparseSegmentSum:Ja},ao={stringNGrams:to,stringSplit:eo,stringToHashBucketFast:no};function oo(t,n,r=""){if("number"!=typeof t&&"number"!=typeof n){e.util.assert(t.length===n.length,(()=>r+` Shapes ${t} and ${n} must match`));for(let s=0;s<t.length;s++){const a=t[s],o=n[s];e.util.assert(a<0||o<0||a===o,(()=>r+` Shapes ${t} and ${n} must match`))}}}function io(t){return"number"!=typeof t&&!t.some((t=>t<0))}function uo(t,e,n){let r=po(t,n);const s=!io(r);if(s&&0===e.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${r}`);if(s&&e.forEach((t=>{r=po(t.shape,r)})),!io(r))throw new Error(`Non-fully-defined elementShape: ${r}`);return r}function po(t,e){if("number"==typeof t)return e;if("number"==typeof e)return t;if(t.length!==e.length)throw new Error(`Incompatible ranks during merge: ${t} vs. ${e}`);const n=[];for(let r=0;r<t.length;++r){const s=t[r],a=e[r];if(s>=0&&a>=0&&s!==a)throw new Error(`Incompatible shape during merge: ${t} vs. ${e}`);n[r]=s>=0?s:a}return n}class lo{constructor(t,n,r,s,a,o,i){this.name=t,this.dtype=n,this.maxSize=r,this.elementShape=s,this.identicalElementShapes=a,this.dynamicSize=o,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.idTensor=e.scalar(0),e.keep(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(t){this.tensors.forEach((e=>{null!=t&&t.has(e.tensor.id)||e.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||t>=this.size())throw new Error(`Tried to read from index ${t}, but array size is: ${this.size()}`);const e=this.tensors[t];if(e.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${t} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(e.cleared=!0),e.read=!0,e.tensor}readMany(t){return t.map((t=>this.read(t)))}write(t,n){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||!this.dynamicSize&&t>=this.maxSize)throw new Error(`Tried to write to index ${t}, but array is not resizeable and size is: ${this.maxSize}`);const r=this.tensors[t]||{};if(n.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t},\n          because the value dtype is ${n.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=n.shape),oo(this.elementShape,n.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${t}.`),r.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been read.`);if(r.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been written.`);r.tensor=n,e.keep(n),r.written=!0,this.tensors[t]=r}writeMany(t,e){if(t.length!==e.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${t.length} is not the same as tensors size: ${e.length}.`);t.forEach(((t,n)=>this.write(t,e[n])))}gather(t,n){if(n&&n!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${n}`);if(t)t=t.slice(0,this.size());else{t=[];for(let e=0;e<this.size();e++)t.push(e)}if(0===t.length)return e.tensor([],[0].concat(this.elementShape));const r=this.readMany(t);return oo(this.elementShape,r[0].shape,"TensorArray shape mismatch: "),e.stack(r,0)}concat(t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${t}`);if(0===this.size())return e.tensor([],[0].concat(this.elementShape));const n=[];for(let t=0;t<this.size();t++)n.push(t);const r=this.readMany(n);return oo(this.elementShape,r[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${r[0].shape})`),e.concat(r,0)}scatter(t,n){if(n.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${n.dtype}`);if(t.length!==n.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${n.shape[0]}`);const r=Math.max(...t);if(!this.dynamicSize&&r>=this.maxSize)throw new Error(`Max index must be < array size (${r}  vs. ${this.maxSize})`);this.writeMany(t,e.unstack(n,0))}split(t,n){if(n.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${n.dtype}`);let r=0;const s=t.map((t=>(r+=t,r)));if(r!==n.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${r}, and tensor's shape is: ${n.shape}`);if(!this.dynamicSize&&t.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${t.length}), and the TensorArray is not marked as dynamically resizeable`);const a=0===r?0:n.size/r,o=[];e.tidy((()=>{n=e.reshape(n,[1,r,a]);for(let r=0;r<t.length;++r){const i=[0,0===r?0:s[r-1],0],u=[1,t[r],a];o[r]=e.reshape(e.slice(n,i,u),this.elementShape)}return o}));const i=[];for(let e=0;e<t.length;e++)i[e]=e;this.writeMany(i,o)}}class co{constructor(t,n,r,s=-1){this.tensors=t,this.elementShape=n,this.elementDtype=r,null!=t&&t.forEach((t=>{if(r!==t.dtype)throw new Error(`Invalid data types; op elements ${r}, but list elements ${t.dtype}`);oo(n,t.shape,"TensorList shape mismatch: "),e.keep(t)})),this.idTensor=e.scalar(0),this.maxNumElements=s,e.keep(this.idTensor)}get id(){return this.idTensor.id}copy(){return new co([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(t){this.tensors.forEach((e=>{null!=t&&t.has(e.id)||e.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(t,n,r=-1){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(-1!==r&&this.tensors.length!==r)throw new Error(`Operation expected a list with ${r} elements but got a list with ${this.tensors.length} elements.`);oo(t,this.elementShape,"TensorList shape mismatch: ");const s=uo(this.elementShape,this.tensors,t);return e.tidy((()=>{const t=this.tensors.map((t=>e.reshape(t,s)));return e.stack(t,0)}))}popBack(t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const r=uo(this.elementShape,this.tensors,t),s=this.tensors.pop();return oo(s.shape,t,"TensorList shape mismatch: "),e.reshape(s,r)}pushBack(t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(oo(t.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");e.keep(t),this.tensors.push(t)}resize(t){if(t<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${t}`);if(-1!==this.maxNumElements&&t>this.maxNumElements)throw new Error(`TensorListResize input size ${t} is greater maxNumElement ${this.maxNumElements}.`);const e=new co([],this.elementShape,this.elementDtype,this.maxNumElements);e.tensors.length=t;for(let n=0;n<Math.min(this.tensors.length,t);++n)e.tensors[n]=this.tensors[n];return e}getItem(t,n,r){if(r!==this.elementDtype)throw new Error(`Invalid data types; op elements ${r}, but list elements ${this.elementDtype}`);if(t<0||t>this.tensors.length)throw new Error(`Trying to access element ${t} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[t])throw new Error(`element at index ${t} is null.`);oo(this.tensors[t].shape,n,"TensorList shape mismatch: ");const s=uo(this.elementShape,this.tensors,n);return e.reshape(this.tensors[t],s)}setItem(t,n){if(n.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n.dtype}, but list elements ${this.elementDtype}`);if(t<0||-1!==this.maxNumElements&&t>=this.maxNumElements)throw new Error(`Trying to set element ${t} in a list with max ${this.maxNumElements} elements.`);oo(this.elementShape,n.shape,"TensorList shape mismatch: "),e.keep(n),this.tensors[t]=n}gather(t,n,r){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);oo(this.elementShape,r,"TensorList shape mismatch: "),t=t.slice(0,this.size());const s=uo(this.elementShape,this.tensors,r);return 0===t.length?e.tensor([],[0].concat(s)):e.tidy((()=>{const n=t.map((t=>e.reshape(this.tensors[t],s)));return e.stack(n,0)}))}concat(t,n){if(t&&t!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${t}`);oo(this.elementShape,n,"TensorList shape mismatch: ");const r=uo(this.elementShape,this.tensors,n);return 0===this.size()?e.tensor([],[0].concat(r)):e.tidy((()=>{const t=this.tensors.map((t=>e.reshape(t,r)));return e.concat(t,0)}))}}const ho=async(t,n,r)=>{switch(t.op){case"If":case"StatelessIf":{const e=u("thenBranch",t,n,r),s=u("elseBranch",t,n,r),a=u("cond",t,n,r),o=u("args",t,n,r);return(await a.data())[0]?r.functionMap[e].executeFunctionAsync(o,r.tensorArrayMap,r.tensorListMap):r.functionMap[s].executeFunctionAsync(o,r.tensorArrayMap,r.tensorListMap)}case"While":case"StatelessWhile":{const e=u("body",t,n,r),s=u("cond",t,n,r),a=u("args",t,n,r),o=await r.functionMap[s].executeFunctionAsync(a,r.tensorArrayMap,r.tensorListMap),i=a.map((t=>t.id));let p=await o[0].data();o.forEach((t=>{t.kept||-1!==i.indexOf(t.id)||t.dispose()}));let l=a;for(;p[0];){const t=l;l=await r.functionMap[e].executeFunctionAsync(l,r.tensorArrayMap,r.tensorListMap);const n=l.map((t=>t.id));t.forEach((t=>{t.kept||-1!==i.indexOf(t.id)||-1!==n.indexOf(t.id)||t.dispose()}));const a=await r.functionMap[s].executeFunctionAsync(l,r.tensorArrayMap,r.tensorListMap);p=await a[0].data(),a.forEach((t=>{t.kept||-1!==i.indexOf(t.id)||-1!==n.indexOf(t.id)||t.dispose()}))}return l}case"LoopCond":return[m(u("pred",t,n,r))];case"Switch":{const e=u("pred",t,n,r);let s=u("data",t,n,r);return s.kept||(s=m(s)),(await e.data())[0]?[void 0,s]:[s,void 0]}case"Merge":{const e=t.inputNames.find((t=>void 0!==p(t,n,r)));if(e){return[m(p(e,n,r))]}return}case"Enter":{const e=u("frameName",t,n,r),s=u("tensor",t,n,r);return r.enterFrame(e),[m(s)]}case"Exit":{const e=u("tensor",t,n,r);return r.exitFrame(),[m(e)]}case"NextIteration":{const e=u("tensor",t,n,r);return r.nextIteration(),[m(e)]}case"TensorArrayV3":{const s=u("size",t,n,r),a=u("dtype",t,n,r),o=u("elementShape",t,n,r),i=u("dynamicSize",t,n,r),p=u("clearAfterRead",t,n,r),l=u("identicalElementShapes",t,n,r),c=u("name",t,n,r),h=new lo(c,a,s,o,l,i,p);return r.addTensorArray(h),[h.idTensor,e.scalar(1)]}case"TensorArrayWriteV3":{const e=u("tensorArrayId",t,n,r),s=u("index",t,n,r),a=u("tensor",t,n,r),o=r.getTensorArray(e.id);return o.write(s,a),[o.idTensor]}case"TensorArrayReadV3":{const e=u("tensorArrayId",t,n,r),s=u("index",t,n,r);return[r.getTensorArray(e.id).read(s)]}case"TensorArrayGatherV3":{const e=u("tensorArrayId",t,n,r),s=u("indices",t,n,r),a=u("dtype",t,n,r);return[r.getTensorArray(e.id).gather(s,a)]}case"TensorArrayScatterV3":{const e=u("tensorArrayId",t,n,r),s=u("indices",t,n,r),a=u("tensor",t,n,r),o=r.getTensorArray(e.id);return o.scatter(s,a),[o.idTensor]}case"TensorArrayConcatV3":{const e=u("tensorArrayId",t,n,r),s=r.getTensorArray(e.id),a=u("dtype",t,n,r);return[s.concat(a)]}case"TensorArraySplitV3":{const e=u("tensorArrayId",t,n,r),s=u("tensor",t,n,r),a=u("lengths",t,n,r),o=r.getTensorArray(e.id);return o.split(a,s),[o.idTensor]}case"TensorArraySizeV3":{const s=u("tensorArrayId",t,n,r),a=r.getTensorArray(s.id);return[e.scalar(a.size(),"int32")]}case"TensorArrayCloseV3":{const e=u("tensorArrayId",t,n,r),s=r.getTensorArray(e.id);return s.clearAndClose(),[s.idTensor]}case"TensorListSetItem":{const e=u("tensorListId",t,n,r),s=u("index",t,n,r),a=u("tensor",t,n,r),o=r.getTensorList(e.id);return o.setItem(s,a),[o.idTensor]}case"TensorListGetItem":{const e=u("tensorListId",t,n,r),s=u("index",t,n,r),a=u("elementShape",t,n,r),o=u("elementDType",t,n,r);return[r.getTensorList(e.id).getItem(s,a,o)]}case"TensorListScatterV2":case"TensorListScatter":{const s=u("indices",t,n,r),a=function(t,n,r,s){if(n.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${n.length} vs. ${t.shape[0]}`);const a=Math.max(...n);if(null!=s&&-1!==s&&a>=s)throw new Error(`Max index must be < array size (${a}  vs. ${s})`);const o=new co([],r,t.dtype,s),i=e.unstack(t,0);return n.forEach(((t,e)=>{o.setItem(t,i[e])})),o}(u("tensor",t,n,r),s,u("elementShape",t,n,r),u("numElements",t,n,r));return r.addTensorList(a),[a.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const e=u("elementShape",t,n,r),s=u("elementDType",t,n,r);let a;a="TensorListReserve"===t.op?"numElements":"maxNumElements";const o=function(t,e,n){return new co([],t,e,n)}(e,s,u(a,t,n,r));return r.addTensorList(o),[o.idTensor]}case"TensorListGather":{const e=u("tensorListId",t,n,r),s=u("indices",t,n,r),a=u("elementShape",t,n,r),o=u("elementDType",t,n,r);return[r.getTensorList(e.id).gather(s,o,a)]}case"TensorListStack":{const e=u("tensorListId",t,n,r),s=u("elementShape",t,n,r),a=u("elementDType",t,n,r),o=u("numElements",t,n,r);return[r.getTensorList(e.id).stack(s,a,o)]}case"TensorListFromTensor":{const s=function(t,n,r){const s=t.dtype;if(t.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${t.shape}`);if(t.dtype!==r)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${r}`);oo(t.shape.slice(1),n,"TensorList shape mismatch: ");const a=e.unstack(t);return new co(a,n,s)}(u("tensor",t,n,r),u("elementShape",t,n,r),u("elementDType",t,n,r));return r.addTensorList(s),[s.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{const e=u("tensorListId",t,n,r),s=r.getTensorList(e.id),a=u("dtype",t,n,r),o=u("elementShape",t,n,r);return[s.concat(a,o)]}case"TensorListPushBack":{const e=u("tensorListId",t,n,r),s=u("tensor",t,n,r),a=r.getTensorList(e.id);return a.pushBack(s),[a.idTensor]}case"TensorListPopBack":{const e=u("tensorListId",t,n,r),s=u("elementShape",t,n,r),a=u("elementDType",t,n,r);return[r.getTensorList(e.id).popBack(s,a)]}case"TensorListSplit":{const s=u("tensor",t,n,r),a=u("elementShape",t,n,r),o=function(t,n,r){let s=0;const a=n.map((t=>(s+=t,s)));if(s!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${s}, and tensor's shape is: ${t.shape}`);const o=po(t.shape.slice(1),r),i=0===s?0:t.size/s,u=e.tidy((()=>{const r=[];t=e.reshape(t,[1,s,i]);for(let s=0;s<n.length;++s){const u=[0,0===s?0:a[s-1],0],p=[1,n[s],i];r[s]=e.reshape(e.slice(t,u,p),o)}return t.dispose(),r})),p=new co([],r,t.dtype,n.length);for(let t=0;t<u.length;t++)p.setItem(t,u[t]);return p}(s,u("lengths",t,n,r),a);return r.addTensorList(o),[o.idTensor]}case"TensorListLength":{const s=u("tensorListId",t,n,r),a=r.getTensorList(s.id);return[e.scalar(a.size(),"int32")]}case"TensorListResize":{const e=u("tensorListId",t,n,r),s=u("size",t,n,r),a=r.getTensorList(e.id).resize(s);return r.addTensorList(a),[a.idTensor]}default:throw TypeError(`Node type ${t.op} is not implemented`)}};function mo(t,e,n){const[r,s]=u("fusedOps",t,e,n),a="biasadd"===r,o=!a,i="prelu"===s,p="fusedbatchnorm"===r,l=u("numArgs",t,e,n);if(a){if(i&&2!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&a&&1!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(p)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const c=u("strides",t,e,n),h=d(t,e,n),m=u("dataFormat",t,e,n).toUpperCase(),f=u("dilations",t,e,n);let[y,g]=u("args",t,e,n);o&&(g=y,y=void 0);return{stride:c,pad:h,dataFormat:m,dilations:f,biasArg:y,preluArg:g,activationFunc:s,leakyreluAlpha:u("leakyreluAlpha",t,e,n)}}function fo(t,e,n){return{boxes:u("boxes",t,e,n),scores:u("scores",t,e,n),maxOutputSize:u("maxOutputSize",t,e,n),iouThreshold:u("iouThreshold",t,e,n),scoreThreshold:u("scoreThreshold",t,e,n),softNmsSigma:u("softNmsSigma",t,e,n)}}class yo{constructor(t,n){this.keyDType=t,this.valueDType=n,this.handle=e.scalar(0),this.tensorMap=new Map,e.keep(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach((t=>t.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return cr(this.size(),"int32")}async import(t,n){this.checkKeyAndValueTensor(t,n);const r=await t.data();return this.tensorMap.forEach((t=>t.dispose())),this.tensorMap.clear(),e.tidy((()=>{const t=e.unstack(n),s=r.length,a=t.length;e.util.assert(s===a,(()=>`The number of elements doesn't match, keys has ${s} elements, the values has ${a} elements.`));for(let n=0;n<s;n++){const s=r[n],a=t[n];e.keep(a),this.tensorMap.set(s,a)}return this.handle}))}async find(t,n){this.checkKeyAndValueTensor(t,n);const r=await t.data();return e.tidy((()=>{const t=[];for(let e=0;e<r.length;e++){const s=r[e],a=this.findWithDefault(s,n);t.push(a)}return e.stack(t)}))}findWithDefault(t,e){const n=this.tensorMap.get(t);return null!=n?n:e}checkKeyAndValueTensor(t,e){if(t.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${t.dtype}`);if(e.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${e.dtype}`)}}function go(t,n,s,a){const o=((t,n,s)=>{switch(t.category){case"arithmetic":return r.tidy((()=>((t,e,n)=>{switch(t.op){case"BiasAdd":case"AddV2":case"Add":return[Ye(u("a",t,e,n),u("b",t,e,n))];case"AddN":return[Xe(u("tensors",t,e,n))];case"FloorMod":case"Mod":return[ss(u("a",t,e,n),u("b",t,e,n))];case"Mul":return[Tn(u("a",t,e,n),u("b",t,e,n))];case"RealDiv":case"Div":return[Yn(u("a",t,e,n),u("b",t,e,n))];case"DivNoNan":return[nr(u("a",t,e,n),u("b",t,e,n))];case"FloorDiv":return[Qn(u("a",t,e,n),u("b",t,e,n))];case"Sub":return[Br(u("a",t,e,n),u("b",t,e,n))];case"Minimum":return[ns(u("a",t,e,n),u("b",t,e,n))];case"Maximum":return[Xr(u("a",t,e,n),u("b",t,e,n))];case"Pow":return[pr(u("a",t,e,n),u("b",t,e,n))];case"SquaredDifference":return[Gs(u("a",t,e,n),u("b",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,n,s)));case"basic_math":return r.tidy((()=>((t,e,n)=>{switch(t.op){case"Abs":case"ComplexAbs":return[Ge(u("x",t,e,n))];case"Acos":return[Ze(u("x",t,e,n))];case"Acosh":return[Qe(u("x",t,e,n))];case"Asin":return[rn(u("x",t,e,n))];case"Asinh":return[sn(u("x",t,e,n))];case"Atan":return[an(u("x",t,e,n))];case"Atan2":return[on(u("x",t,e,n),u("y",t,e,n))];case"Atanh":return[un(u("x",t,e,n))];case"Ceil":return[Mn(u("x",t,e,n))];case"Complex":return[Cn(u("real",t,e,n),u("imag",t,e,n))];case"Cos":return[Kn(u("x",t,e,n))];case"Cosh":return[qn(u("x",t,e,n))];case"Elu":return[sr(u("x",t,e,n))];case"Erf":return[ar(u("x",t,e,n))];case"Exp":return[br(u("x",t,e,n))];case"Expm1":return[Nr(u("x",t,e,n))];case"Floor":return[_r(u("x",t,e,n))];case"Log":return[Cr(u("x",t,e,n))];case"Log1p":return[Vr(u("x",t,e,n))];case"Imag":return[$r(u("x",t,e,n))];case"Neg":return[zr(u("x",t,e,n))];case"Reciprocal":return[Os(u("x",t,e,n))];case"Real":return[Ds(u("x",t,e,n))];case"Relu":return[As(u("x",t,e,n))];case"Round":return[Cs(u("x",t,e,n))];case"Selu":return[Rs(u("x",t,e,n))];case"Sigmoid":return[_n(u("x",t,e,n))];case"Sin":return[Bs(u("x",t,e,n))];case"Sign":return[Ls(u("x",t,e,n))];case"Sinh":return[Ps(u("x",t,e,n))];case"Softplus":return[Lr(u("x",t,e,n))];case"Sqrt":return[hr(u("x",t,e,n))];case"Square":return[dr(u("x",t,e,n))];case"Tanh":return[Sn(u("x",t,e,n))];case"Tan":return[Js(u("x",t,e,n))];case"ClipByValue":return[Fn(u("x",t,e,n),u("clipValueMin",t,e,n),u("clipValueMax",t,e,n))];case"Relu6":return[Ms(u("x",t,e,n))];case"Rsqrt":return[Vs(p(t.inputNames[0],e,n))];case"Prod":return[hs(u("x",t,e,n),u("axes",t,e,n))];case"LeakyRelu":return[Dr(u("x",t,e,n),u("alpha",t,e,n))];case"Prelu":return[cs(u("x",t,e,n),u("alpha",t,e,n))];case"IsNan":return[Ir(p(t.inputNames[0],e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,n,s)));case"control":return ho(t,n,s);case"convolution":return r.tidy((()=>((t,e,n)=>{switch(t.op){case"Conv1D":{const r=u("stride",t,e,n),s=u("pad",t,e,n),a=u("dataFormat",t,e,n).toUpperCase(),o=u("dilation",t,e,n);return[Rn(u("x",t,e,n),u("filter",t,e,n),r,s,a,o)]}case"Conv2D":{const r=u("strides",t,e,n),s=d(t,e,n),a=u("dataFormat",t,e,n).toUpperCase(),o=u("dilations",t,e,n);return[Vn(u("x",t,e,n),u("filter",t,e,n),[r[1],r[2]],s,a,[o[1],o[2]])]}case"_FusedConv2D":{const{stride:r,pad:s,dataFormat:a,dilations:o,biasArg:i,preluArg:p,activationFunc:l,leakyreluAlpha:c}=mo(t,e,n);return[xa({x:u("x",t,e,n),filter:u("filter",t,e,n),strides:[r[1],r[2]],pad:s,dataFormat:a,dilations:[o[1],o[2]],bias:i,activation:l,preluActivationWeights:p,leakyreluAlpha:c})]}case"FusedDepthwiseConv2dNative":{const{stride:r,pad:s,dataFormat:a,dilations:o,biasArg:i,preluArg:p,activationFunc:l,leakyreluAlpha:c}=mo(t,e,n);return[wa({x:u("x",t,e,n),filter:u("filter",t,e,n),strides:[r[1],r[2]],pad:s,dataFormat:a,dilations:[o[1],o[2]],bias:i,activation:l,preluActivationWeights:p,leakyreluAlpha:c})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const r=u("outputShape",t,e,n),s=u("strides",t,e,n),a=d(t,e,n);return[Ln(u("x",t,e,n),u("filter",t,e,n),r,[s[1],s[2]],a)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const r=u("strides",t,e,n),s=d(t,e,n),a=u("dilations",t,e,n),o=u("dataFormat",t,e,n).toUpperCase();return[Gn(u("input",t,e,n),u("filter",t,e,n),[r[1],r[2]],s,o,[a[1],a[2]])]}case"Conv3D":{const r=u("strides",t,e,n),s=u("pad",t,e,n),a=u("dataFormat",t,e,n).toUpperCase(),o=u("dilations",t,e,n);return[Bn(u("x",t,e,n),u("filter",t,e,n),[r[1],r[2],r[3]],s,a,[o[1],o[2],o[3]])]}case"AvgPool":{const r=u("strides",t,e,n),s=u("pad",t,e,n),a=u("kernelSize",t,e,n);return[bn(u("x",t,e,n),[a[1],a[2]],[r[1],r[2]],s)]}case"MaxPool":{const r=u("strides",t,e,n),s=u("pad",t,e,n),a=u("kernelSize",t,e,n);return[Zr(u("x",t,e,n),[a[1],a[2]],[r[1],r[2]],s)]}case"MaxPoolWithArgmax":{const r=u("strides",t,e,n),s=u("pad",t,e,n),a=u("kernelSize",t,e,n),o=u("includeBatchInIndex",t,e,n),{result:i,indexes:p}=Yr(u("x",t,e,n),[a[1],a[2]],[r[1],r[2]],s,o);return[i,p]}case"AvgPool3D":{const r=u("strides",t,e,n),s=u("pad",t,e,n),a=u("kernelSize",t,e,n);return[xn(u("x",t,e,n),[a[1],a[2],a[3]],[r[1],r[2],r[3]],s)]}case"MaxPool3D":{const r=u("strides",t,e,n),s=u("pad",t,e,n),a=u("kernelSize",t,e,n);return[Qr(u("x",t,e,n),[a[1],a[2],a[3]],[r[1],r[2],r[3]],s)]}case"Dilation2D":{const r=u("strides",t,e,n),s=u("pad",t,e,n),a=u("dilations",t,e,n),o=r[1],i=r[2],p=a[1],l=a[2];return[Zn(u("x",t,e,n),u("filter",t,e,n),[o,i],s,[p,l],"NHWC")]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,n,s)));case"creation":return r.tidy((()=>((t,e,n)=>{switch(t.op){case"Fill":{const r=u("shape",t,e,n),s=u("dtype",t,e,n);return[Tr(r,u("value",t,e,n),s)]}case"LinSpace":return[Mr(u("start",t,e,n),u("stop",t,e,n),u("num",t,e,n))];case"Multinomial":{const r=u("logits",t,e,n),s=u("numSamples",t,e,n),a=u("seed",t,e,n);return[as(r,s,a)]}case"OneHot":{const r=u("indices",t,e,n),s=u("depth",t,e,n),a=u("onValue",t,e,n),o=u("offValue",t,e,n);return[is(r,s,a,o)]}case"Ones":return[es(u("shape",t,e,n),u("dtype",t,e,n))];case"OnesLike":return[us(u("x",t,e,n))];case"RandomUniform":return[$s(u("shape",t,e,n),u("minval",t,e,n),u("maxval",t,e,n),u("dtype",t,e,n))];case"Range":return[Is(u("start",t,e,n),u("stop",t,e,n),u("step",t,e,n),u("dtype",t,e,n))];case"TruncatedNormal":{const r=u("shape",t,e,n),s=u("mean",t,e,n),a=u("stdDev",t,e,n),o=u("seed",t,e,n);return[ra(r,s,a,u("dtype",t,e,n),o)]}case"Zeros":return[ts(u("shape",t,e,n),u("dtype",t,e,n))];case"ZerosLike":return[er(u("x",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,n,s)));case"dynamic":return(async(t,e,n)=>{switch(t.op){case"NonMaxSuppressionV5":{const{boxes:r,scores:s,maxOutputSize:a,iouThreshold:o,scoreThreshold:i,softNmsSigma:u}=fo(t,e,n),p=await ro.nonMaxSuppressionWithScoreAsync(r,s,a,o,i,u);return[p.selectedIndices,p.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:r,scores:s,maxOutputSize:a,iouThreshold:o,scoreThreshold:i}=fo(t,e,n),p=u("padToMaxOutputSize",t,e,n),l=await ro.nonMaxSuppressionPaddedAsync(r,s,a,o,i,p);return[l.selectedIndices,l.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:r,scores:s,maxOutputSize:a,iouThreshold:o,scoreThreshold:i}=fo(t,e,n);return[await ro.nonMaxSuppressionAsync(r,s,a,o,i)]}case"Where":{const r=pn(u("condition",t,e,n),"bool"),s=[await ia(r)];return r.dispose(),s}case"ListDiff":return zs(u("x",t,e,n),u("y",t,e,n));default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,n,s);case"evaluation":return r.tidy((()=>((t,e,n)=>{switch(t.op){case"LowerBound":return[Gr(u("sortedSequence",t,e,n),u("values",t,e,n))];case"TopKV2":{const r=u("x",t,e,n),s=u("k",t,e,n),a=u("sorted",t,e,n),o=na(r,s,a);return[o.values,o.indices]}case"UpperBound":return[oa(u("sortedSequence",t,e,n),u("values",t,e,n))];case"Unique":{const r=u("x",t,e,n),s=sa(r);return[s.values,s.indices]}case"UniqueV2":{const r=u("x",t,e,n),s=u("axis",t,e,n),a=sa(r,s);return[a.values,a.indices]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,n,s)));case"image":return r.tidy((()=>((t,e,n)=>{switch(t.op){case"ResizeBilinear":{const r=u("images",t,e,n),s=u("size",t,e,n),a=u("alignCorners",t,e,n),o=u("halfPixelCenters",t,e,n);return[ro.resizeBilinear(r,[s[0],s[1]],a,o)]}case"ResizeNearestNeighbor":{const r=u("images",t,e,n),s=u("size",t,e,n),a=u("alignCorners",t,e,n),o=u("halfPixelCenters",t,e,n);return[ro.resizeNearestNeighbor(r,[s[0],s[1]],a,o)]}case"CropAndResize":{const r=u("image",t,e,n),s=u("boxes",t,e,n),a=u("boxInd",t,e,n),o=u("cropSize",t,e,n),i=u("method",t,e,n),p=u("extrapolationValue",t,e,n);return[ro.cropAndResize(r,s,a,o,i,p)]}case"ImageProjectiveTransformV3":{const r=u("images",t,e,n),s=u("transforms",t,e,n),a=u("outputShape",t,e,n),o=u("fillValue",t,e,n),i=u("interpolation",t,e,n),p=u("fillMode",t,e,n);return[ro.transform(r,s,i.toLowerCase(),p.toLowerCase(),o,a)]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,n,s)));case"graph":return r.tidy((()=>((t,e,n)=>{switch(t.op){case"Const":return e[t.name];case"PlaceholderWithDefault":const r=u("default",t,e,n);return[p(t.name,e,n)||r];case"Placeholder":return[p(t.name,e,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":return[m(u("x",t,e,n))];case"IdentityN":return u("x",t,e,n).map((t=>m(t)));case"Snapshot":return[m(u("x",t,e,n))];case"Shape":return[ta(u("x",t,e,n).shape,"int32")];case"ShapeN":return u("x",t,e,n).map((t=>ta(t.shape)));case"Size":return[cr(u("x",t,e,n).size,"int32")];case"Rank":return[cr(u("x",t,e,n).rank,"int32")];case"NoOp":return[cr(1)];case"Print":const s=u("x",t,e,n),a=u("data",t,e,n),o=u("message",t,e,n),i=u("summarize",t,e,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(o);for(let t=0;t<a.length;t++)console.log(Array.prototype.slice.call(a[t].dataSync()).slice(0,i));return[s];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,n,s)));case"logical":return r.tidy((()=>((t,e,n)=>{switch(t.op){case"Equal":return[Jn(u("a",t,e,n),u("b",t,e,n))];case"NotEqual":return[os(u("a",t,e,n),u("b",t,e,n))];case"Greater":return[Sr(u("a",t,e,n),u("b",t,e,n))];case"GreaterEqual":return[Er(u("a",t,e,n),u("b",t,e,n))];case"Less":return[Or(u("a",t,e,n),u("b",t,e,n))];case"LessEqual":return[Ar(u("a",t,e,n),u("b",t,e,n))];case"LogicalAnd":return[qr(u("a",t,e,n),u("b",t,e,n))];case"LogicalNot":return[Ur(u("a",t,e,n))];case"LogicalOr":return[jr(u("a",t,e,n),u("b",t,e,n))];case"Select":case"SelectV2":return[tr(u("condition",t,e,n),u("a",t,e,n),u("b",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,n,s)));case"matrices":return r.tidy((()=>((t,e,n)=>{switch(t.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[wn(u("a",t,e,n),u("b",t,e,n),u("transposeA",t,e,n),u("transposeB",t,e,n))];case"Einsum":return[rr(u("equation",t,e,n),...u("tensors",t,e,n))];case"Transpose":return[ua(u("x",t,e,n),u("perm",t,e,n))];case"_FusedMatMul":const[r,s]=u("fusedOps",t,e,n),a="biasadd"===r,o="prelu"===s,i=u("numArgs",t,e,n),p=u("leakyreluAlpha",t,e,n);if(a){if(o&&2!==i)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!o&&1!==i)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[l,c]=u("args",t,e,n);return[Ta({a:u("a",t,e,n),b:u("b",t,e,n),transposeA:u("transposeA",t,e,n),transposeB:u("transposeB",t,e,n),bias:l,activation:s,preluActivationWeights:c,leakyreluAlpha:p})];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,n,s)));case"normalization":return r.tidy((()=>((t,e,n)=>{switch(t.op){case"EuclideanNorm":return[gr(u("x",t,e,n),u("axis",t,e,n),u("keepDims",t,e,n))];case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[$n(u("x",t,e,n),u("mean",t,e,n),u("variance",t,e,n),u("offset",t,e,n),u("scale",t,e,n),u("epsilon",t,e,n))];case"LRN":return[Fr(u("x",t,e,n),u("radius",t,e,n),u("bias",t,e,n),u("alpha",t,e,n),u("beta",t,e,n))];case"Softmax":return[Ks(u("x",t,e,n))];case"LogSoftmax":return[Pr(u("x",t,e,n))];case"SparseToDense":return[ca(u("sparseIndices",t,e,n),u("outputShape",t,e,n),u("sparseValues",t,e,n),u("defaultValue",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,n,s)));case"reduction":return r.tidy((()=>((t,e,n)=>{switch(t.op){case"Max":{const r=u("axis",t,e,n),s=u("keepDims",t,e,n);return[ir(u("x",t,e,n),r,s)]}case"Mean":{const r=u("axis",t,e,n),s=u("keepDims",t,e,n);return[Jr(u("x",t,e,n),r,s)]}case"Min":{const r=u("axis",t,e,n),s=u("keepDims",t,e,n);return[ur(u("x",t,e,n),r,s)]}case"Sum":{const r=u("axis",t,e,n),s=u("keepDims",t,e,n);return[mr(u("x",t,e,n),r,s)]}case"All":{const r=u("axis",t,e,n),s=u("keepDims",t,e,n);return[Je(u("x",t,e,n),r,s)]}case"Any":{const r=u("axis",t,e,n),s=u("keepDims",t,e,n);return[tn(u("x",t,e,n),r,s)]}case"ArgMax":{const r=u("axis",t,e,n);return[en(u("x",t,e,n),r)]}case"ArgMin":{const r=u("axis",t,e,n);return[nn(u("x",t,e,n),r)]}case"Prod":{const r=u("axis",t,e,n),s=u("keepDims",t,e,n);return[hs(u("x",t,e,n),r,s)]}case"Cumprod":{const r=u("axis",t,e,n),s=u("exclusive",t,e,n),a=u("reverse",t,e,n);return[Un(u("x",t,e,n),r,s,a)]}case"Cumsum":{const r=u("axis",t,e,n),s=u("exclusive",t,e,n),a=u("reverse",t,e,n);return[jn(u("x",t,e,n),r,s,a)]}case"Bincount":const r=u("x",t,e,n),s=u("weights",t,e,n),a=u("size",t,e,n);return[In(r,s,a)];case"DenseBincount":{const r=u("x",t,e,n),s=u("weights",t,e,n),a=u("size",t,e,n),o=u("binaryOutput",t,e,n);return[Wn(r,s,a,o)]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,n,s)));case"slice_join":return r.tidy((()=>((t,n,r)=>{switch(t.op){case"ConcatV2":case"Concat":{const e=u("n",t,n,r),s=u("axis",t,n,r);let a=u("tensors",t,n,r);return a=a.slice(0,e),[kn(a,s)]}case"Gather":{const e=u("x",t,n,r),s=u("indices",t,n,r);return[vr(e,pn(s,"int32"),0)]}case"GatherV2":{const e=u("axis",t,n,r),s=u("batchDims",t,n,r),a=u("x",t,n,r),o=u("indices",t,n,r);return[vr(a,pn(o,"int32"),e,s)]}case"Reverse":{const e=u("dims",t,n,r),s=[];for(let t=0;t<e.length;t++)e[t]&&s.push(t);const a=u("x",t,n,r);return[Fs(a,s)]}case"ReverseV2":{const e=u("axis",t,n,r),s=u("x",t,n,r);return[Fs(s,e)]}case"Slice":{const e=u("begin",t,n,r),s=u("size",t,n,r);return[vn(u("x",t,n,r),e,s)]}case"StridedSlice":{const e=u("begin",t,n,r),s=u("end",t,n,r),a=u("strides",t,n,r),o=u("beginMask",t,n,r),i=u("endMask",t,n,r),p=u("ellipsisMask",t,n,r),l=u("newAxisMask",t,n,r),c=u("shrinkAxisMask",t,n,r),h=u("x",t,n,r);return[Xs(h,e,s,a,o,i,p,l,c)]}case"Pack":return e.tidy((()=>{const s=u("axis",t,n,r),a=u("tensors",t,n,r),o=a[0].shape,i=Zs(a[0]).shape,p=a.map((t=>{const n=e.util.arraysEqual(t.shape,o);if(!n&&!e.util.arraysEqual(Zs(t).shape,i))throw new Error("the input tensors shape does not match");return n?t:gn(t,o)}));return[Qs(p,s)]}));case"Unpack":{const e=u("axis",t,n,r),s=u("tensor",t,n,r);return aa(s,e)}case"Tile":{const e=u("reps",t,n,r);return[kr(u("x",t,n,r),e)]}case"Split":case"SplitV":{const e=u("axis",t,n,r),s=u("numOrSizeSplits",t,n,r),a=u("x",t,n,r);return Ws(a,s,e)}case"ScatterNd":{const e=u("indices",t,n,r),s=u("values",t,n,r),a=u("shape",t,n,r);return[la(e,s,a)]}case"GatherNd":{const e=u("x",t,n,r),s=u("indices",t,n,r);return[ha(e,s)]}case"SparseToDense":{const e=u("sparseIndices",t,n,r),s=u("outputShape",t,n,r),a=u("sparseValues",t,n,r),o=u("defaultValue",t,n,r);return[ca(e,a,s,a.dtype===o.dtype?o:pn(o,a.dtype))]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,n,s)));case"sparse":return r.tidy((()=>((t,e,n)=>{switch(t.op){case"SparseFillEmptyRows":{const{outputIndices:r,outputValues:s,emptyRowIndicator:a,reverseIndexMap:o}=so.sparseFillEmptyRows(u("indices",t,e,n),u("values",t,e,n),u("denseShape",t,e,n),u("defaultValue",t,e,n));return[r,s,a,o]}case"SparseReshape":{const{outputIndices:r,outputShape:s}=so.sparseReshape(u("inputIndices",t,e,n),u("inputShape",t,e,n),u("newShape",t,e,n));return[r,s]}case"SparseSegmentMean":return[so.sparseSegmentMean(u("data",t,e,n),u("indices",t,e,n),u("segmentIds",t,e,n))];case"SparseSegmentSum":return[so.sparseSegmentSum(u("data",t,e,n),u("indices",t,e,n),u("segmentIds",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,n,s)));case"spectral":return r.tidy((()=>((t,e,n)=>{switch(t.op){case"FFT":return[qs(u("x",t,e,n))];case"IFFT":return[Us(u("x",t,e,n))];case"RFFT":return[Hs(u("x",t,e,n))];case"IRFFT":return[js(u("x",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,n,s)));case"string":return r.tidy((()=>((t,e,n)=>{switch(t.op){case"StringNGrams":{const{nGrams:r,nGramsSplits:s}=ao.stringNGrams(u("data",t,e,n),u("dataSplits",t,e,n),u("separator",t,e,n),u("nGramWidths",t,e,n),u("leftPad",t,e,n),u("rightPad",t,e,n),u("padWidth",t,e,n),u("preserveShortSequences",t,e,n));return[r,s]}case"StringSplit":{const{indices:r,values:s,shape:a}=ao.stringSplit(u("input",t,e,n),u("delimiter",t,e,n),u("skipEmpty",t,e,n));return[r,s,a]}case"StringToHashBucketFast":return[ao.stringToHashBucketFast(u("input",t,e,n),u("numBuckets",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,n,s)));case"transformation":return r.tidy((()=>((t,e,n)=>{switch(t.op){case"Cast":return[pn(u("x",t,e,n),u("dtype",t,e,n))];case"ExpandDims":{const r=u("axis",t,e,n);return[xr(u("x",t,e,n),r)]}case"Squeeze":{const r=u("axis",t,e,n);return[Zs(u("x",t,e,n),r)]}case"Reshape":return[gn(u("x",t,e,n),u("shape",t,e,n))];case"MirrorPad":return[rs(u("x",t,e,n),u("padding",t,e,n),u("mode",t,e,n))];case"PadV2":case"Pad":return[ps(u("x",t,e,n),u("padding",t,e,n),u("constantValue",t,e,n))];case"SpaceToBatchND":{const r=u("blockShape",t,e,n),s=u("paddings",t,e,n);return[ls(u("x",t,e,n),r,s)]}case"BatchToSpaceND":{const r=u("blockShape",t,e,n),s=u("crops",t,e,n);return[En(u("x",t,e,n),r,s)]}case"DepthToSpace":{const r=u("blockSize",t,e,n),s=u("dataFormat",t,e,n).toUpperCase();return[Hn(u("x",t,e,n),r,s)]}case"BroadcastTo":return[On(u("x",t,e,n),u("shape",t,e,n))];case"BroadcastArgs":return[Dn(u("s0",t,e,n),u("s1",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,n,s)));case"hash_table":return(async(t,e,n,r)=>{switch(t.op){case"HashTable":case"HashTableV2":{const s=u("keyDType",t,e,n),a=u("valueDType",t,e,n),o=new yo(s,a);return r.addHashTable(t.name,o),[o.handle]}case"LookupTableImport":case"LookupTableImportV2":{const s=u("tableHandle",t,e,n,r),a=u("keys",t,e,n),o=u("values",t,e,n),i=r.getHashTableById(s.id);return[await i.import(a,o)]}case"LookupTableFind":case"LookupTableFindV2":{const s=u("tableHandle",t,e,n,r),a=u("keys",t,e,n),o=u("defaultValue",t,e,n),i=r.getHashTableById(s.id);return[await i.find(a,o)]}case"LookupTableSize":case"LookupTableSizeV2":{const s=u("tableHandle",t,e,n,r);return[r.getHashTableById(s.id).tensorSize()]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,n,s,a);case"custom":const o=i(t.op);if(o&&o.customExecutor)return o.customExecutor(new Z(t,n,s));throw TypeError(`Custom op ${t.op} is not registered.`);default:throw TypeError(`Unknown op '${t.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(t,n,s);return r.util.isPromise(o)?o.then((t=>[].concat(t))):[].concat(o)}class bo{constructor(t={},e={},n={},r={}){this.weightMap=t,this.tensorArrayMap=e,this.tensorListMap=n,this.functionMap=r,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(t,e){return{id:t,frameName:e,iterationId:0}}set currentContext(t){this.contexts!==t&&(this.contexts=t,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const t=[];for(let e=0;e<this.contexts.length-1;e++){const n=this.contexts.slice(0,this.contexts.length-e);t.push(this.contextIdforContexts(n))}t.push(""),this._currentContextIds=t}contextIdforContexts(t){return t?t.map((t=>0===t.id&&0===t.iterationId?"":`${t.frameName}-${t.iterationId}`)).join("/"):""}enterFrame(t){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,t)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const t=Object.assign({},this.contexts[this.contexts.length-1]);t.iterationId+=1,t.id=this.lastId,this.contexts.splice(-1,1,t),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(t){return this.weightMap[t]}addTensorArray(t){this.tensorArrayMap[t.id]=t}getTensorArray(t){return this.tensorArrayMap[t]}addTensorList(t){this.tensorListMap[t.id]=t}getTensorList(t){return this.tensorListMap[t]}dispose(t){for(const e in this.tensorArrayMap)this.tensorArrayMap[e].clearAndClose(t);for(const e in this.tensorListMap)this.tensorListMap[e].clearAndClose(t)}}function xo(t,e,n,r){const s=new Set,a=[];let o=null,i=null;const u=new Set,p=Object.keys(t).map((t=>h(t)[0]));let l=[];null!=r&&(l=r.map((t=>h(t.name)[0])));const c=[...e];for(;c.length>0;){const t=c.pop();(To(t)||_o(t)||vo(t))&&null==o&&(o=t,i=o.children.map((t=>t.name)).filter((t=>s.has(t)))),s.add(t.name),null==n[t.name]&&(-1===p.indexOf(t.name)&&-1===l.indexOf(t.name)&&(0!==t.inputs.length?t.inputs.forEach((t=>{u.has(t.name)||(u.add(t.name),c.push(t))})):a.push(t.name)))}return{inputs:t,outputs:e,usedNodes:s,missingInputs:a,dynamicNode:o,syncInputs:i}}const No=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],ko=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],wo=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"];function To(t){return No.indexOf(t.op)>=0}function _o(t){return ko.indexOf(t.op)>=0}function vo(t){return wo.indexOf(t.op)>=0}class So{constructor(t,e){this.graph=t,this.parent=e,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this.intermediateTensors={},this.keepTensorForDebug=!1,this._outputs=t.outputs,this._inputs=t.inputs,this._initNodes=t.initNodes,this._signature=t.signature,this._functions=t.functions,null!=t.functions&&Object.keys(t.functions).forEach((e=>{this._functionExecutorMap[e]=new So(t.functions[e],this)}))}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(t){const e=Object.keys(t).map((e=>t[e].map((t=>t.id))));this._weightIds=[].concat(...e),this._weightMap=t}set resourceManager(t){this._resourceManager=t}get inputs(){return this._inputs.map((t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((t=>t.signatureKey||t.name))}get outputNodes(){return this._outputs.map((t=>{const e=t.signatureKey||t.name;return t.defaultOutput?`${e}:${t.defaultOutput}`:e}))}get functions(){return Object.keys(this._functions).reduce(((t,e)=>(t[e]=this._functions[e].signature,t)),{})}getCompilationKey(t,e){const n=t.map((t=>t.name)).sort(),r=e.map((t=>t.name)).sort();return n.join(this.SEPERATOR)+"--"+r.join(this.SEPERATOR)}compile(t,e){const n=xo(t,e,this.weightMap,this._initNodes),{missingInputs:r,dynamicNode:s,syncInputs:a}=n;if(null!=s)throw new Error(`This execution contains the node '${s.name}', which has the dynamic op '${s.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(r.length>0){const n=e.map((t=>t.name)),s=Object.keys(t);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${s}]. Missing the following inputs: [${r}]`)}return function(t,e,n){const{usedNodes:r,inputs:s}=n,a=[],o=Object.keys(s).map((t=>h(t)[0])).map((e=>t.nodes[e])),i=t.initNodes;o.forEach((t=>{r.has(t.name)&&a.push(t)})),t.weights.forEach((t=>{r.has(t.name)&&a.push(t)})),null!=i&&i.forEach((t=>{r.has(t.name)&&a.push(t)}));const u=new Set,p=[];for(;a.length>0;){const t=a.pop();u.add(t.name),e[t.name]||p.push(t),t.children.forEach((t=>{!u.has(t.name)&&r.has(t.name)&&t.inputs.every((t=>u.has(t.name)))&&a.push(t)}))}return p}(this.graph,this.weightMap,n)}execute(t,n){t=this.mapInputs(t);const r=Object.keys(t).sort();this.checkInputs(t),this.checkInputShapeAndType(t),n=this.mapOutputs(n),this.checkOutputs(n);const s=r.map((t=>this.graph.nodes[h(t)[0]])),a=n.map((t=>h(t)[0]));let o=a.map((t=>this.graph.nodes[t]));this.resetIntermediateTensors(),0===o.length&&(o=this._outputs);const i=this.getCompilationKey(s,o);let u=this.compiledMap.get(i);null==u&&(u=this.compile(t,o),this.compiledMap.set(i,u));const l={},c={};return e.tidy((()=>{const r=new bo(this.weightMap,l,c,this.functionExecutorMap),s=Object.assign({},this.weightMap);Object.keys(t).forEach((e=>{const[n,r]=h(e),a=[];a[r]=t[e],s[n]=a}));const o=this.getFrozenTensorIds(s),i={};for(let t=0;t<u.length;t++){const n=u[t];if(!s[n.name]){const t=go(n,s,r,this._resourceManager);if(e.util.isPromise(t))throw new Error(`The execution of the op '${n.op}' returned a promise. Please use model.executeAsync() instead.`);s[n.name]=t,this.checkTensorForDisposal(n.name,n,s,r,o,a,i)}}return null==this.parent&&r.dispose(o),n.map((t=>p(t,s,r)))}))}getFrozenTensorIds(t){const e=[].concat.apply([],Object.keys(t).map((e=>t[e])).map((t=>t.map((t=>t.id)))));return new Set(e)}checkTensorForDisposal(t,e,n,r,s,a,o){"control"!==e.category&&-1===a.indexOf(t)&&(n[t].forEach((t=>{null!=t&&(o[t.id]=(o[t.id]||0)+e.children.length)})),e.inputs.forEach((t=>{if("control"!==t.category){const a=function(t,e,n){return e[c(t,n.currentContextId)]}(t.name,n,r);null!=a&&a.forEach((t=>{if(t&&!t.kept&&!s.has(t.id)){const n=o[t.id];if(1===n){if(this.keepTensorForDebug){const[n,s]=l(e.name,r);this.intermediateTensors[n]||(this.intermediateTensors[n]=[]),this.intermediateTensors[n][s]=t}else t.dispose();delete o[t.id]}else null!=n&&o[t.id]--}}))}})))}async executeAsync(t,e){return this._executeAsync(t,e)}disposeIntermediateTensors(){this.intermediateTensors&&(Object.keys(this.intermediateTensors).forEach((t=>this.intermediateTensors[t].forEach((t=>t.dispose())))),this.disposeTensorsMap())}disposeTensorsMap(){this.tensorsMap&&Object.keys(this.tensorsMap).forEach((t=>{this.tensorsMap[t].forEach((t=>{!t||t.kept||t.isDisposed||this.keepIds.has(t.id)||t.dispose()}))}))}getIntermediateTensors(){return this.tensorsMap}resetIntermediateTensors(){for(const t in this.intermediateTensors)this.intermediateTensors[t].forEach((t=>t.dispose())),delete this.intermediateTensors[t]}async _executeAsync(t,n,r=!1,s={},a={}){r||(t=this.mapInputs(t),this.checkInputs(t),this.checkInputShapeAndType(t),n=this.mapOutputs(n),this.checkOutputs(n));try{this.keepTensorForDebug=e.env().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(t){console.warn(t.message)}this.resetIntermediateTensors();const o=new bo(this.weightMap,s,a,this.functionExecutorMap);this.tensorsMap=await this.executeWithControlFlow(t,o,n,r);const i=n.map((t=>p(t,this.tensorsMap,o))),u=i.map((t=>t.id)),l=Object.keys(t).map((e=>t[e].id));return this.keepIds=new Set([...u,...l,...this.weightIds]),this.keepTensorForDebug||this.disposeTensorsMap(),null==this.parent&&o.dispose(this.keepIds),i}async executeFunctionAsync(t,e,n){const r=t.reduce(((t,e,n)=>(t[this.inputs[n].name]=e,t)),{});return this._executeAsync(r,this.outputNodes,!0,e,n)}async executeWithControlFlow(t,e,n,r){const s=Object.keys(t),a=s.map((t=>this.graph.nodes[h(t)[0]])),o=n.map((t=>h(t)[0]));let i=o.map((t=>this.graph.nodes[t]));0===i.length&&(i=this._outputs);const{usedNodes:u,missingInputs:l,dynamicNode:c,syncInputs:d}=xo(t,i,this.weightMap,this._initNodes),m=[...a,...this.graph.weights,...this._initNodes||[]].map((t=>({node:t,contexts:e.currentContext}))),f=Object.assign({},this.weightMap);Object.keys(t).forEach((e=>{const[n,r]=h(e),s=[];s[r]=t[e],f[n]=s}));const y={},g=this.getFrozenTensorIds(f),b={};for(;m.length>0;){const t=this.processStack(a,m,e,f,b,g,o,y,u);await Promise.all(t)}null!=c||r||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const x=i.filter((t=>!To(t)&&!p(t.name,f,e))).map((t=>t.name));if(x.length>0){let t="";throw null!=c&&(t=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${d}]`),new Error(`Cannot compute the outputs [${x}] from the provided inputs [${s}]. Consider providing the following inputs: [${l}]. ${t}`)}return f}processStack(t,n,r,s,a,o,i,p,c){const h=[];for(;n.length>0;){const t=n.pop();r.currentContext=t.contexts;let d="";if("Enter"===t.node.op&&u("isConstant",t.node,s,r)&&([d]=l(t.node.name,r)),null==s[t.node.name]){const u=go(t.node,s,r,this._resourceManager);d||([d]=l(t.node.name,r));const m=r.currentContext;e.util.isPromise(u)?h.push(u.then((e=>(s[d]=e,r.currentContext=m,this.checkTensorForDisposal(d,t.node,s,r,o,i,p),this.processChildNodes(t.node,n,r,s,a,c),e)))):(s[d]=u,this.checkTensorForDisposal(d,t.node,s,r,o,i,p),this.processChildNodes(t.node,n,r,s,a,c))}else this.processChildNodes(t.node,n,r,s,a,c)}return h}processChildNodes(t,e,n,r,s,a){t.children.forEach((t=>{const[o]=l(t.name,n);!s[o]&&a.has(t.name)&&("Merge"===t.op?t.inputNames.some((t=>!!p(t,r,n)))&&(s[o]=!0,e.push({contexts:n.currentContext,node:t})):t.inputNames.every((t=>!!p(t,r,n)))&&(s[o]=!0,e.push({contexts:n.currentContext,node:t})))}))}dispose(){Object.keys(this.weightMap).forEach((t=>this.weightMap[t].forEach((t=>t.dispose()))))}checkInputShapeAndType(t){Object.keys(t).forEach((n=>{const r=t[n],[s]=h(n),a=this.graph.nodes[s];if(a.attrParams.shape&&a.attrParams.shape.value){const t=a.attrParams.shape.value,n=t.length===r.shape.length&&r.shape.every(((e,n)=>-1===t[n]||t[n]===e));e.util.assert(n,(()=>`The shape of dict['${a.name}'] provided in model.execute(dict) must be [${t}], but was [${r.shape}]`))}a.attrParams.dtype&&a.attrParams.dtype.value&&e.util.assert(r.dtype===a.attrParams.dtype.value,(()=>`The dtype of dict['${a.name}'] provided in model.execute(dict) must be ${a.attrParams.dtype.value}, but was ${r.dtype}`))}))}mapInputs(t){const e={};for(const n in t)if(null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]){e[this._signature.inputs[n].name]=t[n]}else e[n]=t[n];return e}checkInputs(t){const e=Object.keys(t).filter((t=>{const[e]=h(t);return null==this.graph.nodes[e]}));if(e.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${e}] that are not part of graph`)}mapOutputs(t){return t.map((t=>{if(null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[t]){return this._signature.outputs[t].name}return t}),{})}checkOutputs(t){t.forEach((t=>{const[e]=h(t);if(!this.graph.nodes[e])throw new Error(`The output '${t}' is not found in the graph`)}))}}class Eo{constructor(t={},e={}){this.hashTableNameToHandle=t,this.hashTableMap=e}addHashTable(t,e){this.hashTableNameToHandle[t]=e.handle,this.hashTableMap[e.id]=e}getHashTableHandleByName(t){return this.hashTableNameToHandle[t]}getHashTableById(t){return this.hashTableMap[t]}dispose(){for(const t in this.hashTableMap)this.hashTableMap[t].clearAndClose(),delete this.hashTableMap[t];for(const t in this.hashTableNameToHandle)this.hashTableNameToHandle[t].dispose(),delete this.hashTableNameToHandle[t]}}class $o{constructor(t,e={}){this.modelUrl=t,this.loadOptions=e,this.version="n/a",null==e&&(this.loadOptions={}),this.resourceManager=new Eo}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}findIOHandler(){const t=this.modelUrl;if(null!=t.load)this.handler=t;else if(null!=this.loadOptions.requestInit)this.handler=e.io.browserHTTPRequest(t,this.loadOptions);else{const n=e.io.getLoadHandlers(t,this.loadOptions);if(0===n.length)n.push(e.io.browserHTTPRequest(t,this.loadOptions));else if(n.length>1)throw new Error(`Found more than one (${n.length}) load handlers for URL '${[t]}'`);this.handler=n[0]}}load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const t=this.handler.load();return e.util.isPromise(t)?t.then((t=>this.loadSync(t))):this.loadSync(t)}loadSync(t){this.artifacts=t;const n=this.artifacts.modelTopology;let r;r=null!=this.artifacts.userDefinedMetadata&&null!=this.artifacts.userDefinedMetadata.signature?this.artifacts.userDefinedMetadata.signature:this.artifacts.signature,this.signature=r,this.version=`${n.versions.producer}.${n.versions.minConsumer}`;const s=e.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new So(F.Instance.transformGraph(n,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(s),this.executor.resourceManager=this.resourceManager,null!=t.modelInitializer&&null!=t.modelInitializer.node){const e=F.Instance.transformGraph(t.modelInitializer);this.initializer=new So(e),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(t,n){if("string"==typeof t){const n=e.io.getSaveHandlers(t);if(0===n.length)throw new Error(`Cannot find any save handlers for URL '${t}'`);if(n.length>1)throw new Error(`Found more than one (${n.length}) save handlers for URL '${t}'`);t=n[0]}if(null==t.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return t.save(this.artifacts)}predict(t,e){return this.execute(t,this.outputNodes)}normalizeInputs(t){if(!(t instanceof e.Tensor||Array.isArray(t)))return t;if((t=Array.isArray(t)?t:[t]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${t.length} input tensors.`);return this.inputNodes.reduce(((e,n,r)=>(e[n]=t[r],e)),{})}normalizeOutputs(t){return t=t||this.outputNodes,Array.isArray(t)?t:[t]}execute(t,e){t=this.normalizeInputs(t),e=this.normalizeOutputs(e);const n=this.executor.execute(t,e);return n.length>1?n:n[0]}async executeAsync(t,e){t=this.normalizeInputs(t),e=this.normalizeOutputs(e);const n=await this.executor.executeAsync(t,e);return n.length>1?n:n[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(t){return Object.keys(t).reduce(((e,n)=>(e[n]=[t[n]],e)),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}t.GraphModel=$o,t.deregisterOp=function(t){delete o[t]},t.loadGraphModel=async function(t,e={}){if(null==t)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==e&&(e={}),e.fromTFHub&&"string"==typeof t&&(t=function(t){t.endsWith("/")||(t+="/");return`${t}model.json?tfjs-format=file`}(t));const n=new $o(t,e);return await n.load(),n},t.loadGraphModelSync=function(t){if(null==t)throw new Error("modelUrl in loadGraphModelSync() cannot be null. Please provide a url or an IOHandler that loads the model");if(!t.load)throw new Error(`modelUrl IO Handler ${t} has no load function`);const e=new $o(t);return e.load(),e},t.registerOp=function(t,e){const n={tfOpName:t,category:"custom",inputs:[],attrs:[],customExecutor:e};o[t]=n},t.version_converter="3.18.0",Object.defineProperty(t,"__esModule",{value:!0})}));
//# sourceMappingURL=tf-converter.es2017.min.js.map
