{"version":3,"file":"tf-backend-webgl.es2017.min.js","sources":["../../../../tfjs-backend-webgl/src/canvas_util.ts","../../../../tfjs-backend-webgl/src/tex_util.ts","../../../../tfjs-backend-webgl/src/webgl_util.ts","../../../../tfjs-backend-webgl/src/flags_webgl.ts","../../../../tfjs-backend-webgl/src/glsl_version.ts","../../../../tfjs-backend-webgl/src/shader_compiler_util.ts","../../../../tfjs-backend-webgl/src/shader_compiler.ts","../../../../tfjs-backend-webgl/src/gpgpu_math.ts","../../../../tfjs-backend-webgl/src/decode_matrix_gpu.ts","../../../../tfjs-backend-webgl/src/decode_matrix_packed_gpu.ts","../../../../tfjs-backend-webgl/src/encode_float_gpu.ts","../../../../tfjs-backend-webgl/src/encode_float_packed_gpu.ts","../../../../tfjs-backend-webgl/src/encode_matrix_gpu.ts","../../../../tfjs-backend-webgl/src/encode_matrix_packed_gpu.ts","../../../../tfjs-backend-webgl/src/gpgpu_util.ts","../../../../tfjs-backend-webgl/src/gpgpu_context.ts","../../../../../tfjs-backend-cpu/src/utils/binary_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Add.ts","../../../../../tfjs-backend-cpu/src/utils/unary_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Ceil.ts","../../../../../tfjs-backend-cpu/src/kernels/Equal.ts","../../../../../tfjs-backend-cpu/src/kernels/Exp.ts","../../../../../tfjs-backend-cpu/src/kernels/Expm1.ts","../../../../../tfjs-backend-cpu/src/kernels/Floor.ts","../../../../../tfjs-backend-cpu/src/kernels/Greater.ts","../../../../../tfjs-backend-cpu/src/kernels/GreaterEqual.ts","../../../../../tfjs-backend-cpu/src/kernels/Less.ts","../../../../../tfjs-backend-cpu/src/kernels/LessEqual.ts","../../../../../tfjs-backend-cpu/src/kernels/Log.ts","../../../../../tfjs-backend-cpu/src/kernels/Maximum.ts","../../../../../tfjs-backend-cpu/src/kernels/Minimum.ts","../../../../../tfjs-backend-cpu/src/kernels/Multiply.ts","../../../../../tfjs-backend-cpu/src/kernels/NotEqual.ts","../../../../../tfjs-backend-cpu/src/kernels/Rsqrt.ts","../../../../../tfjs-backend-cpu/src/kernels/Sigmoid.ts","../../../../../tfjs-backend-cpu/src/kernels/Sqrt.ts","../../../../../tfjs-backend-cpu/src/kernels/SquaredDifference.ts","../../../../../tfjs-backend-cpu/src/kernels/StringNGrams_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/StringSplit_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Sub.ts","../../../../../tfjs-backend-cpu/src/kernels/TopK_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Abs.ts","../../../../../tfjs-backend-cpu/src/kernels/Bincount_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Concat_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/GatherNd_Impl.ts","../../../../../tfjs-backend-cpu/src/kernels/GatherV2_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/LinSpace_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Max_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Neg.ts","../../../../../tfjs-backend-cpu/src/kernels/Prod.ts","../../../../../tfjs-backend-cpu/src/kernels/Range_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Scatter_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Slice.ts","../../../../../tfjs-backend-cpu/src/kernels/SparseFillEmptyRows_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/SparseReshape_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/SparseSegmentReduction_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/StridedSlice_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/StringToHashBucketFast_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Tile_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Transpose_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Unique_impl.ts","../../../../tfjs-backend-webgl/src/kernel_utils/shared.ts","../../../../tfjs-backend-webgl/src/packing_util.ts","../../../../tfjs-backend-webgl/src/pack_gpu.ts","../../../../tfjs-backend-webgl/src/reshape_packed_gpu.ts","../../../../tfjs-backend-webgl/src/texture_manager.ts","../../../../tfjs-backend-webgl/src/unaryop_gpu.ts","../../../../tfjs-backend-webgl/src/unaryop_packed_gpu.ts","../../../../tfjs-backend-webgl/src/unpack_gpu.ts","../../../../tfjs-backend-webgl/src/backend_webgl.ts","../../../../tfjs-backend-webgl/src/webgl.ts","../../../../tfjs-backend-webgl/src/base.ts","../../../../tfjs-backend-webgl/src/binaryop_gpu.ts","../../../../tfjs-backend-webgl/src/binaryop_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Identity.ts","../../../../tfjs-backend-webgl/src/kernels/Complex.ts","../../../../tfjs-backend-webgl/src/kernels/LeakyRelu.ts","../../../../tfjs-backend-webgl/src/kernels/Prelu.ts","../../../../tfjs-backend-webgl/src/kernel_utils/kernel_funcs_utils.ts","../../../../tfjs-backend-webgl/src/mulmat_packed_gpu.ts","../../../../tfjs-backend-webgl/src/binaryop_complex_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Multiply.ts","../../../../tfjs-backend-webgl/src/kernels/Reshape.ts","../../../../tfjs-backend-webgl/src/kernel_utils/reshape.ts","../../../../tfjs-backend-webgl/src/mean_gpu.ts","../../../../tfjs-backend-webgl/src/reduce_gpu.ts","../../../../tfjs-backend-webgl/src/kernel_utils/reduce.ts","../../../../tfjs-backend-webgl/src/transpose_gpu.ts","../../../../tfjs-backend-webgl/src/transpose_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Transpose_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Sum.ts","../../../../tfjs-backend-webgl/src/kernels/Sum_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Transpose.ts","../../../../tfjs-backend-webgl/src/kernels/BatchMatMul_impl.ts","../../../../tfjs-backend-webgl/src/kernels/_FusedMatMul.ts","../../../../tfjs-backend-webgl/src/kernels/Abs.ts","../../../../tfjs-backend-webgl/src/kernels/Acos.ts","../../../../tfjs-backend-webgl/src/kernels/Acosh.ts","../../../../tfjs-backend-webgl/src/kernels/Add.ts","../../../../tfjs-backend-webgl/src/addn_gpu.ts","../../../../tfjs-backend-webgl/src/addn_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/AddN.ts","../../../../tfjs-backend-webgl/src/kernels/All.ts","../../../../tfjs-backend-webgl/src/kernels/Any.ts","../../../../tfjs-backend-webgl/src/argminmax_gpu.ts","../../../../tfjs-backend-webgl/src/argminmax_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernel_utils/arg_min_max.ts","../../../../tfjs-backend-webgl/src/kernels/ArgMax.ts","../../../../tfjs-backend-webgl/src/kernels/ArgMin.ts","../../../../tfjs-backend-webgl/src/kernels/Asin.ts","../../../../tfjs-backend-webgl/src/kernels/Asinh.ts","../../../../tfjs-backend-webgl/src/kernels/Atan.ts","../../../../tfjs-backend-webgl/src/kernels/Atan2.ts","../../../../tfjs-backend-webgl/src/kernels/Atanh.ts","../../../../tfjs-backend-webgl/src/pool_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/AvgPool.ts","../../../../tfjs-backend-webgl/src/kernels/AvgPool3D.ts","../../../../tfjs-backend-webgl/src/avg_pool_backprop_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/AvgPool3DGrad.ts","../../../../tfjs-backend-webgl/src/kernels/AvgPoolGrad.ts","../../../../tfjs-backend-webgl/src/kernels/BatchMatMul.ts","../../../../tfjs-backend-webgl/src/batchnorm_gpu.ts","../../../../tfjs-backend-webgl/src/batchnorm_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/BatchNorm.ts","../../../../tfjs-backend-webgl/src/slice_gpu.ts","../../../../tfjs-backend-webgl/src/slice_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Slice.ts","../../../../tfjs-backend-webgl/src/kernels/BatchToSpaceND.ts","../../../../tfjs-backend-webgl/src/kernels/Bincount.ts","../../../../tfjs-backend-webgl/src/kernels/BroadcastArgs.ts","../../../../tfjs-backend-webgl/src/kernels/NotEqual.ts","../../../../tfjs-backend-webgl/src/kernels/Real.ts","../../../../tfjs-backend-webgl/src/kernels/Cast.ts","../../../../tfjs-backend-webgl/src/kernel_utils/int.ts","../../../../tfjs-backend-webgl/src/kernels/Ceil.ts","../../../../tfjs-backend-webgl/src/clip_gpu.ts","../../../../tfjs-backend-webgl/src/clip_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/ClipByValue.ts","../../../../tfjs-backend-webgl/src/complex_abs_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/ComplexAbs.ts","../../../../tfjs-backend-webgl/src/concat_gpu.ts","../../../../tfjs-backend-webgl/src/concat_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Imag.ts","../../../../tfjs-backend-webgl/src/kernels/Concat_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Concat.ts","../../../../tfjs-backend-webgl/src/conv_gpu.ts","../../../../tfjs-backend-webgl/src/im2col_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Conv2D_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Conv2D.ts","../../../../tfjs-backend-webgl/src/conv_backprop_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Conv2DBackpropFilter.ts","../../../../tfjs-backend-webgl/src/kernels/Conv2DBackpropInput.ts","../../../../tfjs-backend-webgl/src/kernels/Conv3D.ts","../../../../tfjs-backend-webgl/src/kernels/Conv3DBackpropFilterV2.ts","../../../../tfjs-backend-webgl/src/kernels/Conv3DBackpropInputV2.ts","../../../../tfjs-backend-webgl/src/kernels/Cos.ts","../../../../tfjs-backend-webgl/src/kernels/Cosh.ts","../../../../tfjs-backend-webgl/src/crop_and_resize_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/CropAndResize.ts","../../../../tfjs-backend-webgl/src/cum_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Cum_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Cumprod.ts","../../../../tfjs-backend-webgl/src/kernels/Cumsum.ts","../../../../tfjs-backend-webgl/src/kernels/DenseBincount.ts","../../../../tfjs-backend-webgl/src/depth_to_space_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/DepthToSpace.ts","../../../../tfjs-backend-webgl/src/conv_gpu_depthwise.ts","../../../../tfjs-backend-webgl/src/conv_packed_gpu_depthwise.ts","../../../../tfjs-backend-webgl/src/kernels/DepthwiseConv2dNative.ts","../../../../tfjs-backend-webgl/src/conv_backprop_gpu_depthwise.ts","../../../../tfjs-backend-webgl/src/kernels/DepthwiseConv2dNativeBackpropFilter.ts","../../../../tfjs-backend-webgl/src/kernels/DepthwiseConv2dNativeBackpropInput.ts","../../../../tfjs-backend-webgl/src/diag_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Diag.ts","../../../../tfjs-backend-webgl/src/dilation_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Dilation2D.ts","../../../../tfjs-backend-webgl/src/kernels/Einsum.ts","../../../../tfjs-backend-webgl/src/kernels/Elu.ts","../../../../tfjs-backend-webgl/src/kernels/EluGrad.ts","../../../../tfjs-backend-webgl/src/kernels/Equal.ts","../../../../tfjs-backend-webgl/src/kernels/Erf.ts","../../../../tfjs-backend-webgl/src/kernels/Exp.ts","../../../../tfjs-backend-webgl/src/kernels/ExpandDims.ts","../../../../tfjs-backend-webgl/src/kernels/Expm1.ts","../../../../tfjs-backend-webgl/src/fft_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/FFT_impl.ts","../../../../tfjs-backend-webgl/src/kernels/FFT.ts","../../../../tfjs-backend-webgl/src/fill_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Fill.ts","../../../../tfjs-backend-webgl/src/flip_left_right_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/FlipLeftRight.ts","../../../../tfjs-backend-webgl/src/kernels/Floor.ts","../../../../tfjs-backend-webgl/src/kernels/FloorDiv.ts","../../../../tfjs-backend-webgl/src/kernels/FromPixels_utils/from_pixels_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/FromPixels_utils/from_pixels_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/FromPixels.ts","../../../../tfjs-backend-webgl/src/kernels/FusedConv2D.ts","../../../../tfjs-backend-webgl/src/kernels/FusedDepthwiseConv2D.ts","../../../../tfjs-backend-webgl/src/gather_nd_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/GatherNd.ts","../../../../tfjs-backend-webgl/src/gather_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/GatherV2.ts","../../../../tfjs-backend-webgl/src/kernels/Greater.ts","../../../../tfjs-backend-webgl/src/kernels/GreaterEqual.ts","../../../../tfjs-backend-webgl/src/kernels/IFFT.ts","../../../../tfjs-backend-webgl/src/kernels/IsFinite.ts","../../../../tfjs-backend-webgl/src/kernels/IsInf.ts","../../../../tfjs-backend-webgl/src/kernels/IsNaN.ts","../../../../tfjs-backend-webgl/src/kernels/Less.ts","../../../../tfjs-backend-webgl/src/kernels/LessEqual.ts","../../../../tfjs-backend-webgl/src/kernels/LinSpace.ts","../../../../tfjs-backend-webgl/src/kernels/Log.ts","../../../../tfjs-backend-webgl/src/kernels/Log1p.ts","../../../../tfjs-backend-webgl/src/kernels/LogicalAnd.ts","../../../../tfjs-backend-webgl/src/kernels/LogicalNot.ts","../../../../tfjs-backend-webgl/src/kernels/LogicalOr.ts","../../../../tfjs-backend-webgl/src/lrn_gpu.ts","../../../../tfjs-backend-webgl/src/lrn_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/LRN.ts","../../../../tfjs-backend-webgl/src/lrn_grad_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/LRNGrad.ts","../../../../tfjs-backend-webgl/src/kernels/Max.ts","../../../../tfjs-backend-webgl/src/kernels/Max_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Maximum.ts","../../../../tfjs-backend-webgl/src/kernels/MaxPool.ts","../../../../tfjs-backend-webgl/src/kernels/MaxPool3D.ts","../../../../tfjs-backend-webgl/src/max_pool_backprop_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/MaxPool3DGrad.ts","../../../../tfjs-backend-webgl/src/kernels/MaxPoolGrad.ts","../../../../tfjs-backend-webgl/src/kernels/MaxPoolWithArgmax.ts","../../../../tfjs-backend-webgl/src/kernels/MaxPoolWithArgmax_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Mean.ts","../../../../tfjs-backend-webgl/src/kernels/Mean_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Min.ts","../../../../tfjs-backend-webgl/src/kernels/Minimum.ts","../../../../tfjs-backend-webgl/src/mirror_pad_gpu.ts","../../../../tfjs-backend-webgl/src/mirror_pad_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/MirrorPad.ts","../../../../tfjs-backend-webgl/src/kernels/Mod.ts","../../../../tfjs-backend-webgl/src/multinomial_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/RealDiv.ts","../../../../tfjs-backend-webgl/src/kernels/Sub.ts","../../../../tfjs-backend-webgl/src/kernels/Softmax.ts","../../../../tfjs-backend-webgl/src/kernels/Multinomial.ts","../../../../tfjs-backend-webgl/src/kernels/Neg.ts","../../../../tfjs-backend-webgl/src/kernels/NonMaxSuppressionV3.ts","../../../../tfjs-backend-webgl/src/kernels/NonMaxSuppressionV4.ts","../../../../tfjs-backend-webgl/src/kernels/NonMaxSuppressionV5.ts","../../../../tfjs-backend-webgl/src/onehot_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/OneHot.ts","../../../../tfjs-backend-webgl/src/kernels/ZerosLike.ts","../../../../tfjs-backend-webgl/src/kernels/OnesLike.ts","../../../../tfjs-backend-webgl/src/kernels/Pack.ts","../../../../tfjs-backend-webgl/src/pad_gpu.ts","../../../../tfjs-backend-webgl/src/pad_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/PadV2.ts","../../../../tfjs-backend-webgl/src/kernels/Pow.ts","../../../../tfjs-backend-webgl/src/kernels/Prod.ts","../../../../tfjs-backend-webgl/src/kernels/Range.ts","../../../../tfjs-backend-webgl/src/kernels/Reciprocal.ts","../../../../tfjs-backend-webgl/src/kernels/Relu.ts","../../../../tfjs-backend-webgl/src/kernels/Relu6.ts","../../../../tfjs-backend-webgl/src/resize_bilinear_gpu.ts","../../../../tfjs-backend-webgl/src/resize_bilinear_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/ResizeBilinear.ts","../../../../tfjs-backend-webgl/src/resize_bilinear_backprop_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/ResizeBilinearGrad.ts","../../../../tfjs-backend-webgl/src/resize_nearest_neighbor_gpu.ts","../../../../tfjs-backend-webgl/src/resize_nearest_neighbor_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/ResizeNearestNeighbor.ts","../../../../tfjs-backend-webgl/src/resize_nearest_neighbor_backprop_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/ResizeNearestNeighborGrad.ts","../../../../tfjs-backend-webgl/src/reverse_gpu.ts","../../../../tfjs-backend-webgl/src/reverse_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Reverse.ts","../../../../tfjs-backend-webgl/src/rotate_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/RotateWithOffset.ts","../../../../tfjs-backend-webgl/src/kernels/Round.ts","../../../../tfjs-backend-webgl/src/kernels/Rsqrt.ts","../../../../tfjs-backend-webgl/src/scatter_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/ScatterNd.ts","../../../../tfjs-backend-webgl/src/search_sorted_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/SearchSorted.ts","../../../../tfjs-backend-webgl/src/select_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Select.ts","../../../../tfjs-backend-webgl/src/kernels/Selu.ts","../../../../tfjs-backend-webgl/src/kernels/Sigmoid.ts","../../../../tfjs-backend-webgl/src/kernels/Sign.ts","../../../../tfjs-backend-webgl/src/kernels/Sin.ts","../../../../tfjs-backend-webgl/src/kernels/Sinh.ts","../../../../tfjs-backend-webgl/src/kernels/Softplus.ts","../../../../tfjs-backend-webgl/src/kernels/SpaceToBatchND.ts","../../../../tfjs-backend-webgl/src/kernels/SparseFillEmptyRows.ts","../../../../tfjs-backend-webgl/src/kernels/SparseReshape.ts","../../../../tfjs-backend-webgl/src/kernels/SparseSegmentMean.ts","../../../../tfjs-backend-webgl/src/kernels/SparseSegmentSum.ts","../../../../tfjs-backend-webgl/src/kernels/SparseToDense.ts","../../../../tfjs-backend-webgl/src/kernels/SplitV.ts","../../../../tfjs-backend-webgl/src/kernels/Sqrt.ts","../../../../tfjs-backend-webgl/src/kernels/Square.ts","../../../../tfjs-backend-webgl/src/kernels/SquaredDifference.ts","../../../../tfjs-backend-webgl/src/kernels/Step.ts","../../../../tfjs-backend-webgl/src/strided_slice_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/StridedSlice.ts","../../../../tfjs-backend-webgl/src/kernels/StringNGrams.ts","../../../../tfjs-backend-webgl/src/kernels/StringSplit.ts","../../../../tfjs-backend-webgl/src/kernels/StringToHashBucketFast.ts","../../../../tfjs-backend-webgl/src/kernels/Tan.ts","../../../../tfjs-backend-webgl/src/kernels/Tanh.ts","../../../../tfjs-backend-webgl/src/tile_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Tile.ts","../../../../tfjs-backend-webgl/src/top_k_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/TopK.ts","../../../../tfjs-backend-webgl/src/transform_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Transform.ts","../../../../tfjs-backend-webgl/src/kernels/Unique.ts","../../../../tfjs-backend-webgl/src/kernels/Unpack.ts","../../../../tfjs-backend-webgl/src/segment_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/UnsortedSegmentSum.ts","../../../../tfjs-backend-webgl/src/register_all_kernels.ts","../../../../tfjs-backend-webgl/src/version.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nconst contexts: {[key: string]: WebGLRenderingContext} = {};\n\nconst WEBGL_ATTRIBUTES: WebGLContextAttributes = {\n  alpha: false,\n  antialias: false,\n  premultipliedAlpha: false,\n  preserveDrawingBuffer: false,\n  depth: false,\n  stencil: false,\n  failIfMajorPerformanceCaveat: true\n};\n\nexport function clearWebGLContext(webGLVersion: number) {\n  delete contexts[webGLVersion];\n}\n\nexport function setWebGLContext(\n    webGLVersion: number, gl: WebGLRenderingContext) {\n  contexts[webGLVersion] = gl;\n}\n\nexport function getWebGLContext(\n    webGLVersion: number,\n    customCanvas?: HTMLCanvasElement|OffscreenCanvas): WebGLRenderingContext {\n  if (!(webGLVersion in contexts) || customCanvas != null) {\n    const newCtx = getWebGLRenderingContext(webGLVersion, customCanvas);\n    if (newCtx !== null) {\n      contexts[webGLVersion] = newCtx;\n    } else {\n      console.log('Could not get context for WebGL version', webGLVersion);\n      return null;\n    }\n  }\n  const gl = contexts[webGLVersion];\n  if (gl == null || gl.isContextLost()) {\n    delete contexts[webGLVersion];\n    return getWebGLContext(webGLVersion);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return contexts[webGLVersion];\n}\n\nfunction createCanvas(webGLVersion: number) {\n  if (typeof OffscreenCanvas !== 'undefined' && webGLVersion === 2) {\n    return new OffscreenCanvas(300, 150);\n  } else if (typeof document !== 'undefined') {\n    return document.createElement('canvas');\n  } else {\n    throw new Error('Cannot create a canvas in this context');\n  }\n}\n\nfunction getWebGLRenderingContext(\n    webGLVersion: number,\n    customCanvas?: HTMLCanvasElement|OffscreenCanvas): WebGLRenderingContext {\n  if (webGLVersion !== 1 && webGLVersion !== 2) {\n    throw new Error('Cannot get WebGL rendering context, WebGL is disabled.');\n  }\n  const canvas =\n      customCanvas == null ? createCanvas(webGLVersion) : customCanvas;\n\n  canvas.addEventListener('webglcontextlost', (ev: Event) => {\n    ev.preventDefault();\n    delete contexts[webGLVersion];\n  }, false);\n  if (webGLVersion === 1) {\n    return (canvas.getContext('webgl', WEBGL_ATTRIBUTES) ||\n            canvas.getContext('experimental-webgl', WEBGL_ATTRIBUTES)) as\n        WebGLRenderingContext;\n  }\n  return canvas.getContext('webgl2', WEBGL_ATTRIBUTES) as WebGLRenderingContext;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataId, DataType, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nexport enum PackingScheme {\n  /**\n   * All values in a single texel are densely packed without any constraints.\n   *\n   * This is how the shader encodes a tensor with shape = [2, 3, 4]\n   * (indices are [batch, row, col]).\n   *\n   * 000|001   010|011   020|021\n   * -------   -------   -------\n   * 002|003   012|013   022|023\n   *\n   * 100|101   110|111   120|121\n   * -------   -------   -------\n   * 102|103   112|113   122|123\n   *\n   */\n  DENSE,\n\n  /**\n   * Single texels contain only values from the same batch, and from adjacent\n   * rows and columns.\n   *\n   * This is how the shader encodes a tensor with shape = [2, 3, 5]\n   * (indices are [batch, row, col]).\n   *\n   * 000|001   002|003   004|xxx   020|021   022|023   024|xxx\n   * -------   -------   -------   -------   -------   -------\n   * 010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n   *\n   * 100|101   102|103   104|xxx   120|121   122|123   124|xxx\n   * -------   -------   -------   -------   -------   -------\n   * 110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n   *\n   */\n  SHARED_BATCH\n}\n\nexport enum TextureUsage {\n  RENDER,\n  UPLOAD,\n  PIXELS,\n  DOWNLOAD\n}\n\nexport enum PhysicalTextureType {\n  UNPACKED_FLOAT16,\n  UNPACKED_FLOAT32,\n  PACKED_4X1_UNSIGNED_BYTE,\n  PACKED_2X2_FLOAT32,\n  PACKED_2X2_FLOAT16\n}\n\nexport interface Texture {\n  texture: WebGLTexture;\n  texShape: [number, number];\n}\nexport interface TextureData {\n  // Required.\n  shape: number[];\n  dtype: DataType;\n\n  // Optional.\n  values?: backend_util.BackendValues;\n  texture?: Texture;\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensorInfos, with a parent joining the two with the\n  // complexTensors field. When this is defined, texture will be null.\n  complexTensorInfos?: {real: TensorInfo, imag: TensorInfo};\n  /** [rows, columns] shape of the texture. */\n  texShape?: [number, number];\n  usage?: TextureUsage;\n  isPacked?: boolean;\n\n  refCount: number;\n\n  // Available when the tensor has been sliced.\n  slice?: {\n    // Offset in the 'flat index' space.\n    flatOffset: number;\n    // Used for counting how many sliced tensors point to the same texture.\n    origDataId: DataId;\n  };\n}\n\nexport function getUnpackedMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [columns, rows];\n}\n\nexport function getUnpackedArraySizeFromMatrixSize(\n    matrixSize: number, channelsPerTexture: number): number {\n  return matrixSize * channelsPerTexture;\n}\n\nexport function getColorMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [columns * 4, rows];\n}\n\n/**\n * Get shape for densely packed RGBA texture.\n */\nexport function getDenseTexShape(shape: number[]): [number, number] {\n  const size = util.sizeFromShape(shape);\n  const texelsNeeded = Math.ceil(size / 4);\n  return util.sizeToSquarishShape(texelsNeeded);\n}\n\nexport function getMatrixSizeFromUnpackedArraySize(\n    unpackedSize: number, channelsPerTexture: number): number {\n  if (unpackedSize % channelsPerTexture !== 0) {\n    throw new Error(\n        `unpackedSize (${unpackedSize}) must be a multiple of ` +\n        `${channelsPerTexture}`);\n  }\n  return unpackedSize / channelsPerTexture;\n}\n\nexport function decodeMatrixFromUnpackedColorRGBAArray(\n    unpackedArray: Float32Array, matrix: Float32Array, channels: number) {\n  const requiredSize = unpackedArray.length * channels / 4;\n  if (matrix.length < requiredSize) {\n    throw new Error(\n        `matrix length (${matrix.length}) must be >= ${requiredSize}`);\n  }\n  let dst = 0;\n  for (let src = 0; src < unpackedArray.length; src += 4) {\n    for (let c = 0; c < channels; c++) {\n      matrix[dst++] = unpackedArray[src + c];\n    }\n  }\n}\n\nexport function getPackedMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [\n    Math.max(1, Math.ceil(columns / 2)), Math.max(1, Math.ceil(rows / 2))\n  ];\n}\n\nexport function getPackedRGBAArraySizeFromMatrixShape(\n    rows: number, columns: number): number {\n  const [w, h] = getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return w * h * 4;\n}\n\nexport interface TextureConfig {\n  internalFormatFloat: number;\n  textureFormatFloat: number;\n  internalFormatPackedHalfFloat: number;\n  internalFormatHalfFloat: number;\n  internalFormatPackedFloat: number;\n\n  // The format to use during a gl.readPixels call.\n  downloadTextureFormat: number;\n  // How many channels need to be unpacked after a gl.readPixels call.\n  downloadUnpackNumChannels: number;\n\n  defaultNumChannels: number;\n  textureTypeHalfFloat: number;\n  textureTypeFloat: number;\n}\n\nexport function getTextureConfig(\n    // tslint:disable-next-line:no-any\n    gl: WebGLRenderingContext, textureHalfFloatExtension?: any): TextureConfig {\n  // tslint:disable-next-line:no-any\n  const glany = gl as any;\n\n  let internalFormatFloat: number;\n  let internalFormatHalfFloat: number;\n  let internalFormatPackedHalfFloat: number;\n  let internalFormatPackedFloat: number;\n  let textureFormatFloat: number;\n\n  let downloadTextureFormat: number;\n  let downloadUnpackNumChannels: number;\n\n  let defaultNumChannels: number;\n  let textureTypeHalfFloat: number;\n  let textureTypeFloat: number;\n\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    internalFormatFloat = glany.R32F;\n    internalFormatHalfFloat = glany.R16F;\n    internalFormatPackedHalfFloat = glany.RGBA16F;\n    internalFormatPackedFloat = glany.RGBA32F;\n    textureFormatFloat = glany.RED;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 1;\n    textureTypeHalfFloat = glany.HALF_FLOAT;\n    textureTypeFloat = glany.FLOAT;\n    downloadTextureFormat = glany.RGBA8;\n  } else {\n    internalFormatFloat = gl.RGBA;\n    internalFormatHalfFloat = gl.RGBA;\n    internalFormatPackedHalfFloat = gl.RGBA;\n    internalFormatPackedFloat = glany.RGBA;\n    textureFormatFloat = gl.RGBA;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 4;\n    textureTypeHalfFloat = textureHalfFloatExtension != null ?\n        textureHalfFloatExtension.HALF_FLOAT_OES :\n        null;\n    textureTypeFloat = gl.FLOAT;\n    downloadTextureFormat = gl.RGBA;\n  }\n\n  return {\n    internalFormatFloat,\n    internalFormatHalfFloat,\n    internalFormatPackedHalfFloat,\n    internalFormatPackedFloat,\n    textureFormatFloat,\n    downloadTextureFormat,\n    downloadUnpackNumChannels,\n    defaultNumChannels,\n    textureTypeHalfFloat,\n    textureTypeFloat\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {getWebGLContext} from './canvas_util';\nimport {getTextureConfig} from './tex_util';\n\nexport function callAndCheck<T>(gl: WebGLRenderingContext, func: () => T): T {\n  const returnValue = func();\n  if (env().getBool('DEBUG')) {\n    checkWebGLError(gl);\n  }\n  return returnValue;\n}\n\nfunction checkWebGLError(gl: WebGLRenderingContext) {\n  const error = gl.getError();\n  if (error !== gl.NO_ERROR) {\n    throw new Error('WebGL Error: ' + getWebGLErrorMessage(gl, error));\n  }\n}\n\n// https://en.wikipedia.org/wiki/Half-precision_floating-point_format\nconst MIN_FLOAT16 = 5.96e-8;\nconst MAX_FLOAT16 = 65504;\n\nexport function canBeRepresented(num: number): boolean {\n  if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED') || num === 0 ||\n      (MIN_FLOAT16 < Math.abs(num) && Math.abs(num) < MAX_FLOAT16)) {\n    return true;\n  }\n  return false;\n}\n\nexport function getWebGLErrorMessage(\n    gl: WebGLRenderingContext, status: number): string {\n  switch (status) {\n    case gl.NO_ERROR:\n      return 'NO_ERROR';\n    case gl.INVALID_ENUM:\n      return 'INVALID_ENUM';\n    case gl.INVALID_VALUE:\n      return 'INVALID_VALUE';\n    case gl.INVALID_OPERATION:\n      return 'INVALID_OPERATION';\n    case gl.INVALID_FRAMEBUFFER_OPERATION:\n      return 'INVALID_FRAMEBUFFER_OPERATION';\n    case gl.OUT_OF_MEMORY:\n      return 'OUT_OF_MEMORY';\n    case gl.CONTEXT_LOST_WEBGL:\n      return 'CONTEXT_LOST_WEBGL';\n    default:\n      return `Unknown error code ${status}`;\n  }\n}\n\nexport function getExtensionOrThrow(\n    gl: WebGLRenderingContext, extensionName: string): {} {\n  return throwIfNull<{}>(\n      gl, () => gl.getExtension(extensionName),\n      'Extension \"' + extensionName + '\" not supported on this browser.');\n}\n\nexport function createVertexShader(\n    gl: WebGLRenderingContext, vertexShaderSource: string): WebGLShader {\n  const vertexShader: WebGLShader = throwIfNull<WebGLShader>(\n      gl, () => gl.createShader(gl.VERTEX_SHADER),\n      'Unable to create vertex WebGLShader.');\n  callAndCheck(gl, () => gl.shaderSource(vertexShader, vertexShaderSource));\n  callAndCheck(gl, () => gl.compileShader(vertexShader));\n  if (gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS) === false) {\n    console.log(gl.getShaderInfoLog(vertexShader));\n    throw new Error('Failed to compile vertex shader.');\n  }\n  return vertexShader;\n}\n\nexport function createFragmentShader(\n    gl: WebGLRenderingContext, fragmentShaderSource: string): WebGLShader {\n  const fragmentShader: WebGLShader = throwIfNull<WebGLShader>(\n      gl, () => gl.createShader(gl.FRAGMENT_SHADER),\n      'Unable to create fragment WebGLShader.');\n  callAndCheck(gl, () => gl.shaderSource(fragmentShader, fragmentShaderSource));\n  callAndCheck(gl, () => gl.compileShader(fragmentShader));\n  if (env().get('ENGINE_COMPILE_ONLY')) {\n    return fragmentShader;\n  }\n  if (gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS) === false) {\n    logShaderSourceAndInfoLog(\n        fragmentShaderSource, gl.getShaderInfoLog(fragmentShader));\n    throw new Error('Failed to compile fragment shader.');\n  }\n  return fragmentShader;\n}\n\nconst lineNumberRegex = /ERROR: [0-9]+:([0-9]+):/g;\nexport function logShaderSourceAndInfoLog(\n    shaderSource: string, shaderInfoLog: string) {\n  const lineNumberRegexResult = lineNumberRegex.exec(shaderInfoLog);\n  if (lineNumberRegexResult == null) {\n    console.log(`Couldn't parse line number in error: ${shaderInfoLog}`);\n    console.log(shaderSource);\n    return;\n  }\n\n  const lineNumber = +lineNumberRegexResult[1];\n\n  const shaderLines = shaderSource.split('\\n');\n  const pad = shaderLines.length.toString().length + 2;\n  const linesWithLineNumbers = shaderLines.map(\n      (line, lineNumber) =>\n          util.rightPad((lineNumber + 1).toString(), pad) + line);\n  let maxLineLength = 0;\n  for (let i = 0; i < linesWithLineNumbers.length; i++) {\n    maxLineLength = Math.max(linesWithLineNumbers[i].length, maxLineLength);\n  }\n\n  const beforeErrorLines = linesWithLineNumbers.slice(0, lineNumber - 1);\n  const errorLine = linesWithLineNumbers.slice(lineNumber - 1, lineNumber);\n  const afterErrorLines = linesWithLineNumbers.slice(lineNumber);\n\n  console.log(beforeErrorLines.join('\\n'));\n  console.log(shaderInfoLog.split('\\n')[0]);\n  console.log(\n      `%c ${util.rightPad(errorLine[0], maxLineLength)}`,\n      'border:1px solid red; background-color:#e3d2d2; color:#a61717');\n  console.log(afterErrorLines.join('\\n'));\n}\n\nexport function createProgram(gl: WebGLRenderingContext): WebGLProgram {\n  return throwIfNull<WebGLProgram>(\n      gl, () => gl.createProgram(), 'Unable to create WebGLProgram.');\n}\n\nexport function linkProgram(gl: WebGLRenderingContext, program: WebGLProgram) {\n  callAndCheck(gl, () => gl.linkProgram(program));\n  if (env().get('ENGINE_COMPILE_ONLY')) {\n    return;\n  }\n  if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {\n    console.log(gl.getProgramInfoLog(program));\n    throw new Error('Failed to link vertex and fragment shaders.');\n  }\n}\n\nexport function validateProgram(\n    gl: WebGLRenderingContext, program: WebGLProgram) {\n  callAndCheck(gl, () => gl.validateProgram(program));\n  if (gl.getProgramParameter(program, gl.VALIDATE_STATUS) === false) {\n    console.log(gl.getProgramInfoLog(program));\n    throw new Error('Shader program validation failed.');\n  }\n}\n\nexport function createStaticVertexBuffer(\n    gl: WebGLRenderingContext, data: Float32Array): WebGLBuffer {\n  const buffer: WebGLBuffer = throwIfNull<WebGLBuffer>(\n      gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n  callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n  callAndCheck(gl, () => gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW));\n  return buffer;\n}\n\nexport function createStaticIndexBuffer(\n    gl: WebGLRenderingContext, data: Uint16Array): WebGLBuffer {\n  const buffer: WebGLBuffer = throwIfNull<WebGLBuffer>(\n      gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n  callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer));\n  callAndCheck(\n      gl, () => gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW));\n  return buffer;\n}\n\nexport function getNumChannels(): number {\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    return 1;\n  }\n  return 4;\n}\n\nexport function createTexture(gl: WebGLRenderingContext): WebGLTexture {\n  return throwIfNull<WebGLTexture>(\n      gl, () => gl.createTexture(), 'Unable to create WebGLTexture.');\n}\n\nexport function validateTextureSize(width: number, height: number) {\n  const maxTextureSize = env().getNumber('WEBGL_MAX_TEXTURE_SIZE');\n  if ((width <= 0) || (height <= 0)) {\n    const requested = `[${width}x${height}]`;\n    throw new Error('Requested texture size ' + requested + ' is invalid.');\n  }\n  if ((width > maxTextureSize) || (height > maxTextureSize)) {\n    const requested = `[${width}x${height}]`;\n    const max = `[${maxTextureSize}x${maxTextureSize}]`;\n    throw new Error(\n        'Requested texture size ' + requested +\n        ' greater than WebGL maximum on this browser / GPU ' + max + '.');\n  }\n}\n\nexport function createFramebuffer(gl: WebGLRenderingContext): WebGLFramebuffer {\n  return throwIfNull<WebGLFramebuffer>(\n      gl, () => gl.createFramebuffer(), 'Unable to create WebGLFramebuffer.');\n}\n\nexport function bindVertexBufferToProgramAttribute(\n    gl: WebGLRenderingContext, program: WebGLProgram, attribute: string,\n    buffer: WebGLBuffer, arrayEntriesPerItem: number, itemStrideInBytes: number,\n    itemOffsetInBytes: number): boolean {\n  const loc = gl.getAttribLocation(program, attribute);\n  if (loc === -1) {\n    // The GPU compiler decided to strip out this attribute because it's unused,\n    // thus no need to bind.\n    return false;\n  }\n  callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n  callAndCheck(\n      gl,\n      () => gl.vertexAttribPointer(\n          loc, arrayEntriesPerItem, gl.FLOAT, false, itemStrideInBytes,\n          itemOffsetInBytes));\n  callAndCheck(gl, () => gl.enableVertexAttribArray(loc));\n  return true;\n}\n\nexport function bindTextureUnit(\n    gl: WebGLRenderingContext, texture: WebGLTexture, textureUnit: number) {\n  validateTextureUnit(gl, textureUnit);\n  callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n  callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n}\n\nexport function unbindTextureUnit(\n    gl: WebGLRenderingContext, textureUnit: number) {\n  validateTextureUnit(gl, textureUnit);\n  callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n  callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function getProgramUniformLocationOrThrow(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    uniformName: string): WebGLUniformLocation {\n  return throwIfNull<WebGLUniformLocation>(\n      gl, () => gl.getUniformLocation(program, uniformName),\n      'uniform \"' + uniformName + '\" not present in program.');\n}\n\nexport function getProgramUniformLocation(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    uniformName: string): WebGLUniformLocation {\n  return gl.getUniformLocation(program, uniformName);\n}\n\nexport function bindTextureToProgramUniformSampler(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    uniformSamplerLocation: WebGLUniformLocation, textureUnit: number) {\n  callAndCheck(gl, () => bindTextureUnit(gl, texture, textureUnit));\n  callAndCheck(gl, () => gl.uniform1i(uniformSamplerLocation, textureUnit));\n}\n\nexport function bindCanvasToFramebuffer(gl: WebGLRenderingContext) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n  callAndCheck(gl, () => gl.viewport(0, 0, gl.canvas.width, gl.canvas.height));\n  callAndCheck(gl, () => gl.scissor(0, 0, gl.canvas.width, gl.canvas.height));\n}\n\nexport function bindColorTextureToFramebuffer(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    framebuffer: WebGLFramebuffer) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n  callAndCheck(\n      gl,\n      () => gl.framebufferTexture2D(\n          gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0));\n}\n\nexport function unbindColorTextureFromFramebuffer(\n    gl: WebGLRenderingContext, framebuffer: WebGLFramebuffer) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n  callAndCheck(\n      gl,\n      () => gl.framebufferTexture2D(\n          gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0));\n}\n\nexport function validateFramebuffer(gl: WebGLRenderingContext) {\n  const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n  if (status !== gl.FRAMEBUFFER_COMPLETE) {\n    throw new Error(\n        'Error binding framebuffer: ' + getFramebufferErrorMessage(gl, status));\n  }\n}\n\nexport function getFramebufferErrorMessage(\n    gl: WebGLRenderingContext, status: number): string {\n  switch (status) {\n    case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n      return 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT';\n    case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n      return 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT';\n    case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n      return 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS';\n    case gl.FRAMEBUFFER_UNSUPPORTED:\n      return 'FRAMEBUFFER_UNSUPPORTED';\n    default:\n      return `unknown error ${status}`;\n  }\n}\n\nfunction throwIfNull<T>(\n    gl: WebGLRenderingContext, returnTOrNull: () => T | null,\n    failureMessage: string): T {\n  const tOrNull: T|null = callAndCheck(gl, () => returnTOrNull());\n  if (tOrNull == null) {\n    throw new Error(failureMessage);\n  }\n  return tOrNull;\n}\n\nfunction validateTextureUnit(gl: WebGLRenderingContext, textureUnit: number) {\n  const maxTextureUnit = gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1;\n  const glTextureUnit = textureUnit + gl.TEXTURE0;\n  if (glTextureUnit < gl.TEXTURE0 || glTextureUnit > maxTextureUnit) {\n    const textureUnitRange = `[gl.TEXTURE0, gl.TEXTURE${maxTextureUnit}]`;\n    throw new Error(`textureUnit must be in ${textureUnitRange}.`);\n  }\n}\n\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return util.sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [\n    shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]\n  ];\n}\n\nexport function getShapeAs3D(shape: number[]): [number, number, number] {\n  let shapeAs3D: [number, number, number] = [1, 1, 1];\n  const isScalar = shape.length === 0 || (shape.length === 1 && shape[0] === 1);\n  if (!isScalar) {\n    shapeAs3D =\n        [getBatchDim(shape), ...getRowsCols(shape)] as [number, number, number];\n  }\n  return shapeAs3D;\n}\n\nexport function getTextureShapeFromLogicalShape(\n    logShape: number[], isPacked = false): [number, number] {\n  let maxTexSize = env().getNumber('WEBGL_MAX_TEXTURE_SIZE');\n  if (isPacked) {\n    maxTexSize = maxTexSize * 2;\n\n    // This logic ensures we accurately count the number of packed texels needed\n    // to accommodate the tensor. We can only pack values in the same texel if\n    // they are from adjacent pairs of rows/cols within the same batch. So if a\n    // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n    // fact that the texels containing the third row are half empty.\n    logShape = logShape.map(\n        (d, i) => i >= logShape.length - 2 ?\n            util.nearestLargerEven(logShape[i]) :\n            logShape[i]);\n\n    // Packed texture height is at least 2 (the channel height of a single\n    // texel).\n    if (logShape.length === 1) {\n      logShape = [2, logShape[0]];\n    }\n  }\n\n  // If logical shape is 2, we don't squeeze, since we want to match physical.\n  if (logShape.length !== 2) {\n    const squeezeResult = util.squeezeShape(logShape);\n    logShape = squeezeResult.newShape;\n  }\n\n  let size = util.sizeFromShape(logShape);\n  if (logShape.length <= 1 && size <= maxTexSize) {\n    return [1, size];\n  } else if (\n      logShape.length === 2 && logShape[0] <= maxTexSize &&\n      logShape[1] <= maxTexSize) {\n    return logShape as [number, number];\n  } else if (\n      logShape.length === 3 && logShape[0] * logShape[1] <= maxTexSize &&\n      logShape[2] <= maxTexSize) {\n    return [logShape[0] * logShape[1], logShape[2]];\n  } else if (\n      logShape.length === 3 && logShape[0] <= maxTexSize &&\n      logShape[1] * logShape[2] <= maxTexSize) {\n    return [logShape[0], logShape[1] * logShape[2]];\n  } else if (\n      logShape.length === 4 &&\n      logShape[0] * logShape[1] * logShape[2] <= maxTexSize &&\n      logShape[3] <= maxTexSize) {\n    return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n  } else if (\n      logShape.length === 4 && logShape[0] <= maxTexSize &&\n      logShape[1] * logShape[2] * logShape[3] <= maxTexSize) {\n    return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n  } else {\n    if (isPacked) {\n      // For packed textures size equals the number of channels required to\n      // accommodate the texture data. However in order to squarify such that\n      // inner dimensions stay even, we rewrite size to equal the number of\n      // texels. Then in the return statement we rehydrate the squarified\n      // dimensions to channel units.\n\n      const batchDim = getBatchDim(logShape);\n      let rows = 2, cols = 2;\n      if (logShape.length) {\n        [rows, cols] = getRowsCols(logShape);\n      }\n      size = batchDim * (rows / 2) * (cols / 2);\n      return util.sizeToSquarishShape(size).map(d => d * 2) as [number, number];\n    }\n    return util.sizeToSquarishShape(size);\n  }\n}\n\nfunction isEven(n: number): boolean {\n  return n % 2 === 0;\n}\n\n/**\n * This determines whether reshaping a packed texture requires rearranging\n * the data within the texture, assuming 2x2 packing.\n */\nexport function isReshapeFree(shape1: number[], shape2: number[]): boolean {\n  shape1 = shape1.slice(-2);\n  shape2 = shape2.slice(-2);\n\n  if (util.arraysEqual(shape1, shape2)) {\n    return true;\n  }\n\n  if (!shape1.length || !shape2.length) {  // One of the shapes is a scalar.\n    return true;\n  }\n\n  if (shape1[0] === 0 || shape1[1] === 0 || shape2[0] === 0 ||\n      shape2[1] === 0) {\n    return true;\n  }\n\n  if (shape1.length !== shape2.length) {  // One of the shapes is a vector.\n    const shape1Cols = shape1.slice(-1)[0];\n    const shape2Cols = shape2.slice(-1)[0];\n    if (shape1Cols === shape2Cols) {\n      return true;\n    }\n\n    if (isEven(shape1Cols) && isEven(shape2Cols) &&\n        (shape1[0] === 1 || shape2[0] === 1)) {\n      return true;\n    }\n  }\n  return shape1[1] === shape2[1] && isEven(shape1[0]) && isEven(shape2[0]);\n}\n\n// We cache webgl params because the environment gets reset between\n// unit tests and we don't want to constantly query the WebGLContext for\n// MAX_TEXTURE_SIZE.\nlet MAX_TEXTURE_SIZE: number;\nlet MAX_TEXTURES_IN_SHADER: number;\n\nexport function getWebGLMaxTextureSize(webGLVersion: number): number {\n  if (MAX_TEXTURE_SIZE == null) {\n    const gl = getWebGLContext(webGLVersion);\n    MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n  }\n  return MAX_TEXTURE_SIZE;\n}\n\nexport function resetMaxTextureSize() {\n  MAX_TEXTURE_SIZE = null;\n}\nexport function resetMaxTexturesInShader() {\n  MAX_TEXTURES_IN_SHADER = null;\n}\n\nexport function getMaxTexturesInShader(webGLVersion: number): number {\n  if (MAX_TEXTURES_IN_SHADER == null) {\n    const gl = getWebGLContext(webGLVersion);\n    MAX_TEXTURES_IN_SHADER = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n  }\n  // We cap at 16 to avoid spurious runtime \"memory exhausted\" error.\n  return Math.min(16, MAX_TEXTURES_IN_SHADER);\n}\n\nexport function getWebGLDisjointQueryTimerVersion(webGLVersion: number):\n    number {\n  if (webGLVersion === 0) {\n    return 0;\n  }\n\n  let queryTimerVersion: number;\n  const gl = getWebGLContext(webGLVersion);\n\n  if (hasExtension(gl, 'EXT_disjoint_timer_query_webgl2') &&\n      webGLVersion === 2) {\n    queryTimerVersion = 2;\n  } else if (hasExtension(gl, 'EXT_disjoint_timer_query')) {\n    queryTimerVersion = 1;\n  } else {\n    queryTimerVersion = 0;\n  }\n  return queryTimerVersion;\n}\n\nexport function hasExtension(gl: WebGLRenderingContext, extensionName: string) {\n  const ext = gl.getExtension(extensionName);\n  return ext != null;\n}\n\nexport function isWebGLVersionEnabled(webGLVersion: 1|2) {\n  try {\n    const gl = getWebGLContext(webGLVersion);\n    if (gl != null) {\n      return true;\n    }\n  } catch (e) {\n    console.log('Error when getting WebGL context: ', e);\n    return false;\n  }\n  return false;\n}\n\nexport function isCapableOfRenderingToFloatTexture(webGLVersion: number):\n    boolean {\n  if (webGLVersion === 0) {\n    return false;\n  }\n\n  const gl = getWebGLContext(webGLVersion);\n\n  if (webGLVersion === 1) {\n    if (!hasExtension(gl, 'OES_texture_float')) {\n      return false;\n    }\n  } else {\n    if (!hasExtension(gl, 'EXT_color_buffer_float')) {\n      return false;\n    }\n  }\n\n  const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n  return isFrameBufferComplete;\n}\n\n/**\n * Check if we can download values from a float/half-float texture.\n *\n * Note that for performance reasons we use binding a texture to a framebuffer\n * as a proxy for ability to download float values later using readPixels. The\n * texture params of this texture will not match those in readPixels exactly\n * but if we are unable to bind some kind of float texture to the frameBuffer\n * then we definitely will not be able to read float values from it.\n */\nexport function isDownloadFloatTextureEnabled(webGLVersion: number): boolean {\n  if (webGLVersion === 0) {\n    return false;\n  }\n\n  const gl = getWebGLContext(webGLVersion);\n\n  if (webGLVersion === 1) {\n    if (!hasExtension(gl, 'OES_texture_float')) {\n      return false;\n    }\n    if (!hasExtension(gl, 'WEBGL_color_buffer_float')) {\n      return false;\n    }\n  } else {\n    if (hasExtension(gl, 'EXT_color_buffer_float')) {\n      return createFloatTextureAndBindToFramebuffer(gl);\n    }\n\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    if (hasExtension(gl, COLOR_BUFFER_HALF_FLOAT)) {\n      const textureHalfFloatExtension =\n          gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      return createHalfFloatTextureAndBindToFramebuffer(\n          gl, textureHalfFloatExtension);\n    }\n\n    return false;\n  }\n\n  const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n  return isFrameBufferComplete;\n}\n\nfunction createFloatTextureAndBindToFramebuffer(gl: WebGLRenderingContext):\n    boolean {\n  const texConfig = getTextureConfig(gl);\n\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n\n  const width = 1;\n  const height = 1;\n  gl.texImage2D(\n      gl.TEXTURE_2D, 0, texConfig.internalFormatFloat, width, height, 0,\n      texConfig.textureFormatFloat, texConfig.textureTypeFloat, null);\n\n  const frameBuffer = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n  gl.framebufferTexture2D(\n      gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n  const isFrameBufferComplete =\n      gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.deleteTexture(texture);\n  gl.deleteFramebuffer(frameBuffer);\n\n  return isFrameBufferComplete;\n}\n\nfunction createHalfFloatTextureAndBindToFramebuffer(\n    // tslint:disable-next-line:no-any\n    gl: WebGLRenderingContext, textureHalfFloatExtension: any): boolean {\n  const texConfig = getTextureConfig(gl, textureHalfFloatExtension);\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n\n  const width = 1;\n  const height = 1;\n  gl.texImage2D(\n      gl.TEXTURE_2D, 0, texConfig.internalFormatHalfFloat, width, height, 0,\n      texConfig.textureFormatFloat, texConfig.textureTypeHalfFloat, null);\n\n  const frameBuffer = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n  gl.framebufferTexture2D(\n      gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n  const isFrameBufferComplete =\n      gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.deleteTexture(texture);\n  gl.deleteFramebuffer(frameBuffer);\n\n  return isFrameBufferComplete;\n}\n\nexport function isWebGLFenceEnabled(webGLVersion: number) {\n  if (webGLVersion !== 2) {\n    return false;\n  }\n  const gl = getWebGLContext(webGLVersion);\n\n  // tslint:disable-next-line:no-any\n  const isEnabled = (gl as any).fenceSync != null;\n  return isEnabled;\n}\n\nexport function assertNotComplex(\n    tensor: TensorInfo|TensorInfo[], opName: string): void {\n  if (!Array.isArray(tensor)) {\n    tensor = [tensor];\n  }\n  tensor.forEach(t => {\n    if (t != null) {\n      util.assert(\n          t.dtype !== 'complex64',\n          () => `${opName} does not support complex64 tensors ` +\n              'in the WebGL backend.');\n    }\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {device_util, env} from '@tensorflow/tfjs-core';\n\nimport {getMaxTexturesInShader, getWebGLDisjointQueryTimerVersion, getWebGLMaxTextureSize, isCapableOfRenderingToFloatTexture, isDownloadFloatTextureEnabled, isWebGLFenceEnabled, isWebGLVersionEnabled} from './webgl_util';\n\nconst ENV = env();\n\n/**\n * This file contains WebGL-specific flag registrations.\n */\n\n/**\n * True if WebGL is supported.\n */\nENV.registerFlag('HAS_WEBGL', () => ENV.getNumber('WEBGL_VERSION') > 0);\n\n/** 0: No WebGL, 1: WebGL 1.0, 2: WebGL 2.0. */\nENV.registerFlag('WEBGL_VERSION', () => {\n  if (isWebGLVersionEnabled(2)) {\n    return 2;\n  } else if (isWebGLVersionEnabled(1)) {\n    return 1;\n  }\n  return 0;\n});\n\n/** Whether to check for numerical representation problems. */\nENV.registerFlag('WEBGL_CHECK_NUMERICAL_PROBLEMS', () => false);\n\nENV.registerFlag(\n    'WEBGL_BUFFER_SUPPORTED', () => ENV.get('WEBGL_VERSION') === 2);\n\n/** Whether the WebGL backend will sometimes forward ops to the CPU. */\nENV.registerFlag('WEBGL_CPU_FORWARD', () => true);\n\n/** Whether the WebGL backend will always use f16 textures for rendering. */\nENV.registerFlag('WEBGL_FORCE_F16_TEXTURES', () => false);\n\n/** Whether to turn all packing related flags on. */\nENV.registerFlag('WEBGL_PACK', () => ENV.getBool('HAS_WEBGL'));\n\n/** Whether we will pack the batchnormalization op. */\nENV.registerFlag('WEBGL_PACK_NORMALIZATION', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack the clip op. */\nENV.registerFlag('WEBGL_PACK_CLIP', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack the depthwise conv op. */\nENV.registerFlag('WEBGL_PACK_DEPTHWISECONV', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack binary ops. */\nENV.registerFlag(\n    'WEBGL_PACK_BINARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack unary ops. */\nENV.registerFlag(\n    'WEBGL_PACK_UNARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack array ops. */\nENV.registerFlag(\n    'WEBGL_PACK_ARRAY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack image ops. */\nENV.registerFlag(\n    'WEBGL_PACK_IMAGE_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack reduce ops. */\nENV.registerFlag('WEBGL_PACK_REDUCE', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether packed WebGL kernels lazily unpack their outputs. */\nENV.registerFlag('WEBGL_LAZILY_UNPACK', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will use the im2col algorithm to speed up convolutions. */\nENV.registerFlag('WEBGL_CONV_IM2COL', () => ENV.getBool('WEBGL_PACK'));\n\n/** The maximum texture dimension. */\nENV.registerFlag(\n    'WEBGL_MAX_TEXTURE_SIZE',\n    () => getWebGLMaxTextureSize(ENV.getNumber('WEBGL_VERSION')));\n\n/** The maximum texture dimension. */\nENV.registerFlag(\n    'WEBGL_MAX_TEXTURES_IN_SHADER',\n    () => getMaxTexturesInShader(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * The disjoint_query_timer extension version.\n * 0: disabled, 1: EXT_disjoint_timer_query, 2:\n * EXT_disjoint_timer_query_webgl2.\n * In Firefox with WebGL 2.0,\n * EXT_disjoint_timer_query_webgl2 is not available, so we must use the\n * WebGL 1.0 extension.\n */\nENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION', () => {\n  const webGLVersion = ENV.getNumber('WEBGL_VERSION');\n\n  if (webGLVersion === 0) {\n    return 0;\n  }\n  return getWebGLDisjointQueryTimerVersion(webGLVersion);\n});\n\n/**\n * Whether the timer object from the disjoint_query_timer extension gives\n * timing information that is reliable.\n */\nENV.registerFlag(\n    'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE',\n    () => ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0 &&\n        !device_util.isMobile());\n\n/**\n * Whether the device is physically capable of rendering to float32 textures.\n */\nENV.registerFlag(\n    'WEBGL_RENDER_FLOAT32_CAPABLE',\n    () => isCapableOfRenderingToFloatTexture(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * Whether rendering to float32 textures is enabled. If disabled, renders to\n * float16 textures.\n */\nENV.registerFlag('WEBGL_RENDER_FLOAT32_ENABLED', () => {\n  return ENV.getBool('WEBGL_FORCE_F16_TEXTURES') ?\n      false :\n      ENV.getBool('WEBGL_RENDER_FLOAT32_CAPABLE');\n});\n\n/**\n * Whether downloading float textures is enabled (16 or 32 bit). If disabled,\n * uses IEEE 754 encoding of the float32 values to 4 uint8 when downloading.\n */\nENV.registerFlag(\n    'WEBGL_DOWNLOAD_FLOAT_ENABLED',\n    () => isDownloadFloatTextureEnabled(ENV.getNumber('WEBGL_VERSION')));\n\n/** Whether the fence API is available. */\nENV.registerFlag(\n    'WEBGL_FENCE_API_ENABLED',\n    () => isWebGLFenceEnabled(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * Tensors with size <= than this will be uploaded as uniforms, not textures.\n */\nENV.registerFlag('WEBGL_SIZE_UPLOAD_UNIFORM', () => {\n  // Use uniform uploads only when 32bit floats are supported. In\n  // 16bit\n  // environments there are problems with comparing a 16bit texture value\n  // with a 32bit uniform value.\n  const useUniforms = ENV.getBool('WEBGL_RENDER_FLOAT32_ENABLED');\n  return useUniforms ? 4 : 0;\n});\n\n/**\n * If the total number of bytes allocated on the GPU is greater than this\n * number, we will aggressively delete textures upon disposal with\n * gl.deleteMatrixTexture, rather than making them available for reuse.\n *\n * Default value -1 indicates that we will never aggressively delete textures.\n */\nENV.registerFlag(\n    'WEBGL_DELETE_TEXTURE_THRESHOLD',\n    () => {\n      return -1;\n    },\n    threshold => {\n      if (threshold < 0 && threshold !== -1) {\n        throw new Error(\n            `WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never ` +\n            `delete) or at least 0, but got ${threshold}.`);\n      }\n    });\n\n/**\n * Trigger a manual GL command flush if the threshold of time has passed since\n * previous Kernel execution. This can be useful for Andorid device where GL\n * command flush are delayed un til the end of javascript task. This value is\n * measured in millisecond. Typically you want to set this value to close to 1.\n *\n * Default value 1 for mobile chrome, and -1 for rest cases. -1 indicates that\n * we will not enforce manual flush and depend on system default flush schedule.\n */\nENV.registerFlag(\n    'WEBGL_FLUSH_THRESHOLD',\n    () => {\n      return device_util.isMobile() ? 1 : -1;\n    },\n    threshold => {\n      if (threshold < 0 && threshold !== -1) {\n        throw new Error(\n            `WEBGL_FLUSH_THRESHOLD must be -1 (indicating never ` +\n            `manual flush) or at least 0, but got ${threshold}.`);\n      }\n    });\n\n/**\n * Threshold for input tensor size that determines whether WebGL backend will\n * delegate computation to CPU.\n *\n * Default value is 128.\n */\nENV.registerFlag('CPU_HANDOFF_SIZE_THRESHOLD', () => 128);\n\n/** Whether we will use shapes uniforms. */\nENV.registerFlag('WEBGL_USE_SHAPES_UNIFORMS', () => false);\n\n/**\n * Threshold for last dimension of input tensor that determines whether\n * WebGL backend for the Top K op will delegate computation to CPU. If input\n * is smaller than threshold then CPU will be used\n *\n * Default value is 100000.\n */\nENV.registerFlag('TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD', () => 100000);\n\n/**\n * Threshold for K that determines whether\n * WebGL backend for the Top K op will delegate computation to CPU. If k\n * is larger than threshold then CPU will be used\n *\n * Default value is 128.\n */\nENV.registerFlag('TOPK_K_CPU_HANDOFF_THRESHOLD', () => 128);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {env} from '@tensorflow/tfjs-core';\n\nexport type GLSL = {\n  version: string,\n  attribute: string,\n  varyingVs: string,\n  varyingFs: string,\n  texture2D: string,\n  output: string,\n  defineOutput: string,\n  defineSpecialNaN: string,\n  defineSpecialInf: string,\n  defineRound: string\n};\n\nexport function getGlslDifferences(): GLSL {\n  let version: string;\n  let attribute: string;\n  let varyingVs: string;\n  let varyingFs: string;\n  let texture2D: string;\n  let output: string;\n  let defineOutput: string;\n  let defineSpecialNaN: string;\n  let defineSpecialInf: string;\n  let defineRound: string;\n\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    version = '#version 300 es';\n    attribute = 'in';\n    varyingVs = 'out';\n    varyingFs = 'in';\n    texture2D = 'texture';\n    output = 'outputColor';\n    defineOutput = 'out vec4 outputColor;';\n\n    // Use custom isnan definition to work across differences between\n    // implementations on various platforms. While this should happen in ANGLE\n    // we still see differences between android and windows (on chrome) when\n    // using isnan directly. Since WebGL2 supports uint type and\n    // floatBitsToUinT built-in function, we could implment isnan following\n    // IEEE 754 rules.\n    // NaN defination in IEEE 754-1985 is :\n    //   - sign = either 0 or 1.\n    //   - biased exponent = all 1 bits.\n    //   - fraction = anything except all 0 bits (since all 0 bits represents\n    //   infinity).\n    // https://en.wikipedia.org/wiki/IEEE_754-1985#Representation_of_non-numbers\n    defineSpecialNaN = `\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    `;\n    // In webgl 2 we do not need to specify a custom isinf so there is no\n    // need for a special INFINITY constant.\n    defineSpecialInf = ``;\n    defineRound = `\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n  } else {\n    version = '';\n    attribute = 'attribute';\n    varyingVs = 'varying';\n    varyingFs = 'varying';\n    texture2D = 'texture2D';\n    output = 'gl_FragColor';\n    defineOutput = '';\n    // WebGL1 has no built in isnan so we define one here.\n    defineSpecialNaN = `\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    `;\n    defineSpecialInf = `\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    `;\n    defineRound = `\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n  }\n\n  return {\n    version,\n    attribute,\n    varyingVs,\n    varyingFs,\n    texture2D,\n    output,\n    defineOutput,\n    defineSpecialNaN,\n    defineSpecialInf,\n    defineRound\n  };\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * Produces GLSL code that derives logical coordinates from a flat\n * index. The code performs integer division with each stride and decrements\n * the index until the index equals the final dimension coordinate.\n */\nexport function getLogicalCoordinatesFromFlatIndex(\n    coords: string[], shape: number[], index = 'index'): string {\n  const strides = util.computeStrides(shape);\n  return strides\n      .map((stride, i) => {\n        const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n            `index -= ${coords[i]} * ${stride}`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n}\n\nexport function getOutputLogicalCoordinatesFromFlatIndexByUniform(\n    coords: string[], shape: number[], index = 'index'): string {\n  const strides = util.computeStrides(shape);\n  return strides\n      .map((_, i) => {\n        const line1 = `int ${coords[i]} = ${index} / outShapeStrides[${i}]`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * outShapeStrides[${\n                i}]` :\n            `index -= ${coords[i]} * outShapeStrides[${i}]`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n}\n\n// Produces GLSL code that computes strides.\nfunction symbolicallyComputeStrides(\n    indicesArr: number[], variableName: string): string[] {\n  const numCoords = indicesArr.length;\n  const shape = indicesArr.map(d => `${variableName}[${d}]`);\n  const strides = new Array(numCoords - 1);\n  strides[numCoords - 2] = shape[numCoords - 1];\n  for (let i = numCoords - 3; i >= 0; --i) {\n    strides[i] = `(${strides[i + 1]} * ${shape[i + 1]})`;\n  }\n\n  return strides;\n}\n\nexport function getLogicalCoordinatesFromFlatIndexByUniform(\n    coords: string[], variableName: string, index = 'index'): string {\n  const indicesArray = coords.map((_, i) => i);\n  const strides = symbolicallyComputeStrides(indicesArray, variableName);\n  return strides\n      .map((_, i) => {\n        const line1 = `int ${coords[i]} = ${index} / ${strides[i]}`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${strides[i]}` :\n            `index -= ${coords[i]} * ${strides[i]}`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n}\n\nfunction buildVec(x: string[]): string {\n  if (x.length === 1) {\n    return `${x[0]}`;\n  }\n  return `vec${x.length}(${x.join(',')})`;\n}\n\n/**\n * Produces GLSL code that computes the dot product of the input x and y\n * vectors. Handles splitting inputs into increments of vec4s when necessary.\n */\nexport function dotify(x: string[], y: string[]): string {\n  if (x.length !== y.length) {\n    throw new Error(\n        `Vectors to be dotted must be of the same length -` +\n        `got ${x.length} and ${y.length}`);\n  }\n\n  const slices: string[] = [];\n  const nearestVec4 = Math.floor(x.length / 4);\n  const nearestVec4Remainder = x.length % 4;\n\n  for (let i = 0; i < nearestVec4; i++) {\n    const xSlice = x.slice(i * 4, i * 4 + 4);\n    const ySlice = y.slice(i * 4, i * 4 + 4);\n    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n  }\n\n  if (nearestVec4Remainder !== 0) {\n    let xSlice = x.slice(nearestVec4 * 4);\n    let ySlice = y.slice(nearestVec4 * 4);\n    if (xSlice.length === 1) {\n      xSlice = xSlice.map(d => `float(${d})`);\n      ySlice = ySlice.map(d => `float(${d})`);\n    }\n    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n  }\n\n  return slices.map((d, i) => `dot(${d})`).join('+');\n}\n\n/**\n * Produces GLSL that computes the flat index from 3D coordinates.\n */\nexport function getFlatIndexFrom3D(shape: [number, number, number]): string {\n  const strides = util.computeStrides(shape).map(d => d.toString());\n\n  return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${strides[0]} + coords.y * ${strides[1]} + coords.z;\n  }\n`;\n}\n\nexport function getFlatIndexFrom3DOutput(): string {\n  return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n`;\n}\n\nexport const ENCODE_FLOAT_SNIPPET = `\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n`;\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Please make sure the shaker key in makeShaderKey in gpgpu_math.ts is well\n// mapped if any shader source code is changed in this file.\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nconst {getBroadcastDims} = backend_util;\nimport {getGlslDifferences, GLSL} from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\n\nexport type ShapeInfo = {\n  logicalShape: number[],\n  texShape: [number, number],\n  isUniform: boolean,\n  isPacked: boolean,\n  flatOffset: number\n};\n\nexport type InputInfo = {\n  name: string,\n  shapeInfo: ShapeInfo\n};\n\nexport type UniformType =\n    'float'|'vec2'|'vec3'|'vec4'|'int'|'ivec2'|'ivec3'|'ivec4';\n\ninterface ProgramParams {\n  userCode: string;\n  enableShapeUniforms?: boolean;\n  packedInputs?: boolean;\n  customUniforms?:\n      Array<{name: string; arrayIndex?: number; type: UniformType;}>;\n}\n\nexport function makeShader(\n    inputsInfo: InputInfo[], outputShape: ShapeInfo,\n    program: ProgramParams): string {\n  const prefixSnippets: string[] = [];\n  inputsInfo.forEach(x => {\n    const size = util.sizeFromShape(x.shapeInfo.logicalShape);\n\n    // Snippet when we decided to upload the values as uniform.\n    if (x.shapeInfo.isUniform) {\n      prefixSnippets.push(\n          `uniform float ${x.name}${size > 1 ? `[${size}]` : ''};`);\n    } else {\n      prefixSnippets.push(`uniform sampler2D ${x.name};`);\n      prefixSnippets.push(`uniform int offset${x.name};`);\n    }\n\n    if (program.enableShapeUniforms) {\n      const {uniformShape} = getUniformInfoFromShape(\n          program.packedInputs, x.shapeInfo.logicalShape, x.shapeInfo.texShape);\n      switch (uniformShape.length) {\n        case 1:\n          prefixSnippets.push(`uniform int ${x.name}Shape;`);\n          break;\n        case 2:\n          prefixSnippets.push(`uniform ivec2 ${x.name}Shape;`);\n          break;\n        case 3:\n          prefixSnippets.push(`uniform ivec3 ${x.name}Shape;`);\n          break;\n        case 4:\n          prefixSnippets.push(`uniform ivec4 ${x.name}Shape;`);\n          break;\n        default:\n          break;\n      }\n      prefixSnippets.push(`uniform ivec2 ${x.name}TexShape;`);\n    }\n  });\n\n  if (program.enableShapeUniforms) {\n    switch (outputShape.logicalShape.length) {\n      case 1:\n        prefixSnippets.push(`uniform int outShape;`);\n        break;\n      case 2:\n        prefixSnippets.push(`uniform ivec2 outShape;`);\n        prefixSnippets.push(`uniform int outShapeStrides;`);\n        break;\n      case 3:\n        prefixSnippets.push(`uniform ivec3 outShape;`);\n        prefixSnippets.push(`uniform ivec2 outShapeStrides;`);\n        break;\n      case 4:\n        prefixSnippets.push(`uniform ivec4 outShape;`);\n        prefixSnippets.push(`uniform ivec3 outShapeStrides;`);\n        break;\n      default:\n        break;\n    }\n    prefixSnippets.push(`uniform ivec2 outTexShape;`);\n  }\n  if (program.customUniforms) {\n    program.customUniforms.forEach((d) => {\n      prefixSnippets.push(`uniform ${d.type} ${d.name}${\n          d.arrayIndex ? `[${d.arrayIndex}]` : ''};`);\n    });\n  }\n  const inputPrefixSnippet = prefixSnippets.join('\\n');\n\n  const inputSamplingSnippet = inputsInfo\n                                   .map(\n                                       x => getInputSamplingSnippet(\n                                           x, outputShape, program.packedInputs,\n                                           program.enableShapeUniforms))\n                                   .join('\\n');\n  const outTexShape = outputShape.texShape;\n  const glsl = getGlslDifferences();\n  const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n  let outputSamplingSnippet: string;\n  let floatTextureSetOutputSnippet: string;\n  let shaderPrefix = getShaderPrefix(glsl);\n\n  if (outputShape.isPacked) {\n    outputSamplingSnippet = getPackedOutputSamplingSnippet(\n        outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n  } else {\n    outputSamplingSnippet = getOutputSamplingSnippet(\n        outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n  }\n\n  if (program.packedInputs) {\n    shaderPrefix += SHADER_PACKED_PREFIX;\n  }\n\n  const source = [\n    shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet,\n    inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet,\n    program.userCode\n  ].join('\\n');\n  return source;\n}\n\nfunction getSamplerFromInInfo(\n    inInfo: InputInfo, enableShapeUniforms = false): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getSamplerScalar(inInfo, enableShapeUniforms);\n    case 1:\n      return getSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getSampler3D(inInfo, enableShapeUniforms);\n    case 4:\n      return getSampler4D(inInfo, enableShapeUniforms);\n    case 5:\n      return getSampler5D(inInfo);\n    case 6:\n      return getSampler6D(inInfo);\n    default:\n      throw new Error(\n          `${shape.length}-D input sampling` +\n          ` is not yet supported`);\n  }\n}\n\nfunction getPackedSamplerFromInInfo(\n    inInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getPackedSamplerScalar(inInfo);\n    case 1:\n      return getPackedSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getPackedSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getPackedSampler3D(inInfo, enableShapeUniforms);\n    default:\n      return getPackedSamplerND(inInfo, enableShapeUniforms);\n  }\n}\n\nfunction getInputSamplingSnippet(\n    inInfo: InputInfo, outShapeInfo: ShapeInfo, usesPackedTextures = false,\n    enableShapeUniforms: boolean): string {\n  let res = '';\n  if (usesPackedTextures) {\n    res += getPackedSamplerFromInInfo(inInfo, enableShapeUniforms);\n  } else {\n    res += getSamplerFromInInfo(inInfo, enableShapeUniforms);\n  }\n\n  const inShape = inInfo.shapeInfo.logicalShape;\n  const outShape = outShapeInfo.logicalShape;\n  if (inShape.length <= outShape.length) {\n    if (usesPackedTextures) {\n      res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n    } else {\n      res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n    }\n  }\n  return res;\n}\n\nfunction getPackedOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutputPacked1DCoords(\n          outShape as [number], outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutputPacked2DCoords(\n          outShape as [number, number], outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutputPacked3DCoords(\n          outShape as [number, number, number], outTexShape,\n          enableShapeUniforms);\n    default:\n      return getOutputPackedNDCoords(\n          outShape, outTexShape, enableShapeUniforms);\n  }\n}\n\nfunction getOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutput1DCoords(\n          outShape as [number], outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutput2DCoords(\n          outShape as [number, number], outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutput3DCoords(\n          outShape as [number, number, number], outTexShape,\n          enableShapeUniforms);\n    case 4:\n      return getOutput4DCoords(\n          outShape as [number, number, number, number], outTexShape,\n          enableShapeUniforms);\n    case 5:\n      return getOutput5DCoords(\n          outShape as [number, number, number, number, number], outTexShape);\n    case 6:\n      return getOutput6DCoords(\n          outShape as [number, number, number, number, number, number],\n          outTexShape);\n    default:\n      throw new Error(\n          `${outShape.length}-D output sampling is not yet supported`);\n  }\n}\n\nfunction getFloatTextureSampleSnippet(glsl: GLSL): string {\n  return `\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${glsl.texture2D}(textureSampler, uv).r;\n    }\n  `;\n}\n\nfunction getFloatTextureSetRSnippet(glsl: GLSL): string {\n  return `\n    void setOutput(float val) {\n      ${glsl.output} = vec4(val, 0, 0, 0);\n    }\n  `;\n}\n\nfunction getFloatTextureSetRGBASnippet(glsl: GLSL): string {\n  return `\n    void setOutput(vec4 val) {\n      ${glsl.output} = val;\n    }\n  `;\n}\n\nfunction getShaderPrefix(glsl: GLSL): string {\n  const SHADER_PREFIX = `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFs} vec2 resultUV;\n    ${glsl.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${glsl.defineSpecialNaN}\n    ${glsl.defineSpecialInf}\n    ${glsl.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${SAMPLE_1D_SNIPPET}\n    ${SAMPLE_2D_SNIPPET}\n    ${SAMPLE_3D_SNIPPET}\n  `;\n\n  return SHADER_PREFIX;\n}\n\nconst SAMPLE_1D_SNIPPET = `\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_2D_SNIPPET = `\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_3D_SNIPPET = `\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SHADER_PACKED_PREFIX = `\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n`;\n\nfunction getOutputScalarCoords() {\n  return `\n    int getOutputCoords() {\n      return 0;\n    }\n  `;\n}\n\nfunction getOutputPacked1DCoords(\n    shape: [number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (packedTexShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);\n      }\n    `;\n  }\n\n  if (packedTexShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  `;\n  }\n\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);\n    }\n  `;\n}\n\nfunction getOutput1DCoords(\n    shape: [number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (texShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return int(resultUV.x * ${texShape[1]}.0);\n      }\n    `;\n  }\n  if (texShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return int(resultUV.y * ${texShape[0]}.0);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  `;\n  }\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      return resTexRC.x * ${texShape[1]} + resTexRC.y;\n    }\n  `;\n}\n\nfunction getOutputPacked3DCoords(\n    shape: [number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    return `\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n  }\n\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getOutput3DCoords(\n    shape: [number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet =\n        shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n            ['r', 'c', 'd'], shape);\n\n    return `\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${coordsFromIndexSnippet}\n    return ivec3(r, c, d);\n  }\n`;\n  }\n  const coordsFromIndexSnippet =\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n\nfunction getOutputPackedNDCoords(\n    shape: number[], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n  const texelsInBatch =\n      texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n  let texelsInBatchN = texelsInBatch;\n  let batches = ``;\n  let coords = 'b, r, c';\n\n  for (let b = 2; b < shape.length - 1; b++) {\n    texelsInBatchN *= shape[shape.length - b - 1];\n    batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n    coords = `b${b}, ` + coords;\n  }\n\n  return `\n    ivec${shape.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      ${batches}\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec${shape.length}(${coords});\n    }\n  `;\n}\n\nfunction getOutput4DCoords(\n    shape: [number, number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet =\n        shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n            ['r', 'c', 'd', 'd2'], shape);\n\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n  }\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2'], shape);\n\n  return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n}\n\nfunction getOutput5DCoords(\n    shape: [number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3'], shape);\n\n  return `\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},\n                             ${texShape[1]}));\n\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `;\n}\n\nfunction getOutput6DCoords(\n    shape: [number, number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n\n  return `\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `;\n}\n\nfunction getOutputPacked2DCoords(\n    shape: [number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    `;\n    }\n\n    return `\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${\n        packedTexShape[1]}));\n      }\n    `;\n  }\n\n  // texels needed to accommodate a logical row\n  const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n  /**\n   * getOutputCoords\n   *\n   * resTexRC: The rows and columns of the texels. If you move over one\n   * texel to the right in the packed texture, you are moving over one column\n   * (not two).\n   *\n   * index: The texel index\n   */\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n  }\n\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getOutput2DCoords(\n    shape: [number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));\n      }\n    `;\n  }\n  if (shape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n  }\n  if (shape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  `;\n  }\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      int r = index / ${shape[1]};\n      int c = index - r * ${shape[1]};\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getFlatOffsetUniformName(texName: string): string {\n  return `offset${texName}`;\n}\n\nfunction getPackedSamplerScalar(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  return `\n    vec4 ${funcName}() {\n      return ${glsl.texture2D}(${texName}, halfCR);\n    }\n  `;\n}\n\nfunction getSamplerScalar(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  if (inputInfo.shapeInfo.isUniform) {\n    return `float ${funcName}() {return ${texName};}`;\n  }\n  const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;\n  if (texNumR === 1 && texNumC === 1) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], ${\n        offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;\n  return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler1D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  return `\n    vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler1D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int index) {\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const tNumR = texShape[0];\n  const tNumC = texShape[1];\n\n  if (tNumC === 1 && tNumR === 1) {\n    return `\n      float ${funcName}(int index) {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  if (tNumC === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / float(${\n          texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (tNumR === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / float(${\n          texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler2D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const glsl = getGlslDifferences();\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const valuesPerRow = Math.ceil(shape[1] / 2);\n\n  return `\n    vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${\n      packedTexShape[1]}, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler2D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    return `\n    float ${funcName}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const offset = getFlatOffsetUniformName(texName);\n  if (texNumC === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${\n          texName}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  if (texNumR === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${\n          texName}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n      float ${funcName}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${texName}Shape[1] + col + ${offset};\n        vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  return `\n  float ${funcName}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${shape[1]} + col + ${offset};\n    vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n    return sampleTexture(${texName}, uv);\n  }\n`;\n}\n\nfunction getPackedSampler3D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  if (shape[0] === 1) {\n    const squeezedShape = shape.slice(1);\n    const keptDims = [1, 2];\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['b', 'row', 'col'];\n    return `\n        ${getPackedSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        vec4 ${funcName}(int b, int row, int col) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${\n        texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n  return `\n    vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler3D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride0 = shape[1] * shape[2];\n  const stride1 = shape[2];\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col', 'depth'];\n    return `\n        ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        float ${funcName}(int row, int col, int depth) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${stride0}, ${stride1}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        int stride1 = ${texName}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n        float ${funcName}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${texNumC}.0, ${texNumR}.0);\n          return sampleTexture(${texName}, uv);\n        }\n      `;\n  }\n\n  if (texNumC === stride1 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${texName}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${texName}Shape[1] * ${texName}Shape[2];\n      int stride1 = ${texName}Shape[2];\n      int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index);\n      return sampleTexture(${texName}, uv);\n    }\n    `;\n  }\n  return `\n      float ${funcName}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n        return sampleTexture(${texName}, uv);\n      }\n  `;\n}\n\nfunction getPackedSamplerND(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return `\n    vec4 ${funcName}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${texName}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${\n        texName}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${texName}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${\n        glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const rank = shape.length;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n  let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n  let params = `int b, int row, int col`;\n  let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n  for (let b = 2; b < rank - 1; b++) {\n    params = `int b${b}, ` + params;\n    texelsInBatch *= shape[rank - b - 1];\n    index = `b${b} * ${texelsInBatch} + ` + index;\n  }\n  return `\n    vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler4D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride2 = shape[3];\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  const stride2Str = `int stride2 = ${texName}Shape[3];`;\n  const stride1Str = `int stride1 = ${texName}Shape[2] * stride2;`;\n  const stride0Str = `int stride0 = ${texName}Shape[1] * stride1;`;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        ${stride2Str}\n        ${stride1Str}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${stride1}, ${stride2}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride2 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${texName}Shape[1] * ${texName}Shape[2], ${\n          texName}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${stride2Str}\n      ${stride1Str}\n      ${stride0Str}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} +\n          depth * ${stride2} + depth2;\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler5D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride3 = shape[4];\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          depth3;\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${stride1}, ${stride2}, ${stride3}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (texNumC === stride3 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3]},\n               ${shape[2] * shape[3]}, ${shape[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler6D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  const stride4 = shape[5];\n  const stride3 = shape[4] * stride4;\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${stride4}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride4 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},\n               ${shape[2] * shape[3] * shape[4]},\n               ${shape[3] * shape[4]},\n               ${shape[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getUniformSampler(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n\n  if (inSize < 2) {\n    return `return ${texName};`;\n  }\n\n  return `\n    for (int i = 0; i < ${inSize}; i++) {\n      if (i == index) {\n        return ${texName}[i];\n      }\n    }\n  `;\n}\n\nfunction getPackedSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n\n  const type = getCoordsDataType(outRank);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  let output = `return outputValue;`;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  const isInputScalar = inSize === 1;\n  const outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n  const isOutputScalar = outSize === 1;\n\n  if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n    output = `\n      return vec4(outputValue.xy, outputValue.xy);\n    `;\n  } else if (isInputScalar && !isOutputScalar) {\n    if (outRank === 1) {\n      output = `\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      `;\n    } else {\n      output = `\n        return vec4(outputValue.x);\n      `;\n    }\n  } else if (broadcastDims.length) {\n    const rows = inRank - 2;\n    const cols = inRank - 1;\n\n    if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.x);`;\n    } else if (broadcastDims.indexOf(rows) > -1) {\n      output = `return vec4(outputValue.x, outputValue.y, ` +\n          `outputValue.x, outputValue.y);`;\n    } else if (broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.xx, outputValue.zz);`;\n    }\n  }\n\n  return `\n    vec4 ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});\n      ${output}\n    }\n  `;\n}\n\nfunction getSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const outTexShape = outShapeInfo.texShape;\n  const inTexShape = inputInfo.shapeInfo.texShape;\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  if (!inputInfo.shapeInfo.isUniform && inRank === outRank &&\n      inputInfo.shapeInfo.flatOffset == null &&\n      util.arraysEqual(inTexShape, outTexShape)) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, resultUV);\n      }\n    `;\n  }\n\n  const type = getCoordsDataType(outRank);\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  return `\n    float ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      return get${texFuncSnippet}(${unpackedCoordsSnippet});\n    }\n  `;\n}\n\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getUniformInfoFromShape(\n    isPacked: boolean, shape: number[], texShape: number[]) {\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const rank = shape.length;\n  const useSqueezePackedShape = isPacked && rank === 3 && shape[0] === 1;\n  const squeezeShape = useSqueezePackedShape ? shape.slice(1) : newShape;\n  const useSqueezeShape =\n      (!isPacked && rank > 1 && !util.arraysEqual(shape, texShape) &&\n       newShape.length < rank) ||\n      useSqueezePackedShape;\n  const uniformShape = useSqueezeShape ? squeezeShape : shape;\n  return {useSqueezeShape, uniformShape, keptDims};\n}\n\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\nexport function squeezeInputInfo(\n    inInfo: InputInfo, squeezedShape: number[]): InputInfo {\n  // Deep copy.\n  const newInputInfo: InputInfo = JSON.parse(JSON.stringify(inInfo));\n  newInputInfo.shapeInfo.logicalShape = squeezedShape;\n  return newInputInfo;\n}\n\nfunction getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, Tensor, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUContext} from './gpgpu_context';\nimport * as shader_compiler from './shader_compiler';\nimport {InputInfo, ShapeInfo, UniformType} from './shader_compiler';\nimport {PackingScheme, TextureData, TextureUsage} from './tex_util';\nimport {createFragmentShader} from './webgl_util';\n\nexport interface GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms?: boolean;\n  /** If true, this program expects packed input textures. Defaults to false. */\n  packedInputs?: boolean;\n  /** If true, this program produces a packed texture. Defaults to false. */\n  packedOutput?: boolean;\n  /**\n   * Affects what type of texture we allocate for the output. Defaults to\n   * `TextureUsage.RENDER`.\n   */\n  outTexUsage?: TextureUsage;\n  /**\n   * The type of scheme to use when packing texels for the output values.\n   * See `PackingScheme` for details. Defaults to `PackingScheme.SHARED_BATCH`.\n   */\n  outPackingScheme?: PackingScheme;\n  customUniforms?:\n      Array<{name: string; arrayIndex?: number; type: UniformType;}>;\n}\n\nexport interface GPGPUBinary {\n  webGLProgram: WebGLProgram;\n  program: GPGPUProgram;\n  uniformLocations: {[name: string]: WebGLUniformLocation};\n  customUniformLocations?: WebGLUniformLocation[];\n  source: string;\n  fragmentShader: WebGLShader;\n  inShapeInfos: ShapeInfo[];\n  outShapeInfo: ShapeInfo;\n  infLoc: WebGLUniformLocation;\n  nanLoc: WebGLUniformLocation;\n  inShapesLocations?: {[name: string]: WebGLUniformLocation};\n  inTexShapesLocations?: {[name: string]: WebGLUniformLocation};\n  outShapeLocation?: WebGLUniformLocation;\n  outShapeStridesLocation?: WebGLUniformLocation;\n  outTexShapeLocation?: WebGLUniformLocation;\n}\n\nexport interface GPGPUBinaryLocations {\n  uniformLocations: {[name: string]: WebGLUniformLocation};\n  customUniformLocations?: WebGLUniformLocation[];\n  infLoc: WebGLUniformLocation;\n  nanLoc: WebGLUniformLocation;\n  inShapesLocations?: {[name: string]: WebGLUniformLocation};\n  inTexShapesLocations?: {[name: string]: WebGLUniformLocation};\n  outShapeLocation?: WebGLUniformLocation;\n  outShapeStridesLocation?: WebGLUniformLocation;\n  outTexShapeLocation?: WebGLUniformLocation;\n}\n\nexport interface TensorData {\n  shape: number[];\n  texData: TextureData;\n  isUniform: boolean;\n  // Available when we decide to upload as uniform instead of texture.\n  uniformValues?: TypedArray;\n}\n\nexport function compileProgram<T extends Tensor, K extends Tensor>(\n    gpgpu: GPGPUContext, program: GPGPUProgram, inputs: TensorData[],\n    output: TensorData): GPGPUBinary {\n  const inputInfos: InputInfo[] = inputs.map((input, i) => {\n    const shapeInfo: ShapeInfo = {\n      logicalShape: input.shape,\n      texShape: input.isUniform ? null : input.texData.texShape,\n      isUniform: input.isUniform,\n      isPacked: input.isUniform ? false : input.texData.isPacked,\n      flatOffset: null\n    };\n    if (input.texData != null && input.texData.slice != null &&\n        input.texData.slice.flatOffset > 0) {\n      shapeInfo.flatOffset = input.texData.slice.flatOffset;\n    }\n    return {name: program.variableNames[i], shapeInfo};\n  });\n  const inShapeInfos = inputInfos.map(x => x.shapeInfo);\n  const outShapeInfo: ShapeInfo = {\n    logicalShape: output.shape,\n    texShape: output.texData.texShape,\n    isUniform: false,\n    isPacked: output.texData.isPacked,\n    flatOffset: null\n  };\n  const source = shader_compiler.makeShader(inputInfos, outShapeInfo, program);\n  const fragmentShader = createFragmentShader(gpgpu.gl, source);\n  const webGLProgram = gpgpu.createProgram(fragmentShader);\n\n  if (!env().get('ENGINE_COMPILE_ONLY')) {\n    return {\n      program,\n      fragmentShader,\n      source,\n      webGLProgram,\n      inShapeInfos,\n      outShapeInfo,\n      ...getUniformLocations(gpgpu, program, webGLProgram)\n    };\n  } else {\n    return {\n      program,\n      fragmentShader,\n      source,\n      webGLProgram,\n      inShapeInfos,\n      outShapeInfo,\n      uniformLocations: null,\n      customUniformLocations: null,\n      infLoc: null,\n      nanLoc: null,\n      inShapesLocations: null,\n      inTexShapesLocations: null,\n      outShapeLocation: null,\n      outShapeStridesLocation: null,\n      outTexShapeLocation: null\n    };\n  }\n}\n\nexport function getUniformLocations(\n    gpgpu: GPGPUContext, program: GPGPUProgram,\n    webGLProgram: WebGLProgram): GPGPUBinaryLocations {\n  const uniformLocations: {[name: string]: WebGLUniformLocation} = {};\n  const inShapesLocations: {[name: string]: WebGLUniformLocation} = {};\n  const inTexShapesLocations: {[name: string]: WebGLUniformLocation} = {};\n  const customUniformLocations: WebGLUniformLocation[] = [];\n  let outShapeLocation: WebGLUniformLocation;\n  let outTexShapeLocation: WebGLUniformLocation;\n  let outShapeStridesLocation: WebGLUniformLocation;\n  let infLoc: WebGLUniformLocation = null;\n  let nanLoc: WebGLUniformLocation = null;\n\n  // Add special uniforms (NAN, INFINITY)\n  nanLoc = gpgpu.getUniformLocation(webGLProgram, 'NAN', false);\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    infLoc = gpgpu.getUniformLocation(webGLProgram, 'INFINITY', false);\n  }\n\n  // Add user-defined uniforms\n  const shouldThrow = false;\n  for (let i = 0; i < program.variableNames.length; i++) {\n    const varName = program.variableNames[i];\n    uniformLocations[varName] =\n        gpgpu.getUniformLocation(webGLProgram, varName, shouldThrow);\n    uniformLocations[`offset${varName}`] =\n        gpgpu.getUniformLocation(webGLProgram, `offset${varName}`, shouldThrow);\n    if (program.enableShapeUniforms) {\n      inShapesLocations[`${varName}Shape`] = gpgpu.getUniformLocation(\n          webGLProgram, `${varName}Shape`, shouldThrow);\n      inTexShapesLocations[`${varName}TexShape`] = gpgpu.getUniformLocation(\n          webGLProgram, `${varName}TexShape`, shouldThrow);\n    }\n  }\n\n  if (program.enableShapeUniforms) {\n    outShapeLocation =\n        gpgpu.getUniformLocation(webGLProgram, 'outShape', shouldThrow);\n    outShapeStridesLocation =\n        gpgpu.getUniformLocation(webGLProgram, 'outShapeStrides', shouldThrow);\n    outTexShapeLocation =\n        gpgpu.getUniformLocation(webGLProgram, 'outTexShape', shouldThrow);\n  }\n\n  if (program.customUniforms) {\n    program.customUniforms.forEach((d, i) => {\n      customUniformLocations[i] =\n          gpgpu.getUniformLocation(webGLProgram, d.name, shouldThrow);\n    });\n  }\n\n  return {\n    uniformLocations,\n    customUniformLocations,\n    infLoc,\n    nanLoc,\n    inShapesLocations,\n    inTexShapesLocations,\n    outShapeLocation,\n    outShapeStridesLocation,\n    outTexShapeLocation\n  };\n}\n\nfunction validateBinaryAndProgram(\n    shapeInfos: ShapeInfo[], inputs: TensorData[]) {\n  if (shapeInfos.length !== inputs.length) {\n    throw Error(\n        `Binary was compiled with ${shapeInfos.length} inputs, but ` +\n        `was executed with ${inputs.length} inputs`);\n  }\n\n  shapeInfos.forEach((s, i) => {\n    const shapeA = s.logicalShape;\n    const input = inputs[i];\n    const shapeB = input.shape;\n\n    if (!util.arraysEqual(shapeA, shapeB)) {\n      throw Error(\n          `Binary was compiled with different shapes than ` +\n          `the current args. Shapes ${shapeA} and ${shapeB} must match`);\n    }\n    // The input is uploaded as uniform.\n    if (s.isUniform && input.isUniform) {\n      return;\n    }\n\n    const texShapeA = s.texShape;\n    const texShapeB = input.isUniform ? null : input.texData.texShape;\n    if (!util.arraysEqual(texShapeA, texShapeB)) {\n      throw Error(\n          `Binary was compiled with different texture shapes than the` +\n          ` current args. Shape ${texShapeA} and ${texShapeB} must match`);\n    }\n  });\n}\n\nexport function runProgram<T extends Tensor, K extends Tensor>(\n    gpgpu: GPGPUContext, binary: GPGPUBinary, inputs: TensorData[],\n    output: TensorData, customUniformValues?: number[][]): void {\n  if (!binary.program.enableShapeUniforms) {\n    validateBinaryAndProgram(binary.inShapeInfos, inputs);\n    validateBinaryAndProgram([binary.outShapeInfo], [output]);\n  }\n\n  const outTex = output.texData.texture;\n  const outTexShape = output.texData.texShape;\n  if (output.texData.isPacked) {\n    gpgpu.setOutputPackedMatrixTexture(\n        outTex.texture, outTexShape[0], outTexShape[1]);\n  } else {\n    gpgpu.setOutputMatrixTexture(\n        outTex.texture, outTexShape[0], outTexShape[1]);\n  }\n  gpgpu.setProgram(binary.webGLProgram);\n\n  // Set special uniforms (NAN, INFINITY)\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    if (binary.infLoc !== null) {\n      gpgpu.gl.uniform1f(binary.infLoc, Infinity);\n    }\n  }\n  if (binary.nanLoc !== null) {\n    gpgpu.gl.uniform1f(binary.nanLoc, NaN);\n  }\n\n  // Set user-defined inputs\n  inputs.forEach((input, i) => {\n    const varName = binary.program.variableNames[i];\n    const varLoc = binary.uniformLocations[varName];\n    const varOffsetLoc = binary.uniformLocations[`offset${varName}`];\n    const varShapeLoc = binary.inShapesLocations[`${varName}Shape`];\n    const varTexShapeLoc = binary.inTexShapesLocations[`${varName}TexShape`];\n\n    if (varShapeLoc) {\n      const {uniformShape} = shader_compiler.getUniformInfoFromShape(\n          binary.program.packedInputs, input.shape, input.texData.texShape);\n      switch (uniformShape.length) {\n        case 1:\n          gpgpu.gl.uniform1iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 2:\n          gpgpu.gl.uniform2iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 3:\n          gpgpu.gl.uniform3iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 4:\n          gpgpu.gl.uniform4iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        default:\n          break;\n      }\n    }\n    if (varTexShapeLoc) {\n      gpgpu.gl.uniform2i(\n          varTexShapeLoc, input.texData.texShape[0], input.texData.texShape[1]);\n    }\n\n    if (varLoc == null) {\n      // The compiler inferred that this variable is not used in this shader.\n      return;\n    }\n\n    if (input.isUniform) {\n      // Upload the values of the tensor as uniform.\n      if (util.sizeFromShape(input.shape) < 2) {\n        gpgpu.gl.uniform1f(varLoc, input.uniformValues[0]);\n      } else {\n        let vals = input.uniformValues;\n        if (!(vals instanceof Float32Array)) {\n          vals = new Float32Array(vals);\n        }\n        gpgpu.gl.uniform1fv(varLoc, vals);\n      }\n      return;\n    }\n\n    // If the input was sliced, upload the flat offset index.\n    if (input.texData.slice != null && varOffsetLoc != null) {\n      gpgpu.gl.uniform1i(varOffsetLoc, input.texData.slice.flatOffset);\n    }\n\n    gpgpu.setInputMatrixTexture(input.texData.texture.texture, varLoc, i);\n  });\n\n  const outShapeLoc = binary.outShapeLocation;\n  if (outShapeLoc) {\n    switch (output.shape.length) {\n      case 1:\n        gpgpu.gl.uniform1iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 2:\n        gpgpu.gl.uniform2iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 3:\n        gpgpu.gl.uniform3iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 4:\n        gpgpu.gl.uniform4iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      default:\n        break;\n    }\n  }\n  if (binary.outShapeStridesLocation) {\n    const strides = util.computeStrides(output.shape);\n    switch (output.shape.length) {\n      case 2:\n        gpgpu.gl.uniform1iv(\n            binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      case 3:\n        gpgpu.gl.uniform2iv(\n            binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      case 4:\n        gpgpu.gl.uniform3iv(\n            binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      default:\n        break;\n    }\n  }\n  if (binary.outTexShapeLocation) {\n    gpgpu.gl.uniform2i(\n        binary.outTexShapeLocation, output.texData.texShape[0],\n        output.texData.texShape[1]);\n  }\n\n  if (binary.program.customUniforms && customUniformValues) {\n    binary.program.customUniforms.forEach((d, i) => {\n      const customLoc = binary.customUniformLocations[i];\n      const customValue = customUniformValues[i];\n      if (d.type === 'float') {\n        gpgpu.gl.uniform1fv(customLoc, customValue);\n      } else if (d.type === 'vec2') {\n        gpgpu.gl.uniform2fv(customLoc, customValue);\n      } else if (d.type === 'vec3') {\n        gpgpu.gl.uniform3fv(customLoc, customValue);\n      } else if (d.type === 'vec4') {\n        gpgpu.gl.uniform4fv(customLoc, customValue);\n      } else if (d.type === 'int') {\n        gpgpu.gl.uniform1iv(customLoc, customValue);\n      } else if (d.type === 'ivec2') {\n        gpgpu.gl.uniform2iv(customLoc, customValue);\n      } else if (d.type === 'ivec3') {\n        gpgpu.gl.uniform3iv(customLoc, customValue);\n      } else if (d.type === 'ivec4') {\n        gpgpu.gl.uniform4iv(customLoc, customValue);\n      } else {\n        throw Error(`uniform type ${d.type} is not supported yet.`);\n      }\n    });\n  }\n  gpgpu.executeProgram();\n}\n\nexport function makeShaderKey(\n    program: GPGPUProgram, inputs: TensorData[], output: TensorData): string {\n  let keyInputs = '';\n  inputs.concat(output).forEach(x => {\n    const hasOffset = x.texData != null && x.texData.slice != null &&\n        x.texData.slice.flatOffset > 0;\n    // TODO: Remove the condition of !x.isUniform.\n    if (program.enableShapeUniforms && !x.isUniform) {\n      const xTexShape = x.texData.texShape;\n      const {useSqueezeShape, uniformShape, keptDims} =\n          shader_compiler.getUniformInfoFromShape(\n              program.packedInputs, x.shape, xTexShape);\n      let rank1 = '', rank2 = '', rank34 = '';\n      if (uniformShape.length === 1 && program.packedInputs) {\n        const packedTexShape =\n            [Math.ceil(xTexShape[0] / 2), Math.ceil(xTexShape[1] / 2)];\n        rank1 = `${packedTexShape[0] > 1}_${packedTexShape[1] > 1}`;\n      } else if (uniformShape.length === 2 && !program.packedInputs) {\n        rank2 = `${uniformShape[0] > 1}_${uniformShape[1] > 1}`;\n      } else if (uniformShape.length > 2 && !program.packedInputs) {\n        const strides = util.computeStrides(uniformShape);\n        rank34 = `${strides[0] === xTexShape[1]}_${\n            strides[strides.length - 1] === xTexShape[1]}`;\n      }\n      const xRank = x.shape.length;\n      const isLogicalShapTexShapeEqual =\n          uniformShape.length === 2 && util.arraysEqual(x.shape, xTexShape);\n      const isScalar = util.sizeFromShape(x.shape) === 1;\n      const broadcastDims =\n          backend_util.getBroadcastDims(x.shape, output.shape);\n      const isInOutTexShapeEqual = !program.packedInputs &&\n          xRank === output.shape.length &&\n          util.arraysEqual(xTexShape, output.texData.texShape);\n      const isTexShapeGreaterThanOne =\n          program.packedInputs || uniformShape.length > 2 ?\n          '' :\n          `${xTexShape[0] > 1}_${xTexShape[1] > 1}`;\n      // These key components are needed due to shader_compiler is embedding\n      // them in the shader.\n      // |xRank| is used to determine the coords length. See\n      // get[Packed]SamplerAtOutputCoords.\n      // |isInOutTexShapeEqual| is used to determine whether going to an\n      // optimization path in getSamplerAtOutputCoords.\n      // |useSqueezeShape| is extracted from squeezeInputInfo of\n      // getSampler[2|3|4]D/getPackedSampler3D.\n      // |isScalar| is extracted from isInputScalar/isOutputScalar in\n      // getPackedSamplerAtOutputCoords.\n      // |broadcastDims| is extracted from get[Packed]SamplerAtOutputCoords.\n      // |isLogicalShapTexShapeEqual| is used in\n      // getOutput[Packed]2DCoords/get[Packed]Sampler2D.\n      // |rank1| is used in getOutputPacked1DCoords.\n      // |rank2| is used in getOutput2DCoords.\n      // |rank34| is used in getSampler3D/getSampler4D.\n      // |isTexShapeGreaterThanOne| are used in\n      // getSampler[Scalar|1D|2D]/getOutput1DCoords.\n      keyInputs += `${xRank}_${isInOutTexShapeEqual}_${\n          useSqueezeShape ? keptDims : ''}_${uniformShape.length}_${isScalar}_${\n          broadcastDims}_${isLogicalShapTexShapeEqual}_${rank1}_${rank2}_${\n          rank34}_${isTexShapeGreaterThanOne}_${hasOffset}`;\n    } else {\n      const texShape = x.isUniform ? 'uniform' : x.texData.texShape;\n      keyInputs += `${x.shape}_${texShape}_${hasOffset}`;\n    }\n  });\n  const keyUserCode = program.userCode;\n  let key = program.constructor.name;\n  // Fast string concat. See https://jsperf.com/string-concatenation/14.\n  key += '_' + keyInputs + '_' + keyUserCode +\n      `${env().getNumber('WEBGL_VERSION')}`;\n  return key;\n}\n\nexport function useShapeUniforms(rank: number) {\n  // TODO: Remove the limitaion of rank <= 4.\n  return env().getBool('WEBGL_USE_SHAPES_UNIFORMS') && rank <= 4;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nimport {PackingScheme} from './tex_util';\n\nexport class DecodeMatrixProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: [number, number, number];\n  packedInputs = false;\n  packedOutput = true;\n  outPackingScheme = PackingScheme.DENSE;\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'texShape', type: 'ivec2' as const }];\n\n  constructor(outputShape: [number, number, number]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${\n        this.enableShapeUniforms ?\n            shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n                ['r', 'c', 'd'], outputShape) :\n            shader_util.getLogicalCoordinatesFromFlatIndex(\n                ['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nimport {PackingScheme} from './tex_util';\n\nexport class DecodeMatrixPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: [number, number, number];\n  outPackingScheme = PackingScheme.DENSE;\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'texShape', type: 'ivec2' as const }];\n\n  constructor(outputShape: [number, number, number]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${\n        this.enableShapeUniforms ?\n            shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n                ['r', 'c', 'd'], outputShape) :\n            shader_util.getLogicalCoordinatesFromFlatIndex(\n                ['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {ENCODE_FLOAT_SNIPPET} from './shader_compiler_util';\nimport {TextureUsage} from './tex_util';\n\nexport class EncodeFloatProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  outTexUsage = TextureUsage.DOWNLOAD;\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {ENCODE_FLOAT_SNIPPET} from './shader_compiler_util';\nimport {TextureUsage} from './tex_util';\n\nexport class EncodeFloatPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = true;\n  packedOutput = false;\n  outTexUsage = TextureUsage.DOWNLOAD;\n\n  constructor(outputShape: [number, number, number]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\nexport class EncodeMatrixProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'texShape', type: 'ivec2' as const }];\n\n  constructor(\n      outputShape: [number, number, number], inputIsUnsignedByte = false) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    let output = `result`;\n    if (inputIsUnsignedByte) {\n      output = `floor(result * 255. + 0.5)`;\n    }\n\n    this.userCode = `\n      ${\n        this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() :\n                                   shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / texShape[1];\n        int c = imod(flatIndex, texShape[1]);\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n        vec4 values = ${glsl.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${glsl.output} = vec4(${output}, 0., 0., 0.);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\n/*\nThis is how the shader encodes a tensor with shape = [2, 3, 5]\n(indices are [batch, row, col]).\n\n000|001   002|003   004|xxx   020|021   022|023   024|xxx\n-------   -------   -------   -------   -------   -------\n010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\n100|101   102|103   104|xxx   120|121   122|123   124|xxx\n-------   -------   -------   -------   -------   -------\n110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\nSingle texels contain only values from the same batch, and from adjacent rows\nand columns.\n */\n\nexport class EncodeMatrixPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = false;\n  packedOutput = true;\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'texShape', type: 'ivec2' as const }];\n\n  constructor(\n      outputShape: [number, number, number], inputIsUnsignedByte = false) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    let mainLoop = '';\n    let output = 'result';\n    if (inputIsUnsignedByte) {\n      output = 'floor(result * 255. + 0.5)';\n    }\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        const channel = row * 2 + col;\n\n        mainLoop += `\n          localCoords = coords;\n          if(localCoords[2] + ${col} < ${\n            this.enableShapeUniforms ? 'outShape[2]' : `${outputShape[2]}`}) {\n          localCoords[2] += ${col};\n          if (localCoords[1] + ${row} < ${\n            this.enableShapeUniforms ? 'outShape[1]' : `${outputShape[1]}`}) {\n            localCoords[1] += ${row};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${glsl.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${channel}] = values[0];\n            } else if (offset == 1) {\n              result[${channel}] = values[1];\n            } else if (offset == 2) {\n              result[${channel}] = values[2];\n            } else {\n              result[${channel}] = values[3];\n            }\n          }\n        }\n        `;\n      }\n    }\n\n    this.userCode = `\n        ${\n        this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() :\n                                   shader_util.getFlatIndexFrom3D(outputShape)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${mainLoop}\n\n          ${glsl.output} = ${output};\n        }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, PixelData, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {getGlslDifferences} from './glsl_version';\nimport * as tex_util from './tex_util';\nimport {Texture, TextureConfig} from './tex_util';\nimport * as webgl_util from './webgl_util';\n\nexport function createVertexShader(gl: WebGLRenderingContext): WebGLShader {\n  const glsl = getGlslDifferences();\n  const vertexShaderSource = `${glsl.version}\n    precision highp float;\n    ${glsl.attribute} vec3 clipSpacePos;\n    ${glsl.attribute} vec2 uv;\n    ${glsl.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`;\n  return webgl_util.createVertexShader(gl, vertexShaderSource);\n}\n\nexport function createVertexBuffer(gl: WebGLRenderingContext): WebGLBuffer {\n  // [x y z u v] * [upper-left, lower-left, upper-right, lower-right]\n  const vertexArray = new Float32Array(\n      [-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);\n  return webgl_util.createStaticVertexBuffer(gl, vertexArray);\n}\n\nexport function createIndexBuffer(gl: WebGLRenderingContext): WebGLBuffer {\n  // OpenGL (and WebGL) have \"CCW == front\" winding\n  const triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);\n  return webgl_util.createStaticIndexBuffer(gl, triangleVertexIndices);\n}\n\nfunction createAndConfigureTexture(\n    gl: WebGLRenderingContext, width: number, height: number,\n    internalFormat: number, textureFormat: number,\n    textureType: number): Texture {\n  webgl_util.validateTextureSize(width, height);\n  const texture = webgl_util.createTexture(gl);\n\n  const tex2d = gl.TEXTURE_2D;\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(tex2d, texture));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST));\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    webgl_util.callAndCheck(\n        gl,\n        () => gl.texImage2D(\n            tex2d, 0, internalFormat, width, height, 0, textureFormat,\n            textureType, null));\n  } else {\n    webgl_util.callAndCheck(\n        gl,\n        () => (gl as WebGL2RenderingContext)\n                  .texStorage2D(tex2d, 1, internalFormat, width, height));\n  }\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n\n  return {texture, texShape: [height, width]};\n}\n\nexport function getInternalFormatForFloat32MatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatFloat;\n}\n\nexport function createFloat32MatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat32MatrixTexture(textureConfig),\n      textureConfig.textureFormatFloat, gl.FLOAT);\n}\n\nexport function getInternalFormatForFloat16MatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatHalfFloat;\n}\n\nexport function createFloat16MatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat16MatrixTexture(textureConfig),\n      textureConfig.textureFormatFloat, textureConfig.textureTypeHalfFloat);\n}\n\nexport function getInternalFormatForUnsignedBytesMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.downloadTextureFormat;\n}\n\nexport function createUnsignedBytesMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForUnsignedBytesMatrixTexture(textureConfig), gl.RGBA,\n      gl.UNSIGNED_BYTE);\n}\n\nexport function getInternalFormatForPackedMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatPackedFloat;\n}\n\nexport function createPackedMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height, getInternalFormatForPackedMatrixTexture(textureConfig),\n      gl.RGBA, gl.FLOAT);\n}\n\nexport function getInternalFormatForFloat16PackedMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatPackedHalfFloat;\n}\n\nexport function createFloat16PackedMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat16PackedMatrixTexture(textureConfig), gl.RGBA,\n      textureConfig.textureTypeHalfFloat);\n}\n\nexport function bindVertexProgramAttributeStreams(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    vertexBuffer: WebGLBuffer): boolean {\n  const posOffset = 0;               // x is the first buffer element\n  const uvOffset = 3 * 4;            // uv comes after [x y z]\n  const stride = (3 * 4) + (2 * 4);  // xyz + uv, each entry is 4-byte float.\n  webgl_util.callAndCheck(\n      gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer));\n  const success = webgl_util.bindVertexBufferToProgramAttribute(\n      gl, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);\n  return success &&\n      webgl_util.bindVertexBufferToProgramAttribute(\n          gl, program, 'uv', vertexBuffer, 2, stride, uvOffset);\n}\n\nexport function uploadDenseMatrixToTexture(\n    gl: WebGLRenderingContext, texture: WebGLTexture, width: number,\n    height: number, data: TypedArray, textureConfig: TextureConfig) {\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n\n  let dataForUpload: TypedArray, texelDataType: number, internalFormat: number;\n  if (data instanceof Uint8Array) {\n    dataForUpload = new Uint8Array(width * height * 4);\n    texelDataType = gl.UNSIGNED_BYTE;\n    internalFormat = gl.RGBA;\n  } else {\n    dataForUpload = new Float32Array(width * height * 4);\n    texelDataType = gl.FLOAT;\n    internalFormat = textureConfig.internalFormatPackedFloat;\n  }\n\n  dataForUpload.set(data);\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    webgl_util.callAndCheck(\n        gl,\n        () => gl.texSubImage2D(\n            gl.TEXTURE_2D, 0, 0, 0, width, height, gl.RGBA, texelDataType,\n            dataForUpload));\n  } else {\n    webgl_util.callAndCheck(\n        gl,\n        () => gl.texImage2D(\n            gl.TEXTURE_2D, 0, internalFormat, width, height, 0, gl.RGBA,\n            texelDataType, dataForUpload));\n  }\n\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function uploadPixelDataToTexture(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n    HTMLVideoElement|ImageBitmap) {\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n  if ((pixels as PixelData).data instanceof Uint8Array) {\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n      webgl_util.callAndCheck(\n          gl,\n          () => gl.texSubImage2D(\n              gl.TEXTURE_2D, 0, 0, 0, pixels.width, pixels.height, gl.RGBA,\n              gl.UNSIGNED_BYTE, (pixels as PixelData).data));\n    } else {\n      webgl_util.callAndCheck(\n          gl,\n          () => gl.texImage2D(\n              gl.TEXTURE_2D, 0, gl.RGBA, pixels.width, pixels.height, 0,\n              gl.RGBA, gl.UNSIGNED_BYTE, (pixels as PixelData).data));\n    }\n  } else {\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n      webgl_util.callAndCheck(\n          gl,\n          () => gl.texSubImage2D(\n              gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE,\n              (pixels as ImageData | HTMLImageElement | HTMLCanvasElement |\n               HTMLVideoElement | ImageBitmap)));\n    } else {\n      webgl_util.callAndCheck(\n          gl,\n          () => gl.texImage2D(\n              gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE,\n              pixels as ImageData | HTMLImageElement | HTMLCanvasElement |\n                  HTMLVideoElement | ImageBitmap));\n    }\n  }\n\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function createBufferFromOutputTexture(\n    gl2: WebGL2RenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLBuffer {\n  // Create and bind the buffer.\n  const buffer = gl2.createBuffer();\n  webgl_util.callAndCheck(\n      gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer));\n\n  // Initialize the buffer to the size of the texture in bytes.\n  const bytesPerFloat = 4;\n  const valuesPerTexel = 4;\n  const bufferSizeBytes = bytesPerFloat * valuesPerTexel * rows * columns;\n\n  webgl_util.callAndCheck(\n      gl2,\n      () => gl2.bufferData(\n          gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl2.STREAM_READ));\n\n  // Enqueue a command on the GPU command queue to copy of texture into the\n  // buffer.\n  webgl_util.callAndCheck(\n      gl2, () => gl2.readPixels(0, 0, columns, rows, gl2.RGBA, gl2.FLOAT, 0));\n\n  webgl_util.callAndCheck(\n      gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null));\n\n  return buffer;\n}\n\nexport function downloadFloat32MatrixFromBuffer(\n    gl: WebGLRenderingContext, buffer: WebGLBuffer,\n    size: number): Float32Array {\n  const gl2 = gl as WebGL2RenderingContext;\n\n  const downloadTarget = new Float32Array(size);\n\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n\n  return downloadTarget;\n}\n\nexport function downloadByteEncodedFloatMatrixFromOutputTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig) {\n  const [w, h] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n\n  const numChannels = 4;\n  const downloadTarget = new Uint8Array(\n      tex_util.getUnpackedArraySizeFromMatrixSize(rows * columns, numChannels));\n\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.readPixels(\n          0, 0, w, h, textureConfig.downloadTextureFormat, gl.UNSIGNED_BYTE,\n          downloadTarget));\n\n  // By wrapping the buffer in a Float32Array, we use native browser IEEE 754\n  // decoding of the 4 bytes that back each 32 bit float.\n  return new Float32Array(downloadTarget.buffer);\n}\n\nexport function downloadPackedMatrixFromBuffer(\n    gl: WebGLRenderingContext, buffer: WebGLBuffer, batch: number, rows: number,\n    cols: number, physicalRows: number, physicalCols: number,\n    textureConfig: TextureConfig): Float32Array {\n  const gl2 = gl as WebGL2RenderingContext;\n\n  const downloadTarget =\n      new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(\n          physicalRows, physicalCols));\n\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n\n  return downloadTarget;\n}\n\nexport function downloadMatrixFromPackedOutputTexture(\n    gl: WebGLRenderingContext, physicalRows: number,\n    physicalCols: number): Float32Array {\n  const packedRGBA = new Float32Array(physicalRows * physicalCols * 4);\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.readPixels(\n          0, 0, physicalCols, physicalRows, gl.RGBA, gl.FLOAT, packedRGBA));\n\n  return packedRGBA;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, PixelData, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {getWebGLContext, setWebGLContext} from './canvas_util';\nimport * as gpgpu_util from './gpgpu_util';\nimport * as tex_util from './tex_util';\nimport {Texture, TextureConfig} from './tex_util';\nimport {WebGL1DisjointQueryTimerExtension, WebGL2DisjointQueryTimerExtension, WebGLParallelCompilationExtension} from './webgl_types';\nimport * as webgl_util from './webgl_util';\n\nexport interface FenceContext {\n  query: WebGLQuery|WebGLSync;\n  isFencePassed(): boolean;\n}\n\nexport class GPGPUContext {\n  gl: WebGLRenderingContext;\n  textureFloatExtension: {};\n  textureHalfFloatExtension: {};\n  colorBufferFloatExtension: {};\n  colorBufferHalfFloatExtension: {};\n  disjointQueryTimerExtension: WebGL2DisjointQueryTimerExtension|\n      WebGL1DisjointQueryTimerExtension;\n  parallelCompilationExtension: WebGLParallelCompilationExtension;\n  vertexBuffer: WebGLBuffer;\n  indexBuffer: WebGLBuffer;\n  framebuffer: WebGLFramebuffer;\n  outputTexture: WebGLTexture|null = null;\n  program: WebGLProgram|null = null;\n  private disposed = false;\n  private disjoint: boolean;\n  private vertexShader: WebGLShader;\n  textureConfig: TextureConfig;\n\n  constructor(gl?: WebGLRenderingContext) {\n    const glVersion = env().getNumber('WEBGL_VERSION');\n    if (gl != null) {\n      this.gl = gl;\n      setWebGLContext(glVersion, gl);\n    } else {\n      this.gl = getWebGLContext(glVersion);\n    }\n    // WebGL 2.0 enables texture floats without an extension.\n    let COLOR_BUFFER_FLOAT = 'WEBGL_color_buffer_float';\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    this.parallelCompilationExtension =\n        this.gl.getExtension('KHR_parallel_shader_compile');\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n      const TEXTURE_FLOAT = 'OES_texture_float';\n      const TEXTURE_HALF_FLOAT = 'OES_texture_half_float';\n\n      this.textureFloatExtension =\n          webgl_util.getExtensionOrThrow(this.gl, TEXTURE_FLOAT);\n      if (webgl_util.hasExtension(this.gl, TEXTURE_HALF_FLOAT)) {\n        this.textureHalfFloatExtension =\n            webgl_util.getExtensionOrThrow(this.gl, TEXTURE_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error(\n            'GL context does not support half float textures, yet the ' +\n            'environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n\n      this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension =\n            webgl_util.getExtensionOrThrow(this.gl, COLOR_BUFFER_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error(\n            'GL context does not support color renderable half floats, yet ' +\n            'the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n    } else {\n      COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {\n        this.colorBufferFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      } else if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      } else {\n        throw new Error('GL context does not support color renderable floats');\n      }\n    }\n\n    this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl);\n    this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl);\n    this.framebuffer = webgl_util.createFramebuffer(this.gl);\n\n    this.textureConfig =\n        tex_util.getTextureConfig(this.gl, this.textureHalfFloatExtension);\n  }\n\n  private get debug(): boolean {\n    return env().getBool('DEBUG');\n  }\n\n  public dispose() {\n    if (this.disposed) {\n      return;\n    }\n    if (this.program != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound WebGLProgram.' +\n          ' This is probably a resource leak, delete the program with ' +\n          'GPGPUContext.deleteProgram before disposing.');\n    }\n    if (this.outputTexture != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound output matrix ' +\n          'texture.  This is probably a resource leak, delete the output ' +\n          'matrix texture with GPGPUContext.deleteMatrixTexture before ' +\n          'disposing.');\n    }\n    const gl = this.gl;\n    webgl_util.callAndCheck(gl, () => gl.finish());\n    webgl_util.callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteFramebuffer(this.framebuffer));\n    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(\n        gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteBuffer(this.indexBuffer));\n    this.disposed = true;\n  }\n\n  public createFloat32MatrixTexture(rows: number, columns: number): Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat32MatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createFloat16MatrixTexture(rows: number, columns: number): Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16MatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createUnsignedBytesMatrixTexture(rows: number, columns: number):\n      Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createUnsignedBytesMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public uploadPixelDataToTexture(\n      texture: WebGLTexture,\n      pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n      ImageBitmap) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadPixelDataToTexture(this.gl, texture, pixels);\n  }\n\n  public uploadDenseMatrixToTexture(\n      texture: WebGLTexture, width: number, height: number, data: TypedArray) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadDenseMatrixToTexture(\n        this.gl, texture, width, height, data, this.textureConfig);\n  }\n\n  public createFloat16PackedMatrixTexture(rows: number, columns: number):\n      Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16PackedMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createPackedMatrixTexture(rows: number, columns: number): Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createPackedMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public deleteMatrixTexture(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    if (this.outputTexture === texture) {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n      this.outputTexture = null;\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.deleteTexture(texture));\n  }\n\n  public downloadByteEncodedFloatMatrixFromOutputTexture(\n      texture: WebGLTexture, rows: number, columns: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture(\n            this.gl, rows, columns, this.textureConfig));\n  }\n\n  public downloadPackedMatrixFromBuffer(\n      buffer: WebGLBuffer, batch: number, rows: number, columns: number,\n      physicalRows: number, physicalCols: number): Float32Array {\n    return gpgpu_util.downloadPackedMatrixFromBuffer(\n        this.gl, buffer, batch, rows, columns, physicalRows, physicalCols,\n        this.textureConfig);\n  }\n\n  public downloadFloat32MatrixFromBuffer(buffer: WebGLBuffer, size: number):\n      Float32Array {\n    return gpgpu_util.downloadFloat32MatrixFromBuffer(this.gl, buffer, size);\n  }\n\n  public createBufferFromTexture(\n      texture: WebGLTexture, rows: number, columns: number): WebGLBuffer {\n    this.bindTextureToFrameBuffer(texture);\n    const result = gpgpu_util.createBufferFromOutputTexture(\n        this.gl as WebGL2RenderingContext, rows, columns, this.textureConfig);\n    this.unbindTextureToFrameBuffer();\n    return result;\n  }\n\n  public createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let query: WebGLQuery|WebGLSync;\n    let isFencePassed: () => boolean;\n\n    if (env().getBool('WEBGL_FENCE_API_ENABLED')) {\n      const gl2 = gl as WebGL2RenderingContext;\n\n      const sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n      gl.flush();\n\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(sync, 0, 0);\n        return status === gl2.ALREADY_SIGNALED ||\n            status === gl2.CONDITION_SATISFIED;\n      };\n\n      query = sync;\n    } else if (\n        env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n      query = this.beginQuery();\n      this.endQuery();\n      isFencePassed = () => this.isQueryAvailable(\n          query,\n          env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n    } else {\n      // If we have no way to fence, return true immediately. This will fire in\n      // WebGL 1.0 when there is no disjoint query timer. In this case, because\n      // the fence passes immediately, we'll immediately ask for a download of\n      // the texture, which will cause the UI thread to hang.\n      isFencePassed = () => true;\n    }\n\n    return {query, isFencePassed};\n  }\n\n  public downloadMatrixFromPackedTexture(\n      texture: WebGLTexture, physicalRows: number,\n      physicalCols: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadMatrixFromPackedOutputTexture(\n            this.gl, physicalRows, physicalCols));\n  }\n\n  private vertexAttrsAreBound = false;\n\n  public createProgram(fragmentShader: WebGLShader): WebGLProgram {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    if (this.vertexShader == null) {\n      this.vertexShader = gpgpu_util.createVertexShader(gl);\n    }\n    const program: WebGLProgram = webgl_util.createProgram(gl);\n    webgl_util.callAndCheck(\n        gl, () => gl.attachShader(program, this.vertexShader));\n    webgl_util.callAndCheck(gl, () => gl.attachShader(program, fragmentShader));\n    webgl_util.linkProgram(gl, program);\n    if (this.debug) {\n      webgl_util.validateProgram(gl, program);\n    }\n    if (!this.vertexAttrsAreBound) {\n      this.setProgram(program);\n      this.vertexAttrsAreBound = gpgpu_util.bindVertexProgramAttributeStreams(\n          gl, this.program, this.vertexBuffer);\n    }\n    return program;\n  }\n\n  public deleteProgram(program: WebGLProgram) {\n    this.throwIfDisposed();\n    if (program === this.program) {\n      this.program = null;\n    }\n    if (program != null) {\n      webgl_util.callAndCheck(this.gl, () => this.gl.deleteProgram(program));\n    }\n  }\n\n  public setProgram(program: WebGLProgram|null) {\n    this.throwIfDisposed();\n    this.program = program;\n    if ((this.program != null) && this.debug) {\n      webgl_util.validateProgram(this.gl, this.program);\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.useProgram(program));\n  }\n\n  public getUniformLocation(\n      program: WebGLProgram, uniformName: string,\n      shouldThrow = true): WebGLUniformLocation {\n    this.throwIfDisposed();\n    if (shouldThrow) {\n      return webgl_util.getProgramUniformLocationOrThrow(\n          this.gl, program, uniformName);\n    } else {\n      return webgl_util.getProgramUniformLocation(\n          this.gl, program, uniformName);\n    }\n  }\n\n  public getAttributeLocation(program: WebGLProgram, attribute: string):\n      number {\n    this.throwIfDisposed();\n    return webgl_util.callAndCheck(\n        this.gl, () => this.gl.getAttribLocation(program, attribute));\n  }\n\n  public getUniformLocationNoThrow(program: WebGLProgram, uniformName: string):\n      WebGLUniformLocation {\n    this.throwIfDisposed();\n    return this.gl.getUniformLocation(program, uniformName);\n  }\n\n  public setInputMatrixTexture(\n      inputMatrixTexture: WebGLTexture, uniformLocation: WebGLUniformLocation,\n      textureUnit: number) {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    webgl_util.bindTextureToProgramUniformSampler(\n        this.gl, inputMatrixTexture, uniformLocation, textureUnit);\n  }\n\n  public setOutputMatrixTexture(\n      outputMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);\n  }\n\n  public setOutputPackedMatrixTexture(\n      outputPackedMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.throwIfDisposed();\n    const [width, height] =\n        tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);\n  }\n\n  public setOutputMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    this.setOutputMatrixWriteRegionDriver(\n        startColumn, startRow, numColumns, numRows);\n  }\n\n  public setOutputPackedMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    throw new Error('setOutputPackedMatrixWriteRegion not implemented.');\n  }\n\n  public debugValidate() {\n    if (this.program != null) {\n      webgl_util.validateProgram(this.gl, this.program);\n    }\n    webgl_util.validateFramebuffer(this.gl);\n  }\n\n  public executeProgram() {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    const gl = this.gl;\n    if (this.debug) {\n      this.debugValidate();\n    }\n    webgl_util.callAndCheck(\n        gl, () => gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0));\n  }\n\n  public blockUntilAllProgramsCompleted() {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(this.gl, () => this.gl.finish());\n  }\n\n  private getQueryTimerExtension(): WebGL1DisjointQueryTimerExtension\n      |WebGL2DisjointQueryTimerExtension {\n    if (this.disjointQueryTimerExtension == null) {\n      this.disjointQueryTimerExtension =\n          webgl_util.getExtensionOrThrow(\n              this.gl,\n              env().getNumber(\n                  'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ?\n                  'EXT_disjoint_timer_query_webgl2' :\n                  'EXT_disjoint_timer_query') as\n              WebGL1DisjointQueryTimerExtension |\n          WebGL2DisjointQueryTimerExtension;\n    }\n    return this.disjointQueryTimerExtension;\n  }\n\n  private getQueryTimerExtensionWebGL2(): WebGL2DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension();\n  }\n\n  private getQueryTimerExtensionWebGL1(): WebGL1DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension() as WebGL1DisjointQueryTimerExtension;\n  }\n\n  beginQuery(): WebGLQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const query = gl2.createQuery();\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    const query = ext.createQueryEXT() as WebGLQuery;\n    ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);\n    return query;\n  }\n\n  endQuery() {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    ext.endQueryEXT(ext.TIME_ELAPSED_EXT);\n  }\n\n  public async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await util.repeatedTry(\n        () => this.disposed ||  // while testing contexts are created / disposed\n                                // in rapid succession, so without this check we\n                                // may poll for the query timer indefinitely\n            this.isQueryAvailable(\n                query,\n                env().getNumber(\n                    'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')));\n    return this.getQueryTime(\n        query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n  }\n\n  private getQueryTime(query: WebGLQuery, queryTimerVersion: number): number {\n    if (queryTimerVersion === 0) {\n      return null;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n\n      const timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const timeElapsedNanos =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    }\n  }\n\n  private isQueryAvailable(query: WebGLQuery, queryTimerVersion: number):\n      boolean {\n    if (queryTimerVersion === 0) {\n      return true;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const available =\n          gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const available =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    }\n  }\n\n  pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    util.repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n\n  private bindTextureToFrameBuffer(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    webgl_util.bindColorTextureToFramebuffer(\n        this.gl, texture, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(this.gl);\n    }\n  }\n\n  private unbindTextureToFrameBuffer() {\n    if (this.outputTexture != null) {\n      webgl_util.bindColorTextureToFramebuffer(\n          this.gl, this.outputTexture, this.framebuffer);\n      if (this.debug) {\n        webgl_util.validateFramebuffer(this.gl);\n      }\n    } else {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n    }\n  }\n\n  private downloadMatrixDriver(\n      texture: WebGLTexture,\n      downloadAndDecode: () => Float32Array): Float32Array {\n    this.bindTextureToFrameBuffer(texture);\n    const result = downloadAndDecode();\n    this.unbindTextureToFrameBuffer();\n\n    return result;\n  }\n\n  private setOutputMatrixTextureDriver(\n      outputMatrixTextureMaybePacked: WebGLTexture, width: number,\n      height: number) {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    webgl_util.bindColorTextureToFramebuffer(\n        gl, outputMatrixTextureMaybePacked, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(gl);\n    }\n    this.outputTexture = outputMatrixTextureMaybePacked;\n    webgl_util.callAndCheck(gl, () => gl.viewport(0, 0, width, height));\n    webgl_util.callAndCheck(gl, () => gl.scissor(0, 0, width, height));\n  }\n\n  private setOutputMatrixWriteRegionDriver(\n      x: number, y: number, width: number, height: number) {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(\n        this.gl, () => this.gl.scissor(x, y, width, height));\n  }\n\n  private throwIfDisposed() {\n    if (this.disposed) {\n      throw new Error('Attempted to use disposed GPGPUContext.');\n    }\n  }\n\n  private throwIfNoProgram() {\n    if (this.program == null) {\n      throw new Error('No GPU program is currently set.');\n    }\n  }\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean,\n  resolveFn: () => void\n};\n\n/**\n * Finds the index of the last true element using linear search.\n * Note: We can't do binary search because Chrome expects us to explicitly\n * test all fences before download:\n * https://github.com/tensorflow/tfjs/issues/1145\n */\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, DataValues, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleBinaryKernelImpl, SimpleBinaryOperation} from './binary_types';\n\n/**\n * Template that creates implementation for binary ops. Supports broadcast.\n */\nexport function createSimpleBinaryKernelImpl(op: SimpleBinaryOperation):\n    SimpleBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aVals: DataValues,\n          bVals: DataValues, dtype: DataType): [TypedArray, number[]] => {\n    const newShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    const resultRank = newShape.length;\n    const resultStrides = util.computeStrides(newShape);\n    const resultSize = util.sizeFromShape(newShape);\n\n    const result =\n        util.getTypedArrayFromDType(dtype as NumericDataType, resultSize);\n\n    const aRank = aShape.length;\n    const bRank = bShape.length;\n\n    const aStrides = util.computeStrides(aShape);\n    const bStrides = util.computeStrides(bShape);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, newShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, newShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < result.length; ++i) {\n        result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n      }\n    } else {\n      for (let i = 0; i < result.length; ++i) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        result[i] = op(aVals[aIndex], bVals[bIndex]);\n      }\n    }\n\n    return [result, newShape];\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Add, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const addImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => a + b));\nexport const addComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal + bReal, imag: aImag + bImag};\n    }));\n\nexport const add = binaryKernelFunc(Add, addImpl, addComplexImpl);\n\nexport const addConfig: KernelConfig = {\n  kernelName: Add,\n  backendName: 'cpu',\n  kernelFunc: add\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NumericDataType, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates implementation for unary op.\n */\nexport function createSimpleUnaryImpl(op: SimpleUnaryOperation):\n    SimpleUnaryImpl {\n  return (values, dtype, attrs) => {\n    const newValues =\n        util.getTypedArrayFromDType(dtype as NumericDataType, values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return newValues;\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Ceil, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const ceilImpl = createSimpleUnaryImpl((xi) => Math.ceil(xi));\nexport const ceil = unaryKernelFuncFromImpl(Ceil, ceilImpl);\n\nexport const ceilConfig: KernelConfig = {\n  kernelName: Ceil,\n  backendName: 'cpu',\n  kernelFunc: ceil,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Equal, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const equalImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a === b) ? 1 : 0);\nexport const equal =\n    binaryKernelFunc(Equal, equalImpl, null /* complexImpl */, 'bool');\n\nexport const equalConfig: KernelConfig = {\n  kernelName: Equal,\n  backendName: 'cpu',\n  kernelFunc: equal\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Exp, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expImpl = createSimpleUnaryImpl((xi) => Math.exp(xi));\nexport const exp = unaryKernelFuncFromImpl(Exp, expImpl, 'float32');\n\nexport const expConfig: KernelConfig = {\n  kernelName: Exp,\n  backendName: 'cpu',\n  kernelFunc: exp,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Expm1, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expm1Impl = createSimpleUnaryImpl((xi) => Math.expm1(xi));\nexport const expm1 = unaryKernelFuncFromImpl(Expm1, expm1Impl);\n\nexport const expm1Config: KernelConfig = {\n  kernelName: Expm1,\n  backendName: 'cpu',\n  kernelFunc: expm1,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Floor, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const floorImpl = createSimpleUnaryImpl((xi) => Math.floor(xi));\nexport const floor = unaryKernelFuncFromImpl(Floor, floorImpl);\n\nexport const floorConfig: KernelConfig = {\n  kernelName: Floor,\n  backendName: 'cpu',\n  kernelFunc: floor,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Greater, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a > b) ? 1 : 0);\nexport const greater =\n    binaryKernelFunc(Greater, greaterImpl, null /* complexImpl */, 'bool');\n\nexport const greaterConfig: KernelConfig = {\n  kernelName: Greater,\n  backendName: 'cpu',\n  kernelFunc: greater\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GreaterEqual, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a >= b) ? 1 : 0);\nexport const greaterEqual = binaryKernelFunc(\n    GreaterEqual, greaterEqualImpl, null /* complexImpl */, 'bool');\n\nexport const greaterEqualConfig: KernelConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'cpu',\n  kernelFunc: greaterEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Less} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a < b) ? 1 : 0);\nexport const less =\n    binaryKernelFunc(Less, lessImpl, null /* complexImpl */, 'bool');\n\nexport const lessConfig: KernelConfig = {\n  kernelName: Less,\n  backendName: 'cpu',\n  kernelFunc: less\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LessEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a <= b) ? 1 : 0);\nexport const lessEqual =\n    binaryKernelFunc(LessEqual, lessEqualImpl, null /* complexImpl */, 'bool');\n\nexport const lessEqualConfig: KernelConfig = {\n  kernelName: LessEqual,\n  backendName: 'cpu',\n  kernelFunc: lessEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const logImpl = createSimpleUnaryImpl((xi) => Math.log(xi));\nexport const log = unaryKernelFuncFromImpl(Log, logImpl);\n\nexport const logConfig: KernelConfig = {\n  kernelName: Log,\n  backendName: 'cpu',\n  kernelFunc: log,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Maximum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const maximumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.max(aValue as number, bValue as number)));\nexport const maximum = binaryKernelFunc(Maximum, maximumImpl);\n\nexport const maximumConfig: KernelConfig = {\n  kernelName: Maximum,\n  backendName: 'cpu',\n  kernelFunc: maximum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Minimum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const minimumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.min(aValue as number, bValue as number)));\nexport const minimum = binaryKernelFunc(Minimum, minimumImpl);\n\nexport const minimumConfig: KernelConfig = {\n  kernelName: Minimum,\n  backendName: 'cpu',\n  kernelFunc: minimum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Multiply} from '@tensorflow/tfjs-core';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const multiplyImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue * bValue));\nexport const multiplyComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {\n        real: aReal * bReal - aImag * bImag,\n        imag: aReal * bImag + aImag * bReal\n      };\n    }));\n\nexport const multiply =\n    binaryKernelFunc(Multiply, multiplyImpl, multiplyComplexImpl);\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'cpu',\n  kernelFunc: multiply\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NotEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const notEqualImpl =\n    createSimpleBinaryKernelImpl(((a, b) => (a !== b) ? 1 : 0));\nexport const notEqual =\n    binaryKernelFunc(NotEqual, notEqualImpl, null /* complexOp */, 'bool');\n\nexport const notEqualConfig: KernelConfig = {\n  kernelName: NotEqual,\n  backendName: 'cpu',\n  kernelFunc: notEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Rsqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const rsqrtImpl = createSimpleUnaryImpl((xi) => 1 / Math.sqrt(xi));\nexport const rsqrt = unaryKernelFuncFromImpl(Rsqrt, rsqrtImpl);\n\nexport const rsqrtConfig: KernelConfig = {\n  kernelName: Rsqrt,\n  backendName: 'cpu',\n  kernelFunc: rsqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sigmoid} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sigmoidImpl =\n    createSimpleUnaryImpl((xi) => 1 / (1 + Math.exp(-xi)));\nexport const sigmoid =\n    unaryKernelFunc(Sigmoid, (xi) => 1 / (1 + Math.exp(-xi)));\n\nexport const sigmoidConfig: KernelConfig = {\n  kernelName: Sigmoid,\n  backendName: 'cpu',\n  kernelFunc: sigmoid,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sqrtImpl = createSimpleUnaryImpl((xi) => Math.sqrt(xi));\nexport const sqrt = unaryKernelFunc(Sqrt, (xi) => Math.sqrt(xi));\n\nexport const sqrtConfig: KernelConfig = {\n  kernelName: Sqrt,\n  backendName: 'cpu',\n  kernelFunc: sqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SquaredDifference} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const squaredDifferenceImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => {\n      const diff = a - b;\n      return diff * diff;\n    }));\nexport const squaredDifference =\n    binaryKernelFunc(SquaredDifference, squaredDifferenceImpl);\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'cpu',\n  kernelFunc: squaredDifference\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * The StringNGramsOp class creates ngrams from ragged string data.\n * The constructor contains all attributes related to the operation such as\n * padding widths and strings, and the compute function can be used to\n * compute the ngrams for different ragged tensor inputs.\n */\nclass StringNGramsOp {\n  private separator: Uint8Array;\n  private nGramWidths: number[];\n  private padWidth: number;\n  private leftPad: Uint8Array;\n  private rightPad: Uint8Array;\n  private preserveShort: boolean;\n\n  constructor(\n      separator: string, nGramWidths: number[], leftPad: string,\n      rightPad: string, padWidth: number, preserveShortSequences: boolean) {\n    this.separator = util.encodeString(separator);\n    this.nGramWidths = nGramWidths;\n    this.leftPad = util.encodeString(leftPad);\n    this.rightPad = util.encodeString(rightPad);\n    this.padWidth = padWidth;\n    this.preserveShort = preserveShortSequences;\n  }\n\n  private getPadWidth(nGramWidth: number) {\n    // Ngrams can be padded with either a fixed pad width or a dynamic pad\n    // width depending on the 'padWidth' arg, but in no case should the padding\n    // ever be wider than 'nGramWidth' - 1.\n    return Math.min(\n        this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);\n  }\n\n  private getNumNGrams(length: number, nGramWidth: number) {\n    const padWidth = this.getPadWidth(nGramWidth);\n    return Math.max(0, ((length + 2 * padWidth) - nGramWidth) + 1);\n  }\n\n  private createNGrams(\n      data: Uint8Array[], splitIndex: number, output: Uint8Array[],\n      outputStartIndex: number, numNGrams: number, nGramWidth: number) {\n    for (let nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex) {\n      const padWidth = this.getPadWidth(nGramWidth);\n      const leftPadding = Math.max(0, padWidth - nGramIndex);\n      const rightPadding =\n          Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));\n      const numTokens = nGramWidth - (leftPadding + rightPadding);\n      const dataStartIndex =\n          splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth);\n\n      // Calculate the total expected size of the nGram so we can reserve the\n      // correct amount of space in the string.\n      let nGramSize = 0;\n      // Size of the left padding.\n      nGramSize += leftPadding * this.leftPad.length;\n      // Size of the tokens.\n      for (let n = 0; n < numTokens; ++n) {\n        nGramSize += data[dataStartIndex + n].length;\n      }\n      // Size of the right padding.\n      nGramSize += rightPadding * this.rightPad.length;\n      // Size of the separators.\n      const numSeparators = leftPadding + rightPadding + numTokens - 1;\n      nGramSize += numSeparators * this.separator.length;\n\n      // Build the nGram.\n      output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);\n      const nGram = output[outputStartIndex + nGramIndex];\n\n      let nextNGramIndex = 0;\n      const appendToNGram = (str: Uint8Array) =>\n          str.forEach((value) => nGram[nextNGramIndex++] = value);\n\n      for (let n = 0; n < leftPadding; ++n) {\n        appendToNGram(this.leftPad);\n        appendToNGram(this.separator);\n      }\n      // Only output first numTokens - 1 pairs of data and separator\n      for (let n = 0; n < numTokens - 1; ++n) {\n        appendToNGram(data[dataStartIndex + n]);\n        appendToNGram(this.separator);\n      }\n      // Handle case when there are no tokens or no right padding as these\n      // can result in consecutive separators.\n      if (numTokens > 0) {\n        // If we have tokens, then output last and then pair each separator\n        // with the right padding that follows, to ensure nGram ends either with\n        // the token or with the right pad.\n        appendToNGram(data[dataStartIndex + numTokens - 1]);\n        for (let n = 0; n < rightPadding; ++n) {\n          appendToNGram(this.separator);\n          appendToNGram(this.rightPad);\n        }\n      } else {\n        // If we don't have tokens, then the last item inserted into the nGram\n        // has been the separator from the left padding loop above. Hence,\n        // output right pad and separator and make sure to finish with a\n        // padding, not a separator.\n        for (let n = 0; n < rightPadding - 1; ++n) {\n          appendToNGram(this.rightPad);\n          appendToNGram(this.separator);\n        }\n        appendToNGram(this.rightPad);\n      }\n    }\n  }\n\n  // Data and splits together form the definition of the ragged tensor,\n  // where data is 1 dimensional and contains the values of the tensor\n  // and splits denotes the indices at which each row starts.\n  public compute(data: Uint8Array[], splits: Int32Array):\n      [Uint8Array[], Int32Array] {\n    // Validate that the splits are valid indices into data, only if there are\n    // splits specified.\n    const inputDataSize = data.length;\n    const splitsSize = splits.length;\n    if (splitsSize > 0) {\n      let prevSplit = splits[0];\n      if (prevSplit !== 0) {\n        throw new Error(`First split value must be 0, got ${prevSplit}`);\n      }\n      for (let i = 1; i < splitsSize; ++i) {\n        let validSplits = splits[i] >= prevSplit;\n        validSplits = validSplits && (splits[i] <= inputDataSize);\n        if (!validSplits) {\n          throw new Error(`Invalid split value ${splits[i]}, must be in [${\n              prevSplit}, ${inputDataSize}]`);\n        }\n        prevSplit = splits[i];\n      }\n      if (prevSplit !== inputDataSize) {\n        throw new Error(`Last split value must be data size. Expected ${\n            inputDataSize}, got ${prevSplit}`);\n      }\n    }\n\n    const numBatchItems = splitsSize - 1;\n    const nGramsSplits = util.getArrayFromDType('int32', splitsSize);\n    // If there is no data or size, return an empty ragged tensor.\n    if (inputDataSize === 0 || splitsSize === 0) {\n      const empty: Uint8Array[] = new Array(inputDataSize);\n      for (let i = 0; i <= numBatchItems; ++i) {\n        nGramsSplits[i] = 0;\n      }\n      return [empty, nGramsSplits];\n    }\n\n    nGramsSplits[0] = 0;\n    for (let i = 1; i <= numBatchItems; ++i) {\n      const length = splits[i] - splits[i - 1];\n      let numNGrams = 0;\n      this.nGramWidths.forEach((nGramWidth) => {\n        numNGrams += this.getNumNGrams(length, nGramWidth);\n      });\n      if (this.preserveShort && length > 0 && numNGrams === 0) {\n        numNGrams = 1;\n      }\n      nGramsSplits[i] = nGramsSplits[i - 1] + numNGrams;\n    }\n\n    const nGrams: Uint8Array[] = new Array(nGramsSplits[numBatchItems]);\n\n    for (let i = 0; i < numBatchItems; ++i) {\n      const splitIndex = splits[i];\n      let outputStartIdx = nGramsSplits[i];\n      this.nGramWidths.forEach((nGramWidth) => {\n        const length = splits[i + 1] - splits[i];\n        const numNGrams = this.getNumNGrams(length, nGramWidth);\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n        outputStartIdx += numNGrams;\n      });\n      // If we're preserving short sequences, check to see if no sequence was\n      // generated by comparing the current output start idx to the original\n      // one (nGramSplitsdata). If no ngrams were generated, then they will\n      // be equal (since we increment outputStartIdx by numNGrams every\n      // time we create a set of ngrams.)\n      if (this.preserveShort && outputStartIdx === nGramsSplits[i]) {\n        const dataLength = splits[i + 1] - splits[i];\n        // One legitimate reason to not have any ngrams when this.preserveShort\n        // is true is if the sequence itself is empty. In that case, move on.\n        if (dataLength === 0) {\n          continue;\n        }\n        // We don't have to worry about dynamic padding sizes here: if padding\n        // was dynamic, every sequence would have had sufficient padding to\n        // generate at least one nGram.\n        const nGramWidth = dataLength + 2 * this.padWidth;\n        const numNGrams = 1;\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n      }\n    }\n    return [nGrams, nGramsSplits];\n  }\n}\n\nexport function stringNGramsImpl(\n    data: Uint8Array[], dataSplits: Int32Array, separator: string,\n    nGramWidths: number[], leftPad: string, rightPad: string, padWidth: number,\n    preserveShortSequences: boolean): [Uint8Array[], Int32Array] {\n  return new StringNGramsOp(\n             separator, nGramWidths, leftPad, rightPad, padWidth,\n             preserveShortSequences)\n      .compute(data, dataSplits);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction split(\n    str: Uint8Array, delimiters: Uint8Array, skipEmpty: boolean,\n    result: Uint8Array[]): void {\n  if (!str.length) {\n    return;\n  }\n  // When the delimiter is empty, the input is split into individual characters.\n  if (delimiters.length === 0) {\n    for (let i = 0; i < str.length; ++i) {\n      result.push(str.subarray(i, i + 1));\n    }\n    return;\n  }\n  // When there is one delimiter, the input is split only at that delimiter.\n  if (delimiters.length === 1) {\n    const delimiter = delimiters[0];\n    let f = str.indexOf(delimiter);\n    while (f !== -1) {\n      const token = str.subarray(0, f);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      str = str.subarray(f + 1);\n      f = str.indexOf(delimiter);\n    }\n    if (!skipEmpty || str.length !== 0) {\n      result.push(str);\n    }\n    return;\n  }\n  // When there are multiple delimiters, the input is split at every instance\n  // one of the delimiters appears.\n  let tokenStart = 0;\n  for (let i = 0; i < str.length + 1; i++) {\n    if ((i === str.length) || (delimiters.indexOf(str[i]) !== -1)) {\n      const token = str.subarray(tokenStart, i);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      tokenStart = i + 1;\n    }\n  }\n}\n\nexport function stringSplitImpl(\n    input: Uint8Array[], delimiter: Uint8Array,\n    skipEmpty: boolean): [TypedArray, Uint8Array[], [number, number]] {\n  const batchSize = input.length;\n\n  // Empty delimiter means split the input character by character.\n  const tokens: Uint8Array[] = [];\n\n  let outputSize = 0;\n  let maxNumEntries = 0;\n  const numIndices: number[] = new Array(batchSize);\n  for (let i = 0; i < batchSize; ++i) {\n    const prevTokensLength = tokens.length;\n    split(input[i], delimiter, skipEmpty, tokens);\n    const nEntries = tokens.length - prevTokensLength;\n    numIndices[i] = nEntries;\n    outputSize += nEntries;\n    maxNumEntries = Math.max(maxNumEntries, nEntries);\n  }\n\n  const indices = util.getArrayFromDType('int32', outputSize * 2) as TypedArray;\n  const values: Uint8Array[] = new Array(outputSize);\n  const shape: [number, number] = [batchSize, maxNumEntries];\n\n  let c = 0;\n  for (let i = 0; i < batchSize; ++i) {\n    for (let j = 0; j < numIndices[i]; ++j) {\n      // indices is a 2d tensor with shape of [outputSize, 2]\n      indices[c * 2] = i;\n      indices[c * 2 + 1] = j;\n      values[c] = tokens[c];\n      ++c;\n    }\n  }\n\n  return [indices, values, shape];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sub} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const subImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue - bValue));\nexport const subComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal - bReal, imag: aImag - bImag};\n    }));\nexport const sub = binaryKernelFunc(Sub, subImpl, subComplexImpl);\n\nexport const subConfig: KernelConfig = {\n  kernelName: Sub,\n  backendName: 'cpu',\n  kernelFunc: sub\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** An implementation of the TopK kernel shared between webgl and cpu. */\n\nimport {buffer, NumericDataType, Rank, ShapeMap, Tensor, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\ntype Pair = {\n  value: number,\n  index: number\n};\n\nconst comparePair = (a: Pair, b: Pair) => {\n  const valueDiff = b.value - a.value;\n  return valueDiff === 0 ? a.index - b.index : valueDiff;\n};\n\n/**\n * Partitions array where all elements smaller than the (k+1) smallest element\n * are found to the left of it, and all larger to the right of it.\n * Based on the Floyd-Rivest Algorithm, ref:\n * https://en.wikipedia.org/wiki/Floyd%E2%80%93Rivest_algorithm\n * @param array: Array to partition\n * @param left: Left index for the interval\n * @param right: Right index for the interval\n * @param k: Desired index value, where array[k] is the (k+1)th smallest element\n *           when left = 0\n */\nfunction select(array: Pair[], k: number, left = 0, right = array.length - 1) {\n  while (right > left) {\n    // Use select recursively to sample a smaller set of size s\n    // the arbitrary constants 600 and 0.5 are used in the original\n    // version to minimize execution time.\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const i = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * Math.sign(i - n / 2);\n      const newLeft = Math.max(left, Math.floor(k - i * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - i) * s / n + sd));\n      select(array, k, newLeft, newRight);\n    }\n    // partition the elements between left and right around t\n    const t = array[k];\n    let i = left;\n    let j = right;\n\n    util.swap(array, left, k);\n\n    if (comparePair(array[right], t) > 0) {\n      util.swap(array, left, right);\n    }\n    while (i < j) {\n      util.swap(array, i, j);\n      i++;\n      j--;\n      while (comparePair(array[i], t) < 0) {\n        i = i + 1;\n      }\n      while (comparePair(array[j], t) > 0) {\n        j = j - 1;\n      }\n    }\n    if (comparePair(array[left], t) === 0) {\n      util.swap(array, left, j);\n    } else {\n      j = j + 1;\n      util.swap(array, j, right);\n    }\n    // Adjust left and right towards the boundaries of the subset\n    // containing the (k - left + 1)th smallest element.\n    if (j <= k) {\n      left = j + 1;\n    }\n    if (k <= j) {\n      right = j - 1;\n    }\n  }\n}\n\nexport function topKImpl<T extends Tensor, R extends Rank>(\n    x: TypedArray, xShape: number[], xDtype: NumericDataType, k: number,\n    sorted: boolean):\n    [TensorBuffer<R, NumericDataType>, TensorBuffer<R, 'int32'>] {\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const lastDim = xShape[xShape.length - 1];\n  const [batch, size] = [x.length / lastDim, lastDim];\n  const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n  const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = x.subarray(offset, offset + size);\n\n    let valAndInd: Pair[] = new Array(vals.length);\n    vals.forEach(\n        (value: number, index: number) => valAndInd[index] = {value, index});\n\n    if (k < valAndInd.length) {\n      select(valAndInd, k);\n      valAndInd = valAndInd.slice(0, k);\n    }\n\n    if (sorted) {\n      valAndInd.sort(comparePair);\n    }\n    \n    const outOffset = b * k;\n    const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n    const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n    for (let i = 0; i < k; i++) {\n      topKVals[i] = valAndInd[i].value;\n      topKIndices[i] = valAndInd[i].index;\n    }\n  }\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const outputShape = xShape.slice();\n  outputShape[outputShape.length - 1] = k;\n\n  return [\n    buffer(outputShape as ShapeMap[R], xDtype, allTopKVals),\n    buffer(outputShape as ShapeMap[R], 'int32', allTopKIndices)\n  ];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, AbsInputs, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function simpleAbsImpl(vals: TypedArray): Float32Array {\n  const resultValues = new Float32Array(vals.length);\n  for (let i = 0; i < vals.length; ++i) {\n    resultValues[i] = Math.abs(vals[i]);\n  }\n  return resultValues;\n}\n\nexport const abs = (args: {inputs: AbsInputs, backend: MathBackendCPU}) => {\n  const {x} = args.inputs;\n  const cpuBackend = args.backend;\n\n  assertNotComplex(x, 'abs');\n\n  let resultValues = new Float32Array(util.sizeFromShape(x.shape));\n  const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n  resultValues = simpleAbsImpl(values);\n\n  return cpuBackend.makeOutput(resultValues, x.shape, x.dtype);\n};\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'cpu',\n  kernelFunc: abs as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function bincountImpl(\n    xVals: TypedArray, weightsVals: TypedArray, weightsDtype: DataType,\n    weightsShape: number[], size: number): TypedArray {\n  const weightsSize = util.sizeFromShape(weightsShape);\n  const outVals = util.makeZerosTypedArray(size, weightsDtype) as TypedArray;\n\n  for (let i = 0; i < xVals.length; i++) {\n    const value = xVals[i];\n    if (value < 0) {\n      throw new Error('Input x must be non-negative!');\n    }\n\n    if (value >= size) {\n      continue;\n    }\n\n    if (weightsSize > 0) {\n      outVals[value] += weightsVals[i];\n    } else {\n      outVals[value] += 1;\n    }\n  }\n\n  return outVals;\n}\n\nexport function bincountReduceImpl<R extends Rank>(\n    xBuf: TensorBuffer<R>, weightsBuf: TensorBuffer<R>, size: number,\n    binaryOutput = false): TensorBuffer<R> {\n  const numRows = xBuf.shape[0];\n  const numCols = xBuf.shape[1];\n\n  const outBuf = buffer([numRows, size], weightsBuf.dtype);\n\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      const value = xBuf.get(i, j);\n      if (value < 0) {\n        throw new Error('Input x must be non-negative!');\n      }\n\n      if (value >= size) {\n        continue;\n      }\n\n      if (binaryOutput) {\n        outBuf.set(1, i, value);\n      } else {\n        if (weightsBuf.size > 0) {\n          outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n        } else {\n          outBuf.set(outBuf.get(i, value) + 1, i, value);\n        }\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function concatImpl(\n    inputs: Array<{vals: BackendValues, shape: number[]}>, outShape: number[],\n    dtype: DataType, simplyConcat: boolean): TypedArray|string[] {\n  const outVals = util.getArrayFromDType(dtype, util.sizeFromShape(outShape));\n\n  if (simplyConcat && dtype !== 'string') {\n    // Use built-in TypedArray.set() method for speed.\n    let offset = 0;\n    inputs.forEach(input => {\n      const size = util.sizeFromShape(input.shape);\n\n      (outVals as TypedArray).set(input.vals as TypedArray, offset);\n      offset += size;\n    });\n  } else {\n    let colOffset = 0;\n\n    inputs.forEach(input => {\n      const decodedData = dtype === 'string' ?\n          backend_util.fromUint8ToStringArray(input.vals as Uint8Array[]) :\n          input.vals as TypedArray;\n\n      let tIdx = 0;\n\n      for (let row = 0; row < input.shape[0]; ++row) {\n        const resIdx = row * outShape[1] + colOffset;\n        for (let col = 0; col < input.shape[1]; ++col) {\n          outVals[resIdx + col] = decodedData[tIdx++];\n        }\n      }\n\n      colOffset += input.shape[1];\n    });\n  }\n\n  return outVals;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function gatherNdImpl<R extends Rank>(\n    indicesData: TypedArray, paramsBuf: TensorBuffer<R>, dtype: DataType,\n    numSlices: number, sliceRank: number, sliceSize: number, strides: number[],\n    paramsShape: number[], paramsSize: number): TensorBuffer<R> {\n  const outBuf = buffer([numSlices, sliceSize], dtype);\n\n  for (let i = 0; i < numSlices; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      flattenIndex += dim * strides[j];\n      index.push(dim);\n    }\n    if (flattenIndex < 0 || flattenIndex >= paramsSize / sliceSize) {\n      throw new Error(\n          `Invalid indices: ${index} does not index into ${paramsShape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      outBuf.values[i * sliceSize + k] =\n          paramsBuf.get(...paramsBuf.indexToLoc(flattenIndex * sliceSize + k));\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function gatherV2Impl<R extends Rank, D extends DataType>(\n    xBuf: TensorBuffer<R, D>, indicesBuf: TensorBuffer<R, D>,\n    flattenOutputShape: number[]): TensorBuffer<R, D> {\n  const outBuf = buffer(flattenOutputShape, xBuf.dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const newLoc = outBuf.indexToLoc(i);\n\n    const originalLoc: number[] = newLoc.slice();\n    const batchIdx = originalLoc[0];\n    const indicesIdx = originalLoc[2];\n    const indicesIndex = indicesBuf.locToIndex([batchIdx, indicesIdx]);\n    originalLoc[2] = indicesBuf.values[indicesIndex] as number;\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    if (0 <= originalIndex && originalIndex < xBuf.values.length) {\n      outBuf.values[i] = xBuf.values[originalIndex];\n    } // Else, index is out of bounds, so leave the default zero val in outBuf.\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function linSpaceImpl(\n    start: number, stop: number, num: number): TypedArray {\n  const step = (stop - start) / (num - 1);\n\n  const values = util.makeZerosTypedArray(num, 'float32');\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function maxImpl(\n    aVals: TypedArray, reduceSize: number, outShape: number[],\n    dtype: DataType): TypedArray {\n  const vals = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (Number.isNaN(value) ||\n          value > max) {  // comparison with NaN always return false\n        max = value;\n      }\n    }\n    vals[i] = max;\n  }\n  return vals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelConfig, KernelFunc, Neg, TensorInfo, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {multiplyImpl} from './Multiply';\n\nexport function negImpl(xVals: TypedArray, xShape: number[], xDtype: DataType):\n    [TypedArray, number[]] {\n  const minusOne =\n      util.createScalarValue(-1 as {} as 'float32', xDtype) as TypedArray;\n  return multiplyImpl([], xShape, minusOne, xVals, xDtype);\n}\n\nexport function neg(args: {inputs: UnaryInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  assertNotComplex(x, 'neg');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [res, newShape] = negImpl(xVals, x.shape, x.dtype);\n\n  return backend.makeTensorInfo(newShape, x.dtype, res);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'cpu',\n  kernelFunc: neg as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function prodImpl(\n    xShape: number[], xDtype: DataType, xVals: TypedArray,\n    reductionAxes: number[]):\n    {outVals: TypedArray, outShape: number[], outDtype: DataType} {\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(xShape, reductionAxes);\n  const outDtype = upcastType(xDtype, 'int32');\n  const outVals = util.makeZerosTypedArray(\n                      util.sizeFromShape(outShape), outDtype) as TypedArray;\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  for (let i = 0; i < outVals.length; ++i) {\n    const offset = i * reduceSize;\n    let prod = 1;\n    for (let j = 0; j < reduceSize; ++j) {\n      prod *= xVals[offset + j];\n    }\n    outVals[i] = prod;\n  }\n\n  return {outVals, outShape, outDtype};\n}\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: MathBackendCPU, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'prod');\n\n  const xRank = x.shape.length;\n  const axes = util.parseAxisParam(axis, x.shape);\n\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n  let reductionAxes = axes;\n  let permutedX = x;\n  const intermediateTensorInfos = [];\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n    intermediateTensorInfos.push(permutedX);\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  const xVals = backend.data.get(permutedX.dataId).values as TypedArray;\n  const {outVals, outShape, outDtype} =\n      prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);\n\n  let resultShape = outShape;\n  if (keepDims) {\n    resultShape = backend_util.expandShapeToKeepDim(outShape, axes);\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(resultShape, outDtype, outVals);\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'cpu',\n  kernelFunc: prod as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataTypeMap, util} from '@tensorflow/tfjs-core';\n\nexport function rangeImpl(\n    start: number, stop: number, step: number,\n    dtype: 'float32'|'int32'): DataTypeMap['float32' | 'int32'] {\n  const sameStartStop = start === stop;\n  const increasingRangeNegativeStep = start < stop && step < 0;\n  const decreasingRangePositiveStep = stop < start && step > 1;\n\n  if (sameStartStop || increasingRangeNegativeStep ||\n      decreasingRangePositiveStep) {\n    return util.makeZerosTypedArray(0, dtype);\n  }\n\n  const numElements = Math.abs(Math.ceil((stop - start) / step));\n  const values = util.makeZerosTypedArray(numElements, dtype);\n\n  if (stop < start && step === 1) {\n    // Auto adjust the step's sign if it hasn't been set\n    // (or was set to 1)\n    step = -1;\n  }\n\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {buffer, Rank, ShapeMap, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\ninterface DefaultValueTypeMap {\n  bool: boolean;\n  int32: number;\n  float32: number;\n  string: string;\n}\n\nexport function\nscatterImpl<R extends Rank, D extends 'float32'|'int32'|'bool'|'string'>(\n    indices: TensorBuffer<R, 'int32'>, updates: TensorBuffer<R, D>,\n    shape: number[], outputSize: number, sliceSize: number, numUpdates: number,\n    sliceRank: number, strides: number[], defaultValue: DefaultValueTypeMap[D],\n    sumDupeIndices: boolean): TensorBuffer<R, D> {\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  const indicesData = indices.values as TypedArray;\n  const updatesData = updates.values;\n\n  if (outputSize === 0) {\n    return buffer(shape as ShapeMap[R], updates.dtype);\n  }\n\n  const outBuf = buffer(flattenShape, updates.dtype);\n  if (typeof defaultValue === 'string') {\n    (outBuf.values as string[]).fill(defaultValue);\n  } else if (typeof defaultValue === 'number') {\n    (outBuf.values as TypedArray).fill(defaultValue);\n  } else if (typeof defaultValue === 'boolean') {\n    (outBuf.values as TypedArray).fill(+defaultValue);\n  }\n\n  for (let i = 0; i < numUpdates; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      index.push(dim);\n      flattenIndex += dim * strides[j];\n    }\n\n    if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n      throw new Error(`Invalid indices: ${index} does not index into ${shape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      if (sumDupeIndices) {\n        (outBuf.values as TypedArray)[flattenIndex * sliceSize + k] +=\n            (updatesData as TypedArray)[i * sliceSize + k];\n      } else {\n        outBuf.values[flattenIndex * sliceSize + k] = updates.rank === 0 ?\n            updatesData[0] :\n            updatesData[i * sliceSize + k];\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, buffer, DataType, KernelConfig, KernelFunc, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function sliceImpl(\n    vals: BackendValues, begin: number[], size: number[], shape: number[],\n    dtype: DataType): BackendValues {\n  const isContinous = slice_util.isSliceContinous(shape, begin, size);\n  const length = util.sizeFromShape(size);\n  const xStrides = util.computeStrides(shape);\n\n  if (isContinous) {\n    const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n\n    if (dtype === 'string') {\n      return (vals as Uint8Array[]).slice(flatOffset, flatOffset + length);\n    }\n\n    return (vals as TypedArray).subarray(flatOffset, flatOffset + length);\n  }\n\n  const decodedData = dtype === 'string' ?\n      backend_util.fromUint8ToStringArray(vals as Uint8Array[]) :\n      vals as TypedArray;\n\n  const inBuf = buffer(shape, dtype, decodedData);\n  const outBuf = buffer(size, dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.map((idx: number, j) => idx + begin[j]);\n    outBuf.set(inBuf.get(...inLoc), ...outLoc);\n  }\n\n  if (dtype === 'string') {\n    return backend_util.fromStringArrayToUint8(outBuf.values as string[]);\n  }\n  return outBuf.values as TypedArray;\n}\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: MathBackendCPU, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  assertNotComplex(x, 'slice');\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  const vals = backend.data.get(x.dataId).values;\n  const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n  return backend.makeTensorInfo($size, x.dtype, outVals);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'cpu',\n  kernelFunc: slice as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseFillEmptyRowsImpl(\n    indices: TypedArray, indicesShape: number[], indicesDType: DataType,\n    values: TypedArray, valuesDType: DataType, denseShape: TypedArray,\n    defaultValue: number):\n    [TypedArray, number[], TypedArray, boolean[], number[]] {\n  const indicesCount = indicesShape[0];\n  const denseRows = denseShape[0];\n\n  const emptyRowIndicator: boolean[] = new Array(denseRows);\n  const reverseIndexMap: number[] = new Array(indicesCount);\n\n  const rank = indicesShape[1];\n\n  if (denseRows === 0) {\n    if (indicesCount !== 0) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsIndicesDenseShapeMismatch(\n              indicesCount));\n    }\n    const outputIndices = util.getArrayFromDType(indicesDType, 0) as TypedArray;\n    const outputValues = util.getArrayFromDType(valuesDType, 0) as TypedArray;\n    return [\n      outputIndices, [0, rank], outputValues, emptyRowIndicator, reverseIndexMap\n    ];\n  }\n\n  let rowsAreOrdered = true;\n  let lastIndicesRow = 0;\n  const csrOffset: number[] = new Array(denseRows).fill(0);\n\n  for (let i = 0; i < indicesCount; ++i) {\n    // indices is a 2d tensor with shape of [N, rank]\n    const row = indices[i * rank];\n    if (row < 0) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsNegativeIndexErrorMessage(i, row));\n    }\n    if (row >= denseRows) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(\n              i, row, denseRows));\n    }\n    ++csrOffset[row];\n    rowsAreOrdered = rowsAreOrdered && (row >= lastIndicesRow);\n    lastIndicesRow = row;\n  }\n\n  let allRowsFull = true;\n  for (let row = 0; row < denseRows; ++row) {\n    // csrOffset here describes the number of elements in this dense row\n    const rowEmpty = (csrOffset[row] === 0);\n    emptyRowIndicator[row] = rowEmpty;\n    allRowsFull = allRowsFull && !rowEmpty;\n    // In filled version, each row has at least one element.\n    csrOffset[row] = Math.max(csrOffset[row], 1);\n    // Update csrOffset to represent the number of elements up to and\n    // including denseRows + 1:\n    //  csrOffset[0] == #{elements of row 0}\n    //  csrOffset[1] == #{elements of row 1} + #{elements of row 0}\n    //  ..\n    //  csrOffset[i] == starting index for elements in row i + 1.\n    if (row > 0) {\n      csrOffset[row] += csrOffset[row - 1];\n    }\n  }\n\n  if (allRowsFull && rowsAreOrdered) {\n    const outputIndices: TypedArray = indices;\n    const outputValues: TypedArray = values;\n    for (let i = 0; i < indicesCount; ++i) {\n      reverseIndexMap[i] = i;\n    }\n    return [\n      outputIndices, [indicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  } else {\n    const fullIndicesCount = csrOffset[denseRows - 1];\n    const outputIndices =\n        util.getArrayFromDType(indicesDType, fullIndicesCount * rank) as\n        TypedArray;\n    const outputValues =\n        util.getArrayFromDType(valuesDType, fullIndicesCount) as TypedArray;\n    const filledCount: number[] = new Array(denseRows).fill(0);\n\n    // Fill in values for rows that are not missing\n    for (let i = 0; i < indicesCount; ++i) {\n      // indices is a 2d tensor with shape of [N, rank]\n      const row = indices[i * rank];\n      const offset = filledCount[row];\n      const outputI = ((row === 0) ? 0 : csrOffset[row - 1]) + offset;\n      filledCount[row]++;  // Increment the filled count for this row.\n      for (let j = 0; j < rank; ++j) {\n        // indices and outputIndices are 2d tensors with shape of [N, rank]\n        outputIndices[outputI * rank + j] = indices[i * rank + j];\n      }\n      outputValues[outputI] = values[i];\n      // We'll need this reverse index map to backprop correctly.\n      reverseIndexMap[i] = outputI;\n    }\n\n    // Fill in values for rows that are missing\n    for (let row = 0; row < denseRows; ++row) {\n      const rowCount = filledCount[row];\n      if (rowCount === 0) {  // We haven't filled this row\n        const startingIndex = (row === 0) ? 0 : csrOffset[row - 1];\n        // Remaining index values were set to zero already.\n        // Just need to set the row index in the right location.\n        // outputIndices is a 2d tensor with shape of [N, rank]\n        outputIndices[startingIndex * rank + 0] = row;\n        for (let col = 1; col < rank; ++col) {\n          outputIndices[startingIndex * rank + col] = 0;\n        }\n        outputValues[startingIndex] = defaultValue;\n      }\n    }\n    return [\n      outputIndices, [fullIndicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseReshapeImpl(\n    inputIndices: TypedArray, inputIndicesShape: number[], inputDType: DataType,\n    inputShape: number[],\n    targetShape: number[]): [TypedArray, number[], number[]] {\n  const denseSize = util.sizeFromShape(inputShape);\n  const nnz = inputIndicesShape[0];\n  const outputRank = targetShape.length;\n\n  // Compute the output shape. Determine product of specified dimensions, and\n  // find the index of the unspecified one.\n  const outputShape: number[] = [];\n  let product = 1;\n  let unknownIndex = -1;\n  for (let d = 0; d < outputRank; ++d) {\n    const size = targetShape[d];\n    if (size === -1) {\n      if (unknownIndex !== -1) {\n        throw new Error(\n            backend_util\n                .getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(\n                    unknownIndex, d));\n      }\n      unknownIndex = d;\n      outputShape.push(1);\n    } else {\n      if (size < 0) {\n        throw new Error(\n            backend_util.getSparseReshapeNegativeOutputDimErrorMessage(\n                d, size));\n      }\n      product *= size;\n      outputShape.push(size);\n    }\n  }\n  if (unknownIndex !== -1) {\n    if (product <= 0) {\n      throw new Error(\n          backend_util.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());\n    }\n    const missing = Math.trunc(denseSize / product);\n    if (product * missing !== denseSize) {\n      throw new Error(\n          backend_util.getSparseReshapeInputOutputMultipleErrorMessage(\n              inputShape, outputShape));\n    }\n\n    outputShape[unknownIndex] = missing;\n  }\n  const outputSize = util.sizeFromShape(outputShape);\n  if (outputSize !== denseSize) {\n    throw new Error(\n        backend_util.getSparseReshapeInputOutputMismatchErrorMessage(\n            inputShape, outputShape));\n  }\n\n  const inputRank = inputShape.length;\n  const inputStrides: number[] = [];\n  if (inputRank > 0) {\n    inputStrides[inputRank - 1] = 1;\n    for (let d = inputRank - 2; d >= 0; --d) {\n      inputStrides[d] = inputStrides[d + 1] * inputShape[d + 1];\n    }\n  }\n\n  const outputStrides: number[] = [];\n  if (outputRank > 0) {\n    outputStrides[outputRank - 1] = 1;\n    for (let d = outputRank - 2; d >= 0; --d) {\n      outputStrides[d] = outputStrides[d + 1] * outputShape[d + 1];\n    }\n  }\n\n  const newIndices =\n      util.getArrayFromDType(inputDType, nnz * outputRank) as TypedArray;\n  for (let i = 0; i < nnz; ++i) {\n    let id = 0;\n    for (let j = 0; j < inputRank; ++j) {\n      // inputIndices is a 2d tensor with shape of [nnz, inputRank]\n      id += inputIndices[i * inputRank + j] * inputStrides[j];\n    }\n    for (let j = 0; j < outputRank; ++j) {\n      // newIndices is a 2d tensor with shape of [nnz, outputRank]\n      newIndices[i * outputRank + j] = Math.trunc(id / outputStrides[j]);\n      id %= outputStrides[j];\n    }\n  }\n  return [newIndices, [nnz, outputRank], outputShape];\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseSegmentReductionImpl(\n    input: TypedArray, inputShape: number[], inputDType: DataType,\n    indices: TypedArray, segmentIds: TypedArray, isMean = false,\n    defaultValue = 0): [TypedArray, number[]] {\n  const numIndices = indices.length;\n\n  // Flatten the array to two dimensions\n  const inputFlat: number[] = [inputShape[0], input.length / inputShape[0]];\n  const numCol = inputFlat[1];\n  // Note that the current implementation assumes that segmentIds values are\n  // sorted.\n  const lastSegmentIdPlusOne =\n      numIndices > 0 ? segmentIds[numIndices - 1] + 1 : 0;\n  const outputRows = lastSegmentIdPlusOne;\n\n  if (outputRows < 0) {\n    throw new Error(\n        backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());\n  }\n\n  const outputShape = inputShape.slice();\n  outputShape[0] = outputRows;\n\n  const outputLength =\n      outputShape.reduce((product, value) => product * value, 1);\n  // Output array is initialized with the value 0 by default.\n  const output = util.getArrayFromDType(inputDType, outputLength) as TypedArray;\n\n  // Note that we do not initialize the output buffer with a default value, so\n  // we need to explicitly set missing indices to the default value.\n  if (numIndices === 0) {\n    if (outputRows > 0) {\n      output.fill(defaultValue);\n    }\n    return [output, outputShape];\n  }\n\n  if (outputRows <= 0) {\n    throw new Error(\n        backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());\n  }\n\n  let start = 0, end = 1;\n  // Index from which the output is not initialized.\n  let uninitializedIndex = 0;\n  let outIndex = segmentIds[start];\n\n  while (true) {\n    // We initialize nextIndex to 0 to avoid may be uninitialized warning\n    let nextIndex = 0;\n    if (end < numIndices) {\n      nextIndex = segmentIds[end];\n      if (outIndex === nextIndex) {\n        ++end;\n        continue;\n      }\n      // We have a new segment here.  Verify that the segment ids are growing.\n      if (outIndex >= nextIndex) {\n        throw new Error(backend_util\n            .getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage());\n      }\n    }\n\n    if (outIndex < 0 || outIndex >= outputRows) {\n      throw new Error(\n          backend_util.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(\n              outIndex, outputRows));\n    }\n\n    // If there is a gap between two indices, we need to set that gap to the\n    // default value.\n    if (outIndex > uninitializedIndex) {\n      output.fill(defaultValue, uninitializedIndex * numCol, outIndex * numCol);\n    }\n\n    for (let i = start; i < end; ++i) {\n      const index = indices[i];\n      if (index < 0 || index >= inputFlat[0]) {\n        throw new Error(\n            backend_util.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(\n                i, indices[i], inputFlat[0]));\n      }\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] += input[index * numCol + j];\n      }\n    }\n\n    if (isMean) {\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] /= end - start;\n      }\n    }\n\n    start = end;\n    ++end;\n    uninitializedIndex = outIndex + 1;\n    outIndex = nextIndex;\n    if (end > numIndices) {\n      break;\n    }\n  }\n\n  // Fill the gap at the end with the default value.\n  if (uninitializedIndex < outputRows) {\n    output.fill(defaultValue, uninitializedIndex * numCol, outputRows * numCol);\n  }\n\n  return [output, outputShape];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function stridedSliceImpl<R extends Rank>(\n    outShape: number[], xBuf: TensorBuffer<R>, strides: number[],\n    begin: number[]): TensorBuffer<R> {\n  const outBuf = buffer(outShape, xBuf.dtype);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const loc = outBuf.indexToLoc(i);\n\n    const newLoc: number[] = new Array(loc.length);\n    for (let j = 0; j < newLoc.length; j++) {\n      newLoc[j] = loc[j] * strides[j] + begin[j];\n    }\n    outBuf.set(xBuf.get(...newLoc), ...loc);\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function stringToHashBucketFastImpl(\n    input: Uint8Array[], numBuckets: number): TypedArray {\n  const output = util.getArrayFromDType('int32', input.length) as TypedArray;\n\n  for (let i = 0; i < input.length; ++i) {\n    output[i] =\n        util.fingerPrint64(input[i]).modulo(numBuckets).getLowBitsUnsigned();\n  }\n\n  return output;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\n/**\n * An implementation of the tile kernel shared between webgl and cpu for string\n * tensors only.\n */\n\nexport function tileImpl<R extends Rank>(\n    xBuf: TensorBuffer<R, DataType>,\n    reps: number[]): TensorBuffer<R, DataType> {\n  const newShape: number[] = new Array(xBuf.rank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = xBuf.shape[i] * reps[i];\n  }\n  const result = buffer(newShape, xBuf.dtype);\n  for (let i = 0; i < result.values.length; ++i) {\n    const newLoc = result.indexToLoc(i);\n\n    const originalLoc: number[] = new Array(xBuf.rank);\n    for (let j = 0; j < originalLoc.length; j++) {\n      originalLoc[j] = newLoc[j] % xBuf.shape[j];\n    }\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    result.values[i] = xBuf.values[originalIndex];\n  }\n  return result as TensorBuffer<R, DataType>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {util} from '@tensorflow/tfjs-core';\n\nexport function transposeImpl(\n    xVals: TypedArray, xShape: number[], dtype: DataType, perm: number[],\n    newShape: number[]): TypedArray {\n  const xRank = xShape.length;\n  const xSize = util.sizeFromShape(xShape);\n  const xStrides = util.computeStrides(xShape);\n  const newStrides = util.computeStrides(newShape);\n\n  const result = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(newShape));\n\n  for (let i = 0; i < xSize; ++i) {\n    const loc = util.indexToLoc(i, xRank, xStrides);\n\n    // Permute location.\n    const newLoc: number[] = new Array(loc.length);\n    for (let i = 0; i < newLoc.length; i++) {\n      newLoc[i] = loc[perm[i]];\n    }\n\n    const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n    result[newIndex] = xVals[i];\n  }\n  return result;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendValues, DataType, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function uniqueImpl(\n    values: BackendValues, axis: number, shape: number[], dtype: DataType): {\n  outputValues: BackendValues,\n  outputShape: number[],\n  indices: BackendValues\n} {\n  // Normalize and validate axis.\n  const $axis = util.parseAxisParam(axis, shape)[0];\n\n  // Calculate the new shape that is suitable for extracting data along the\n  // given axis.\n  //\n  // The rank is 3.\n  // The size of the 1st dimension is the size of all the axes < the given axis.\n  // The size of the 2nd dimension is the same as the size of the given axis.\n  // The size of the 3rd dimension is the size of all the axes > the given axis.\n  //\n  // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\n  // newShape would be: [2*3, 5, 4].\n  //\n  // Note that this is not the final output shape. This will be the shape for an\n  // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\n  // values along the given axis. To demonstrate how it works, consider the\n  // following example:\n  //\n  // Input: a 3D tensor, with shape [1, 2, 3]\n  // [\n  //   [\n  //      [1,2,3],\n  //      [4,5,6]\n  //   ]\n  // ]\n  // Axis: 2 (the last axis).\n  // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\n  //\n  // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\n  // 1*2. The re-shaped data would look like:\n  //\n  // [\n  //   [\n  //     [1], [2], [3]\n  //   ],\n  //   [\n  //     [4], [5], [6]\n  //   ]\n  // ]\n  //\n  // Then, we can construct a 3-level nested loop by the following dimension\n  // order to extract the values along the axis (dimension1):\n  // i: dimension1       // 0,1,2 (newShape[1])\n  //   m: dimension0     // 0,1   (newShape[0])\n  //     n: dimension2   // 0     (newShape[2])\n  //\n  //                       m, i, n\n  //                      ---------\n  // Iteration 0: data at [0, 0, 0] => \"1\"\n  // Iteration 1: data at [1, 0, 0] => \"4\"\n  // We got [1,4].\n  // Iteration 2: data at [0, 1, 0] => \"2\"\n  // Iteration 3: data at [1, 1, 0] => \"5\"\n  // We got [2,5].\n  // Iteration 4: data at [0, 2, 0] => \"3\"\n  // Iteration 5: data at [1, 2, 0] => \"6\"\n  // We got [3,6].\n  const newShape = [1, shape[0], 1];\n  for (let i = 0; i < $axis; i++) {\n    newShape[0] *= shape[i];\n  }\n  newShape[1] = shape[$axis];\n  for (let i = $axis + 1; i < shape.length; i++) {\n    newShape[2] *= shape[i];\n  }\n\n  // A map from unique elements (their string representations) to their values\n  // in \"indices\" (below).\n  const uniqueElements: {[key: string]: number} = {};\n  // The indices of each unique element in the original tensor along the given\n  // axis. It is 1D and has the same size as the given axis.\n  const indices = new Int32Array(shape[$axis]);\n  // Create a buffer so we can easily extract value at a given location.\n  const inputBuffer = new TensorBuffer(newShape, dtype, values as TypedArray);\n  // The indices along the given axis that have unique elements. This is a\n  // de-duped version of \"indices\" above.\n  const uniqueIndices: number[] = [];\n  const is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n  for (let i = 0; i < shape[$axis]; i++) {\n    // Extract values along the axis.\n    let element: string;\n    if (is1DTensor) {\n      // Fast path for 1D tensor input.\n      element = values[i].toString();\n    } else {\n      const axisValues = [];\n      for (let m = 0; m < newShape[0]; m++) {\n        for (let n = 0; n < newShape[2]; n++) {\n          axisValues.push(inputBuffer.get(m, i, n));\n        }\n      }\n      element = axisValues.join(',');\n    }\n\n    // Dedup and update various indices.\n    if (uniqueElements[element] !== undefined) {\n      indices[i] = uniqueElements[element];\n    } else {\n      const uniqueIndex = Object.keys(uniqueElements).length;\n      uniqueElements[element] = uniqueIndex;\n      indices[i] = uniqueIndex;\n      uniqueIndices.push(i);\n    }\n  }\n\n  // Now we know where each of the unique elements are located along the axis\n  // (uniqueIndices). Extract them from input buffer and store them in the\n  // output buffer.\n  const outputTmpShape = newShape.slice();\n  outputTmpShape[1] = Object.keys(uniqueElements).length;\n  const outputBuffer = new TensorBuffer(outputTmpShape, dtype);\n  uniqueIndices.forEach((uniqueElementIndex, i) => {\n    for (let m = 0; m < newShape[0]; m++) {\n      for (let n = 0; n < newShape[2]; n++) {\n        outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);\n      }\n    }\n  });\n\n  // The output shape can be calculated from the input shape with the size of\n  // the given axis replaced by the number of unique elements along that axis.\n  const outputShape = shape.slice();\n  outputShape[$axis] = outputTmpShape[1];\n\n  return {\n    outputValues: outputBuffer.values as BackendValues,\n    outputShape,\n    indices,\n  };\n}\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import shared functionality from tfjs-backend-cpu without triggering\n// side effects.\n// tslint:disable-next-line: no-imports-from-dist\nimport * as shared from '@tensorflow/tfjs-backend-cpu/dist/shared';\n// tslint:disable-next-line: no-imports-from-dist\nimport {SimpleBinaryKernelImpl} from '@tensorflow/tfjs-backend-cpu/dist/shared';\n// tslint:disable-next-line: no-imports-from-dist\nimport {SimpleUnaryImpl} from '@tensorflow/tfjs-backend-cpu/dist/utils/unary_types';\n\nexport type SimpleBinaryKernelImplCPU = SimpleBinaryKernelImpl;\nexport type SimpleUnaryKernelImplCPU = SimpleUnaryImpl;\nconst {\n  addImpl: addImplCPU,\n  bincountImpl: bincountImplCPU,\n  bincountReduceImpl: bincountReduceImplCPU,\n  ceilImpl: ceilImplCPU,\n  concatImpl: concatImplCPU,\n  equalImpl: equalImplCPU,\n  expImpl: expImplCPU,\n  expm1Impl: expm1ImplCPU,\n  floorImpl: floorImplCPU,\n  gatherNdImpl: gatherNdImplCPU,\n  gatherV2Impl: gatherV2ImplCPU,\n  greaterImpl: greaterImplCPU,\n  greaterEqualImpl: greaterEqualImplCPU,\n  lessImpl: lessImplCPU,\n  lessEqualImpl: lessEqualImplCPU,\n  linSpaceImpl: linSpaceImplCPU,\n  logImpl: logImplCPU,\n  maxImpl: maxImplCPU,\n  maximumImpl: maximumImplCPU,\n  minimumImpl: minimumImplCPU,\n  multiplyImpl: multiplyImplCPU,\n  negImpl: negImplCPU,\n  notEqualImpl: notEqualImplCPU,\n  prodImpl: prodImplCPU,\n  rangeImpl: rangeImplCPU,\n  rsqrtImpl: rsqrtImplCPU,\n  scatterImpl: scatterImplCPU,\n  sigmoidImpl: sigmoidImplCPU,\n  simpleAbsImpl: simpleAbsImplCPU,\n  sliceImpl: sliceImplCPU,\n  sparseFillEmptyRowsImpl: sparseFillEmptyRowsImplCPU,\n  sparseReshapeImpl: sparseReshapeImplCPU,\n  sparseSegmentReductionImpl: sparseSegmentReductionImplCPU,\n  sqrtImpl: sqrtImplCPU,\n  stridedSliceImpl: stridedSliceImplCPU,\n  stringNGramsImpl: stringNGramsImplCPU,\n  stringSplitImpl: stringSplitImplCPU,\n  stringToHashBucketFastImpl: stringToHashBucketFastImplCPU,\n  subImpl: subImplCPU,\n  tileImpl: tileImplCPU,\n  topKImpl: topKImplCPU,\n  transposeImpl: transposeImplCPU,\n  uniqueImpl: uniqueImplCPU,\n} = shared;\n\nexport {\n  addImplCPU,\n  bincountImplCPU,\n  bincountReduceImplCPU,\n  ceilImplCPU,\n  concatImplCPU,\n  equalImplCPU,\n  expImplCPU,\n  expm1ImplCPU,\n  floorImplCPU,\n  gatherNdImplCPU,\n  gatherV2ImplCPU,\n  greaterEqualImplCPU,\n  greaterImplCPU,\n  lessEqualImplCPU,\n  lessImplCPU,\n  linSpaceImplCPU,\n  logImplCPU,\n  maxImplCPU,\n  maximumImplCPU,\n  minimumImplCPU,\n  multiplyImplCPU,\n  negImplCPU,\n  notEqualImplCPU,\n  prodImplCPU,\n  scatterImplCPU,\n  sigmoidImplCPU,\n  simpleAbsImplCPU,\n  sliceImplCPU,\n  sparseFillEmptyRowsImplCPU,\n  sparseReshapeImplCPU,\n  sparseSegmentReductionImplCPU,\n  sqrtImplCPU,\n  stridedSliceImplCPU,\n  stringNGramsImplCPU,\n  stringSplitImplCPU,\n  stringToHashBucketFastImplCPU,\n  subImplCPU,\n  rangeImplCPU,\n  rsqrtImplCPU,\n  tileImplCPU,\n  topKImplCPU,\n  transposeImplCPU,\n  uniqueImplCPU,\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class PackProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = false;\n  packedOutput = true;\n  enableShapeUniforms: boolean;\n  rank: number;\n\n  constructor(\n      outputShape:\n          number[]) {  // TODO(https://github.com/tensorflow/tfjs/issues/893):\n                       // Only input / output 3D tensors.\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    if (this.rank === 0) {\n      this.userCode = `\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      `;\n    } else {\n      const channels = getChannels('rc', this.rank);\n      const dtype = getCoordsDataType(this.rank);\n      const outOfBoundsCondition = this.getOutOfBoundsCondition(channels);\n      const setup = this.getSetup(channels);\n      const output = this.getOutput(channels);\n\n      this.userCode = `\n        void main() {\n          ${dtype} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            setOutput(vec4(0));\n          } else {\n            ${setup}\n\n            setOutput(vec4(${output}));\n          }\n        }\n      `;\n    }\n  }\n\n  private getSourceCoordsArr(dims: string[]): string[] {\n    const coords = [];\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        let coord = `${row === 0 ? 'r' : 'rp1'}, ${col === 0 ? 'c' : 'cp1'}`;\n\n        for (let d = 2; d < this.rank; d++) {\n          coord = `${dims[dims.length - 1 - d]},` + coord;\n        }\n\n        coords.push(coord);\n      }\n    }\n    return coords;\n  }\n\n  private getOutOfBoundsCondition(dims: string[]): string {\n    if (this.rank === 1) {\n      return `rc > ${\n          this.enableShapeUniforms ? 'outShape' : this.outputShape[0]}`;\n    }\n\n    let cond = '';\n    for (let i = this.rank - 2; i < this.rank; i++) {\n      cond += `${dims[i]} >= ${\n          this.enableShapeUniforms ? `outShape[${i}]` : this.outputShape[i]}`;\n      if (i < this.rank - 1) {\n        cond += '||';\n      }\n    }\n\n    return cond;\n  }\n\n  private getSetup(dims: string[]): string {\n    if (this.rank === 1) {\n      return '';\n    }\n\n    const innerDims = dims.slice(-2);\n    const col = this.enableShapeUniforms ? `outShape[${this.rank} - 1]` :\n                                           this.outputShape[this.rank - 1];\n    const row = this.enableShapeUniforms ? `outShape[${this.rank} - 2]` :\n                                           this.outputShape[this.rank - 2];\n\n    return `\n      int r = ${innerDims[0]};\n      int c = ${innerDims[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${col};\n      bool rEdge = rp1 >= ${row};\n    `;\n  }\n\n  private getOutput(dims: string[]): string {\n    const sourceCoords = this.getSourceCoordsArr(dims);\n    if (this.rank === 1) {\n      const outShape =\n          this.enableShapeUniforms ? 'outShape' : this.outputShape[0];\n      return `getA(rc), (rc + 1 >= ${outShape} ? 0. : getA(rc + 1)), 0, 0`;\n    }\n\n    return `getA(${sourceCoords[0]}),\n            cEdge ? 0. : getA(${sourceCoords[1]}),\n            rEdge ? 0. : getA(${sourceCoords[2]}),\n            rEdge || cEdge ? 0. : getA(${sourceCoords[3]})`;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\nexport class ReshapePackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'inputShape', type: 'ivec3' as const }];\n\n  constructor(outputShape: [number, number, number], inputShape: [\n    number, number, number\n  ]) {\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    let mainLoop = ``;\n    for (let i = 0; i < 4; i++) {\n      let thisRC = `thisRC = rc;`;\n      if (i % 2 === 1) {\n        thisRC += `thisRC.z += 1;`;\n      }\n      if (i > 1) {\n        thisRC += `thisRC.y += 1;`;\n      }\n\n      mainLoop += `\n        ${thisRC}\n        ${i > 0 ? `if(thisRC.y < rows && thisRC.z < cols){` : ''}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${i > 0 ? '}' : ''}\n      `;\n    }\n\n    this.userCode = `\n      ${getReshapedInputCoords(inputShape, this.enableShapeUniforms)}\n      ${\n        this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() :\n                                   shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms ? 'outShape[1]' : outputShape[1]};\n        int cols = ${this.enableShapeUniforms ? 'outShape[2]' : outputShape[2]};\n\n        ${mainLoop}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n\nfunction getReshapedInputCoords(\n    shape: [number, number, number], enableShapeUniforms: boolean): string {\n  const coordsFromIndexSnippet = enableShapeUniforms ?\n      shader_util.getLogicalCoordinatesFromFlatIndexByUniform(\n          ['r', 'c', 'd'], 'inputShape') :\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {getInternalFormatForFloat16MatrixTexture, getInternalFormatForFloat16PackedMatrixTexture, getInternalFormatForFloat32MatrixTexture, getInternalFormatForPackedMatrixTexture, getInternalFormatForUnsignedBytesMatrixTexture} from './gpgpu_util';\nimport {getPackedMatrixTextureShapeWidthHeight, getUnpackedMatrixTextureShapeWidthHeight, PhysicalTextureType, Texture, TextureConfig, TextureUsage} from './tex_util';\n\nexport class TextureManager {\n  private numUsedTextures = 0;\n  private numFreeTextures = 0;\n  private _numBytesAllocated = 0;\n  private _numBytesFree = 0;  // How many bytes that have been allocated\n                              // are available for reuse.\n  private freeTextures: {[shape: string]: Texture[]} = {};\n  private logEnabled = false;\n  private usedTextures: {[shape: string]: Texture[]} = {};\n\n  constructor(private gpgpu: GPGPUContext) {}\n\n  acquireTexture(\n      shapeRC: [number, number], usage: TextureUsage,\n      isPacked: boolean): Texture {\n    const physicalTexType = getPhysicalFromLogicalTextureType(usage, isPacked);\n\n    const shapeKey = getKeyFromTextureShape(shapeRC, physicalTexType, isPacked);\n    if (!(shapeKey in this.freeTextures)) {\n      this.freeTextures[shapeKey] = [];\n    }\n    if (!(shapeKey in this.usedTextures)) {\n      this.usedTextures[shapeKey] = [];\n    }\n\n    const texBytes = computeBytes(\n        shapeRC, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig,\n        isPacked);\n\n    if (this.freeTextures[shapeKey].length > 0) {\n      this.numFreeTextures--;\n      this.numUsedTextures++;\n      this._numBytesFree -= texBytes;\n      this.log();\n      const newTexture = this.freeTextures[shapeKey].shift();\n      this.usedTextures[shapeKey].push(newTexture);\n      return newTexture;\n    }\n\n    let newTexture: Texture;\n    if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT32) {\n      newTexture = this.gpgpu.createPackedMatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT16) {\n      newTexture =\n          this.gpgpu.createFloat16PackedMatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT32) {\n      newTexture =\n          this.gpgpu.createFloat32MatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT16) {\n      newTexture =\n          this.gpgpu.createFloat16MatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (\n        physicalTexType === PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE) {\n      newTexture =\n          this.gpgpu.createUnsignedBytesMatrixTexture(shapeRC[0], shapeRC[1]);\n    }\n    this.usedTextures[shapeKey].push(newTexture);\n\n    this.numUsedTextures++;\n    this._numBytesAllocated += texBytes;\n    this.log();\n\n    return newTexture;\n  }\n\n  releaseTexture(\n      texture: Texture, shape: [number, number], logicalTexType: TextureUsage,\n      isPacked: boolean): void {\n    if (this.freeTextures == null) {\n      // Already disposed.\n      return;\n    }\n    const physicalTexType =\n        getPhysicalFromLogicalTextureType(logicalTexType, isPacked);\n    const shapeKey = getKeyFromTextureShape(shape, physicalTexType, isPacked);\n    if (!(shapeKey in this.freeTextures)) {\n      this.freeTextures[shapeKey] = [];\n    }\n\n    const texBytes = computeBytes(\n        shape, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig,\n        isPacked);\n    const deleteTexThreshold = env().get('WEBGL_DELETE_TEXTURE_THRESHOLD');\n    if (deleteTexThreshold !== -1 &&\n        this._numBytesAllocated > deleteTexThreshold) {\n      this.gpgpu.deleteMatrixTexture(texture.texture);\n      this._numBytesAllocated -= texBytes;\n    } else {\n      this.freeTextures[shapeKey].push(texture);\n      this.numFreeTextures++;\n      this._numBytesFree += texBytes;\n    }\n\n    this.numUsedTextures--;\n\n    const texList = this.usedTextures[shapeKey];\n    const texIndex = texList.indexOf(texture);\n    if (texIndex < 0) {\n      throw new Error(\n          'Cannot release a texture that was never provided by this ' +\n          'texture manager');\n    }\n    texList.splice(texIndex, 1);\n    this.log();\n  }\n\n  private log() {\n    if (!this.logEnabled) {\n      return;\n    }\n    const total = this.numFreeTextures + this.numUsedTextures;\n    console.log(\n        'Free/Used', `${this.numFreeTextures} / ${this.numUsedTextures}`,\n        `(${total})`);\n    const freeRatio = this._numBytesFree / this._numBytesAllocated;\n    console.log(`Bytes allocated: ${this._numBytesAllocated}`);\n    console.log(`Bytes unused: ${this._numBytesFree} (${\n        Math.round(100 * freeRatio)}%)`);\n  }\n\n  get numBytesAllocated(): number {\n    return this._numBytesAllocated;\n  }\n\n  get numBytesFree(): number {\n    return this._numBytesFree;\n  }\n\n  getNumUsedTextures(): number {\n    return this.numUsedTextures;\n  }\n\n  getNumFreeTextures(): number {\n    return this.numFreeTextures;\n  }\n\n  dispose() {\n    if (this.freeTextures == null) {\n      // Already disposed.\n      return;\n    }\n    for (const texShape in this.freeTextures) {\n      this.freeTextures[texShape].forEach(tex => {\n        this.gpgpu.deleteMatrixTexture(tex.texture);\n      });\n    }\n    for (const texShape in this.usedTextures) {\n      this.usedTextures[texShape].forEach(tex => {\n        this.gpgpu.deleteMatrixTexture(tex.texture);\n      });\n    }\n    this.freeTextures = null;\n    this.usedTextures = null;\n    this.numUsedTextures = 0;\n    this.numFreeTextures = 0;\n    this._numBytesAllocated = 0;\n    this._numBytesFree = 0;\n  }\n}\n\nfunction numBytesForInternalFormat(\n    gl: WebGLRenderingContext, internalFormat: number): number {\n  // tslint:disable-next-line:no-any\n  const glany = gl as any;\n  if (internalFormat === glany.R32F) {\n    return 4;\n  } else if (internalFormat === glany.R16F) {\n    return 2;\n  } else if (internalFormat === glany.RGBA32F) {\n    return 16;\n  } else if (internalFormat === gl.RGBA) {\n    return 16;\n  } else if (internalFormat === glany.RGBA16F) {\n    return 8;\n  } else if (internalFormat === glany.RGBA8) {\n    return 4;\n  }\n  throw new Error(`Unknown internal format ${internalFormat}`);\n}\n\nexport function computeBytes(\n    shape: [number, number], physicalTexType: PhysicalTextureType,\n    gl: WebGLRenderingContext, textureConfig: TextureConfig,\n    isPacked: boolean): number {\n  // It is not possible to infer packed status from the texture type because\n  // depending on the textureConfig, different  texture types may resolve to the\n  // same internal format (e.g. in WebGL1, the internal format for\n  // UNPACKED_FLOAT16 textures is gl.RGBA). Therefore we pass in `isPacked`\n  // explicitly.\n  const internalFormat =\n      internalFormatForPhysicalTexType(physicalTexType, textureConfig);\n\n  let numElements: number;\n  if (isPacked) {\n    const [packedWidth, packedHeight] =\n        getPackedMatrixTextureShapeWidthHeight(shape[0], shape[1]);\n    numElements = packedWidth * packedHeight;\n\n  } else {\n    const [width, height] =\n        getUnpackedMatrixTextureShapeWidthHeight(shape[0], shape[1]);\n    numElements = width * height;\n  }\n\n  const bytesPerElement = numBytesForInternalFormat(gl, internalFormat);\n  return numElements * bytesPerElement;\n}\n\nfunction internalFormatForPhysicalTexType(\n    physicalTexType: PhysicalTextureType,\n    textureConfig: TextureConfig): number {\n  switch (physicalTexType) {\n    case PhysicalTextureType.PACKED_2X2_FLOAT32:\n      return getInternalFormatForPackedMatrixTexture(textureConfig);\n    case PhysicalTextureType.PACKED_2X2_FLOAT16:\n      return getInternalFormatForFloat16PackedMatrixTexture(textureConfig);\n    case PhysicalTextureType.UNPACKED_FLOAT32:\n      return getInternalFormatForFloat32MatrixTexture(textureConfig);\n    case PhysicalTextureType.UNPACKED_FLOAT16:\n      return getInternalFormatForFloat16MatrixTexture(textureConfig);\n    case PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE:\n      return getInternalFormatForUnsignedBytesMatrixTexture(textureConfig);\n    default:\n      throw new Error(`Unknown physical texture type ${physicalTexType}`);\n  }\n}\n\nfunction getPhysicalTextureForRendering(isPacked: boolean):\n    PhysicalTextureType {\n  if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED')) {\n    if (isPacked) {\n      return PhysicalTextureType.PACKED_2X2_FLOAT32;\n    }\n    return PhysicalTextureType.UNPACKED_FLOAT32;\n  }\n\n  if (isPacked) {\n    return PhysicalTextureType.PACKED_2X2_FLOAT16;\n  }\n  return PhysicalTextureType.UNPACKED_FLOAT16;\n}\n\nfunction getPhysicalFromLogicalTextureType(\n    logicalTexType: TextureUsage, isPacked: boolean): PhysicalTextureType {\n  if (logicalTexType === TextureUsage.UPLOAD) {\n    return PhysicalTextureType.PACKED_2X2_FLOAT32;\n  } else if (logicalTexType === TextureUsage.RENDER || logicalTexType == null) {\n    return getPhysicalTextureForRendering(isPacked);\n  } else if (\n      logicalTexType === TextureUsage.DOWNLOAD ||\n      logicalTexType === TextureUsage.PIXELS) {\n    return PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE;\n  }\n  throw new Error(`Unknown logical texture type ${logicalTexType}`);\n}\n\nfunction getKeyFromTextureShape(\n    shapeRowsCol: [number, number], physicalTexType: PhysicalTextureType,\n    isPacked: boolean): string {\n  return `${shapeRowsCol[0]}_${shapeRowsCol[1]}_${physicalTexType}_${isPacked}`;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class UnaryOpProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  enableShapeUniforms: boolean;\n\n  constructor(aShape: number[], opSnippet: string) {\n    this.outputShape = aShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    this.userCode = `\n      float unaryOperation(float x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n  }\n}\n\nexport const CHECK_NAN_SNIPPET = `if (isnan(x)) return x;`;\n\nexport const LINEAR = `return x;`;\n\nexport const ABS = `return abs(x);`;\n\nexport function STEP(alpha = 0.0) {\n  return CHECK_NAN_SNIPPET + `\n    return x > 0.0 ? 1.0 : float(${alpha});\n  `;\n}\n\nexport const ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;\nexport const RELU = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : x;\n`;\n\nexport const RELU6 = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n`;\n\nexport const CLONE = 'return x;';\n\nexport const SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport const LINEAR = `return x;`;\n\nexport const ELU = `\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n`;\n\nexport const RELU = `\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const RELU6 = `\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;\n\nexport class UnaryOpPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  outputShape: number[];\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(aShape: number[], opSnippet: string) {\n    this.outputShape = aShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    this.userCode = `\n      vec4 unaryOperation(vec4 x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport {getChannels, getSourceCoords} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class UnpackProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = false;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n\n  constructor(outputShape: number[]) {\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const rank = outputShape.length;\n\n    const channels = getChannels('rc', rank);\n    const dtype = getCoordsDataType(rank);\n    const sourceCoords = getSourceCoords(rank, channels);\n    const innerDims = channels.slice(-2);\n    const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n\n    this.userCode = `\n      void main() {\n        ${dtype} rc = getOutputCoords();\n        vec4 packedInput = getA(${sourceCoords});\n\n        setOutput(getChannel(packedInput, ${coords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import webgl flags.\nimport './flags_webgl';\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport {backend_util, BackendValues, buffer, DataId, DataStorage, DataToGPUWebGLOption, DataType, engine, env, GPUData, kernel_impls, KernelBackend, MemoryInfo, nextFrame, NumericDataType, Rank, RecursiveArray, scalar, ShapeMap, Tensor, Tensor2D, TensorBuffer, TensorInfo, tidy, TimingInfo, TypedArray, util} from '@tensorflow/tfjs-core';\nimport {getWebGLContext} from './canvas_util';\nimport {DecodeMatrixProgram} from './decode_matrix_gpu';\nimport {DecodeMatrixPackedProgram} from './decode_matrix_packed_gpu';\nimport {EncodeFloatProgram} from './encode_float_gpu';\nimport {EncodeFloatPackedProgram} from './encode_float_packed_gpu';\nimport {EncodeMatrixProgram} from './encode_matrix_gpu';\nimport {EncodeMatrixPackedProgram} from './encode_matrix_packed_gpu';\nimport {GPGPUContext} from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport {getUniformLocations, GPGPUBinary, GPGPUProgram, TensorData} from './gpgpu_math';\nimport {simpleAbsImplCPU} from './kernel_utils/shared';\nimport {PackProgram} from './pack_gpu';\nimport {ReshapePackedProgram} from './reshape_packed_gpu';\nimport * as tex_util from './tex_util';\nimport {Texture, TextureData, TextureUsage} from './tex_util';\nimport {TextureManager} from './texture_manager';\nimport * as unary_op from './unaryop_gpu';\nimport {UnaryOpProgram} from './unaryop_gpu';\nimport {UnaryOpPackedProgram} from './unaryop_packed_gpu';\nimport {UnpackProgram} from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\n\nconst whereImpl = kernel_impls.whereImpl;\n\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\n\ntype KernelInfo = {\n  name: string; query: Promise<number>;\n};\n\nexport type TimerNode = RecursiveArray<KernelInfo>|KernelInfo;\nexport interface CPUTimerQuery {\n  startMs: number;\n  endMs?: number;\n}\n\nexport interface WebGLMemoryInfo extends MemoryInfo {\n  numBytesInGPU: number;\n  // Tracks the total number of bytes allocated on the GPU, accounting for the\n  // physical texture type.\n  numBytesInGPUAllocated: number;\n  // Tracks byte size of textures that were created and then made available for\n  // reuse (disposed).\n  numBytesInGPUFree: number;\n  unreliable: boolean;\n}\n\nexport interface WebGLTimingInfo extends TimingInfo {\n  uploadWaitMs: number;\n  downloadWaitMs: number;\n}\n\nconst binaryCaches: {[webGLVersion: string]: {[key: string]: GPGPUBinary}} = {};\n\nexport function getBinaryCache(webGLVersion: number) {\n  if (webGLVersion in binaryCaches) {\n    return binaryCaches[webGLVersion];\n  }\n  binaryCaches[webGLVersion] = {};\n  return binaryCaches[webGLVersion];\n}\n\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD =\n    env().getNumber('CPU_HANDOFF_SIZE_THRESHOLD');\n\n// Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\nconst BEFORE_PAGING_CONSTANT = 600;\nfunction numMBBeforeWarning(): number {\n  if (env().global.screen == null) {\n    return 1024;  // 1 GB.\n  }\n  return (env().global.screen.height * env().global.screen.width *\n          window.devicePixelRatio) *\n      BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\n\nexport class MathBackendWebGL extends KernelBackend {\n  texData: DataStorage<TextureData>;\n  gpgpu: GPGPUContext;\n\n  private static nextDataId = 0;\n  private nextDataId(): number {\n    return MathBackendWebGL.nextDataId++;\n  }\n  // Maps data ids that have a pending read operation, to list of subscribers.\n  private pendingRead = new WeakMap<DataId, Array<(arr: TypedArray) => void>>();\n  // List of data ids that are scheduled for disposal, but are waiting on a\n  // pending read operation.\n  private pendingDisposal = new WeakSet<DataId>();\n\n  // Used to count the number of 'shallow' sliced tensors that point to the\n  // same data id.\n  dataRefCount = new WeakMap<DataId, number>();\n  private numBytesInGPU = 0;\n\n  private canvas: HTMLCanvasElement|OffscreenCanvas;\n\n  private programTimersStack: TimerNode[];\n  private activeTimers: TimerNode[];\n  // Accumulated time spent (including blocking) in uploading data to webgl.\n  private uploadWaitMs = 0;\n  // Accumulated time spent (including blocking in downloading data from webgl.\n  private downloadWaitMs = 0;\n\n  // record the last manual GL Flush time.\n  private lastGlFlushTime = 0;\n\n  // Number of bits of precision of this backend.\n  private floatPrecisionValue: 32|16;\n\n  private textureManager: TextureManager;\n  private binaryCache: {[key: string]: GPGPUBinary};\n  private gpgpuCreatedLocally: boolean;\n  private numMBBeforeWarning: number;\n  private warnedAboutMemory = false;\n\n  constructor(gpuResource?: GPGPUContext|HTMLCanvasElement|OffscreenCanvas) {\n    super();\n    if (!env().getBool('HAS_WEBGL')) {\n      throw new Error('WebGL is not supported on this device');\n    }\n\n    let newGPGPU;\n    if (gpuResource != null) {\n      if (gpuResource instanceof GPGPUContext) {\n        newGPGPU = gpuResource;\n      } else {\n        const gl =\n            getWebGLContext(env().getNumber('WEBGL_VERSION'), gpuResource);\n        newGPGPU = new GPGPUContext(gl);\n      }\n      this.binaryCache = {};\n      this.gpgpuCreatedLocally = false;\n    } else {\n      const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n      newGPGPU = new GPGPUContext(gl);\n      this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n      this.gpgpuCreatedLocally = true;\n    }\n\n    this.gpgpu = newGPGPU;\n    this.canvas = this.gpgpu.gl.canvas;\n    this.textureManager = new TextureManager(this.gpgpu);\n    this.numMBBeforeWarning = numMBBeforeWarning();\n    this.texData = new DataStorage(this, engine());\n  }\n\n  numDataIds() {\n    return this.texData.numDataIds() - this.pendingDeletes;\n  }\n\n  write(values: BackendValues, shape: number[], dtype: DataType): DataId {\n    if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') ||\n        env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64' && values != null) {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    const dataId = {id: this.nextDataId()};\n    this.texData.set(\n        dataId,\n        {shape, dtype, values, usage: TextureUsage.UPLOAD, refCount: 1});\n    return dataId;\n  }\n\n  /** Return refCount of a `TensorData`. */\n  refCount(dataId: DataId): number {\n    if (this.texData.has(dataId)) {\n      const tensorData = this.texData.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n\n  /** Increase refCount of a `TextureData`. */\n  incRef(dataId: DataId): void {\n    const texData = this.texData.get(dataId);\n    texData.refCount++;\n  }\n\n  /** Decrease refCount of a `TextureData`. */\n  decRef(dataId: DataId): void {\n    if (this.texData.has(dataId)) {\n      const texData = this.texData.get(dataId);\n      texData.refCount--;\n    }\n  }\n\n  move(\n      dataId: DataId, values: BackendValues, shape: number[], dtype: DataType,\n      refCount: number): void {\n    if (env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64') {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    this.texData.set(\n        dataId, {shape, dtype, values, usage: TextureUsage.UPLOAD, refCount});\n  }\n\n  disposeIntermediateTensorInfo(tensorInfo: TensorInfo): void {\n    this.disposeData(tensorInfo.dataId);\n  }\n\n  readSync(dataId: DataId): BackendValues {\n    const texData = this.texData.get(dataId);\n    const {values, dtype, complexTensorInfos, slice, shape, isPacked} = texData;\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const data = this.readSync(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n    if (dtype === 'string') {\n      return values;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let result: Float32Array;\n    if (dtype === 'complex64') {\n      const realValues =\n          this.readSync(complexTensorInfos.real.dataId) as Float32Array;\n      const imagValues =\n          this.readSync(complexTensorInfos.imag.dataId) as Float32Array;\n      result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    } else {\n      result = this.getValuesFromTexture(dataId);\n    }\n\n    if (shouldTimeProgram) {\n      this.downloadWaitMs += util.now() - start;\n    }\n    return this.convertAndCacheOnCPU(dataId, result);\n  }\n\n  async read(dataId: DataId): Promise<BackendValues> {\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<TypedArray>(resolve => subscribers.push(resolve));\n    }\n    const texData = this.texData.get(dataId);\n    const {values, shape, slice, dtype, complexTensorInfos, isPacked} = texData;\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const data = this.read(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n\n    if (env().getBool('DEBUG')) {\n      // getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') caused a blocking GPU call.\n      // For performance reason, only check it for debugging. In production,\n      // it doesn't handle this use case anyway, so behavior is not changed.\n      if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') &&\n          env().getNumber('WEBGL_VERSION') === 2) {\n        throw new Error(\n            `tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` +\n            `WEBGL_VERSION=2 not yet supported.`);\n      }\n    }\n\n    let buffer: WebGLBuffer = null;\n    let tmpDownloadTarget: TensorInfo;\n\n    if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n      // Possibly copy the texture into a buffer before inserting a fence.\n      tmpDownloadTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n\n      buffer = this.gpgpu.createBufferFromTexture(\n          tmpData.texture.texture, ...tex_util.getDenseTexShape(shape));\n    }\n\n    this.pendingRead.set(dataId, []);\n\n    if (dtype !== 'complex64') {\n      // Create a fence and wait for it to resolve.\n      await this.gpgpu.createAndWaitForFence();\n    }\n\n    // Download the values from the GPU.\n    let vals: Float32Array;\n    if (dtype === 'complex64') {\n      const ps = await Promise.all([\n        this.read(complexTensorInfos.real.dataId),\n        this.read(complexTensorInfos.imag.dataId)\n      ]);\n\n      const realValues = ps[0];\n      const imagValues = ps[1];\n      vals = backend_util.mergeRealAndImagArrays(\n          realValues as Float32Array, imagValues as Float32Array);\n    } else if (buffer == null) {\n      vals = this.getValuesFromTexture(dataId);\n    } else {\n      const size = util.sizeFromShape(shape);\n      vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n    }\n    if (tmpDownloadTarget != null) {\n      this.disposeIntermediateTensorInfo(tmpDownloadTarget);\n    }\n    if (buffer != null) {\n      const gl = this.gpgpu.gl;\n      webgl_util.callAndCheck(gl, () => gl.deleteBuffer(buffer));\n    }\n    const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n\n    const subscribers = this.pendingRead.get(dataId);\n    this.pendingRead.delete(dataId);\n\n    // Notify all pending reads.\n    subscribers.forEach(resolve => resolve(dTypeVals));\n    if (this.pendingDisposal.has(dataId)) {\n      this.pendingDisposal.delete(dataId);\n      if (this.disposeData(dataId)) {\n        engine().removeDataId(dataId, this);\n      }\n      this.pendingDeletes--;\n    }\n    return dTypeVals;\n  }\n\n  /**\n   * Read tensor to a new texture that is densely packed for ease of use.\n   * @param dataId The source tensor.\n   * @param options\n   *     customTexShape: Optional. If set, will use the user defined texture\n   *     shape to create the texture.\n   */\n  readToGPU(dataId: DataId, options: DataToGPUWebGLOption = {}): GPUData {\n    const texData = this.texData.get(dataId);\n    const {values, shape, slice, dtype, isPacked, texture} = texData;\n\n    if (dtype === 'complex64') {\n      throw new Error('Does not support reading texture for complex64 dtype.');\n    }\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const gpuResouorce = this.readToGPU(res, options);\n      this.disposeIntermediateTensorInfo(res);\n      return gpuResouorce;\n    }\n\n    if (texture == null) {\n      if (values != null) {\n        throw new Error('Data is not on GPU but on CPU.');\n      } else {\n        throw new Error('There is no data on GPU or CPU.');\n      }\n    }\n\n    // Decode the texture so that it is stored densely (using four channels).\n    const tmpTarget = this.decode(dataId, options.customTexShape);\n\n    // Make engine track this tensor, so that we can dispose it later.\n    const tensorRef = engine().makeTensorFromTensorInfo(tmpTarget);\n\n    const tmpData = this.texData.get(tmpTarget.dataId);\n    return {tensorRef, ...tmpData.texture};\n  }\n\n  bufferSync<R extends Rank, D extends DataType>(t: TensorInfo):\n      TensorBuffer<R, D> {\n    const data = this.readSync(t.dataId);\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        const strings = (data as Uint8Array[]).map(d => util.decodeString(d));\n        return buffer(t.shape as ShapeMap[R], t.dtype, strings) as\n            TensorBuffer<R, D>;\n      } catch {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape as ShapeMap[R], t.dtype, data as TypedArray) as\n        TensorBuffer<R, D>;\n  }\n\n  private checkNumericalProblems(values: BackendValues): void {\n    if (values == null) {\n      return;\n    }\n    for (let i = 0; i < values.length; i++) {\n      const num = values[i] as number;\n      if (!webgl_util.canBeRepresented(num)) {\n        if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n          throw Error(\n              `The value ${num} cannot be represented with your ` +\n              `current settings. Consider enabling float32 rendering: ` +\n              `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n        }\n        throw Error(`The value ${num} cannot be represented on this device.`);\n      }\n    }\n  }\n\n  private getValuesFromTexture(dataId: DataId): Float32Array {\n    const {shape, dtype, isPacked} = this.texData.get(dataId);\n    const size = util.sizeFromShape(shape);\n    if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n      const tmpTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpTarget.dataId);\n      const vals =\n          this.gpgpu\n              .downloadMatrixFromPackedTexture(\n                  tmpData.texture.texture, ...tex_util.getDenseTexShape(shape))\n              .subarray(0, size);\n\n      this.disposeIntermediateTensorInfo(tmpTarget);\n\n      return vals;\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK') && isPacked === true;\n    const outputShape =\n        shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n    const program = shouldUsePackedProgram ?\n        new EncodeFloatPackedProgram(outputShape as [number, number, number]) :\n        new EncodeFloatProgram(outputShape);\n    const output = this.runWebGLProgram(\n        program, [{shape: outputShape, dtype, dataId}], 'float32');\n    const tmpData = this.texData.get(output.dataId);\n    const vals = this.gpgpu\n                     .downloadByteEncodedFloatMatrixFromOutputTexture(\n                         tmpData.texture.texture, tmpData.texShape[0],\n                         tmpData.texShape[1])\n                     .subarray(0, size);\n    this.disposeIntermediateTensorInfo(output);\n\n    return vals;\n  }\n\n  timerAvailable(): boolean {\n    return env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0;\n  }\n\n  time(f: () => void): Promise<WebGLTimingInfo> {\n    const oldActiveTimers = this.activeTimers;\n    const newActiveTimers: TimerNode[] = [];\n\n    let outerMostTime = false;\n    if (this.programTimersStack == null) {\n      this.programTimersStack = newActiveTimers;\n      outerMostTime = true;\n    } else {\n      this.activeTimers.push(newActiveTimers);\n    }\n    this.activeTimers = newActiveTimers;\n\n    f();\n\n    // needing to split these up because util.flatten only accepts certain types\n    const flattenedActiveTimerQueries =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.query))\n            .filter(d => d != null);\n    const flattenedActiveTimerNames =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.name))\n            .filter(d => d != null);\n\n    this.activeTimers = oldActiveTimers;\n\n    if (outerMostTime) {\n      this.programTimersStack = null;\n    }\n\n    const res: WebGLTimingInfo = {\n      uploadWaitMs: this.uploadWaitMs,\n      downloadWaitMs: this.downloadWaitMs,\n      kernelMs: null,\n      wallMs: null  // will be filled by the engine\n    };\n\n    return (async () => {\n      if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') >\n          0) {\n        const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n\n        res['kernelMs'] = util.sum(kernelMs);\n        res['getExtraProfileInfo'] = () =>\n            kernelMs\n                .map((d, i) => ({name: flattenedActiveTimerNames[i], ms: d}))\n                .map(d => `${d.name}: ${d.ms}`)\n                .join(', ');\n      } else {\n        res['kernelMs'] = {\n          error: 'WebGL query timers are not supported in this environment.'\n        };\n      }\n\n      this.uploadWaitMs = 0;\n      this.downloadWaitMs = 0;\n      return res;\n    })();\n  }\n  memory(): WebGLMemoryInfo {\n    return {\n      unreliable: false,\n      numBytesInGPU: this.numBytesInGPU,\n      numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n      numBytesInGPUFree: this.textureManager.numBytesFree\n    } as WebGLMemoryInfo;\n  }\n\n  private startTimer(): WebGLQuery|CPUTimerQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.beginQuery();\n    }\n    return {startMs: util.now(), endMs: null};\n  }\n\n  private endTimer(query: WebGLQuery|CPUTimerQuery): WebGLQuery|CPUTimerQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      this.gpgpu.endQuery();\n      return query;\n    }\n    (query as CPUTimerQuery).endMs = util.now();\n    return query;\n  }\n\n  private async getQueryTime(query: WebGLQuery|CPUTimerQuery): Promise<number> {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.waitForQueryAndGetTime(query as WebGLQuery);\n    }\n    const timerQuery = query as CPUTimerQuery;\n    return timerQuery.endMs - timerQuery.startMs;\n  }\n\n  private pendingDeletes = 0;\n\n  /**\n   * Decrease the RefCount on the dataId and dispose the memory if the dataId\n   * has 0 refCount. If there are pending read on the data, the disposal would\n   * added to the pending delete queue. Return true if the dataId is removed\n   * from backend or the backend does not contain the dataId, false if the\n   * dataId is not removed. Memory may or may not be released even when dataId\n   * is removed, which also depends on dataRefCount, see `releaseGPU`.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n  disposeData(dataId: DataId, force = false): boolean {\n    if (this.pendingDisposal.has(dataId)) {\n      return false;\n    }\n\n    // No-op if already disposed.\n    if (!this.texData.has(dataId)) {\n      return true;\n    }\n\n    // if force flag is set, change refCount to 0, this would ensure disposal\n    // when added to the pendingDisposal queue. Memory may or may not be\n    // released, which also depends on dataRefCount, see `releaseGPU`.\n    if (force) {\n      this.texData.get(dataId).refCount = 0;\n    } else {\n      this.texData.get(dataId).refCount--;\n    }\n\n    if (!force && this.texData.get(dataId).refCount > 0) {\n      return false;\n    }\n\n    if (this.pendingRead.has(dataId)) {\n      this.pendingDisposal.add(dataId);\n      this.pendingDeletes++;\n      return false;\n    }\n\n    this.releaseGPUData(dataId);\n    const {complexTensorInfos} = this.texData.get(dataId);\n    if (complexTensorInfos != null) {\n      this.disposeData(complexTensorInfos.real.dataId, force);\n      this.disposeData(complexTensorInfos.imag.dataId, force);\n    }\n\n    this.texData.delete(dataId);\n\n    return true;\n  }\n\n  private releaseGPUData(dataId: DataId): void {\n    const {texture, dtype, texShape, usage, isPacked, slice} =\n        this.texData.get(dataId);\n    const key = slice && slice.origDataId || dataId;\n    const refCount = this.dataRefCount.get(key);\n\n    if (refCount > 1) {\n      this.dataRefCount.set(key, refCount - 1);\n    } else {\n      this.dataRefCount.delete(key);\n      if (texture != null) {\n        this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n        this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n      }\n    }\n\n    const texData = this.texData.get(dataId);\n    texData.texture = null;\n    texData.texShape = null;\n    texData.isPacked = false;\n    texData.slice = null;\n  }\n\n  getTexture(dataId: DataId): WebGLTexture {\n    this.uploadToGPU(dataId);\n    return this.texData.get(dataId).texture.texture;\n  }\n\n  /**\n   * Returns internal information for the specific data bucket. Used in unit\n   * tests.\n   */\n  getDataInfo(dataId: DataId): TextureData {\n    return this.texData.get(dataId);\n  }\n\n  /*\n  Tests whether all the inputs to an op are small and on the CPU. This heuristic\n  determines when it would be faster to execute a kernel on the CPU. WebGL\n  kernels opt into running this check and forwarding when appropriate.\n  TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n  sustainable strategy for optimizing backend execution of ops.\n   */\n  shouldExecuteOnCPU(\n      inputs: TensorInfo[],\n      sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD): boolean {\n    return env().getBool('WEBGL_CPU_FORWARD') &&\n        inputs.every(\n            input => this.texData.get(input.dataId).texture == null &&\n                util.sizeFromShape(input.shape) < sizeThreshold);\n  }\n\n  getGPGPUContext(): GPGPUContext {\n    return this.gpgpu;\n  }\n\n  where(condition: Tensor): Tensor2D {\n    backend_util.warn(\n        'tf.where() in webgl locks the UI thread. ' +\n        'Call tf.whereAsync() instead');\n    const condVals = condition.dataSync();\n    return whereImpl(condition.shape, condVals);\n  }\n\n  private packedUnaryOp(x: TensorInfo, op: string, dtype: DataType) {\n    const program = new UnaryOpPackedProgram(x.shape, op);\n    const outInfo = this.compileAndRun(program, [x], dtype);\n    return engine().makeTensorFromTensorInfo(outInfo);\n  }\n\n  // TODO(msoulanille) remove this once the backend has been modularized\n  // a copy is needed here to break a circular dependency.\n  // Also remove the op from unary_op.\n  abs<T extends Tensor>(x: T): T {\n    // TODO: handle cases when x is complex.\n    if (this.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n      const outValues =\n          simpleAbsImplCPU(this.texData.get(x.dataId).values as TypedArray);\n      return this.makeOutput(x.shape, x.dtype, outValues);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.ABS, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n    const outInfo = this.compileAndRun(program, [x]);\n    return engine().makeTensorFromTensorInfo(outInfo) as T;\n  }\n\n  makeTensorInfo(\n      shape: number[], dtype: DataType,\n      values?: BackendValues|string[]): TensorInfo {\n    let dataId;\n    if (dtype === 'string' && values != null && values.length > 0 &&\n        util.isString(values[0])) {\n      const encodedValues =\n          (values as {} as string[]).map(d => util.encodeString(d));\n\n      dataId = this.write(encodedValues, shape, dtype);\n    } else {\n      dataId = this.write(values as TypedArray, shape, dtype);\n    }\n\n    this.texData.get(dataId).usage = null;\n    return {dataId, shape, dtype};\n  }\n\n  private makeOutput<T extends Tensor>(\n      shape: number[], dtype: DataType, values?: BackendValues): T {\n    return engine().makeTensorFromTensorInfo(\n               this.makeTensorInfo(shape, dtype, values), this) as T;\n  }\n\n  unpackTensor(input: TensorInfo): TensorInfo {\n    const program = new UnpackProgram(input.shape);\n    return this.runWebGLProgram(program, [input], input.dtype);\n  }\n\n  packTensor(input: TensorInfo): TensorInfo {\n    const program = new PackProgram(input.shape);\n    const preventEagerUnpackingOutput = true;\n    return this.runWebGLProgram(\n        program, [input], input.dtype, null /* customUniformValues */,\n        preventEagerUnpackingOutput);\n  }\n\n  private packedReshape(input: TensorInfo, afterShape: number[]): TensorInfo {\n    const input3DShape = [\n      webgl_util.getBatchDim(input.shape),\n      ...webgl_util.getRowsCols(input.shape)\n    ] as [number, number, number];\n    const input3D: TensorInfo = {\n      dtype: input.dtype,\n      shape: input3DShape,\n      dataId: input.dataId\n    };\n    const afterShapeAs3D = [\n      webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)\n    ] as [number, number, number];\n\n    const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n    const preventEagerUnpackingOfOutput = true;\n    const customValues = [input3DShape];\n    const output = this.runWebGLProgram(\n        program, [input3D], input.dtype, customValues,\n        preventEagerUnpackingOfOutput);\n    return {dataId: output.dataId, shape: afterShape, dtype: output.dtype};\n  }\n\n  private decode(dataId: DataId, customTexShape?: [number, number]):\n      TensorInfo {\n    const texData = this.texData.get(dataId);\n    const {isPacked, shape, dtype} = texData;\n    if (customTexShape != null) {\n      const size = util.sizeFromShape(shape);\n      const texSize = customTexShape[0] * customTexShape[1] * 4;\n      util.assert(\n          size <= texSize,\n          () => 'customTexShape is too small. ' +\n              'Row * Column * 4 should be equal or larger than the ' +\n              'size of the tensor data.');\n    }\n    const shapeAs3D =\n        webgl_util.getShapeAs3D(shape) as [number, number, number];\n    let program;\n    if (isPacked) {\n      program = new DecodeMatrixPackedProgram(shapeAs3D);\n    } else {\n      program = new DecodeMatrixProgram(shapeAs3D);\n    }\n    const preventEagerUnpackingOfOutput = true;\n    const customValues =\n        [customTexShape != null ? customTexShape :\n                                  tex_util.getDenseTexShape(shapeAs3D)];\n    const out = this.runWebGLProgram(\n        program, [{shape: shapeAs3D, dtype, dataId}], dtype, customValues,\n        preventEagerUnpackingOfOutput, customTexShape);\n    return {dtype, shape, dataId: out.dataId};\n  }\n\n  runWebGLProgram(\n      program: GPGPUProgram, inputs: TensorInfo[], outputDtype: DataType,\n      customUniformValues?: number[][], preventEagerUnpackingOfOutput = false,\n      customTexShape?: [number, number]): TensorInfo {\n    const output = this.makeTensorInfo(program.outputShape, outputDtype);\n    const outData = this.texData.get(output.dataId);\n    if (program.packedOutput) {\n      outData.isPacked = true;\n    }\n    if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n      const texelShape = customTexShape != null ?\n          customTexShape :\n          tex_util.getDenseTexShape(program.outputShape);\n      // For a densely packed output, we explicitly set texShape\n      // so it doesn't get assigned later according to our typical packing\n      // scheme wherein a single texel can only contain values from adjacent\n      // rows/cols.\n      outData.texShape = texelShape.map(d => d * 2) as [number, number];\n    }\n    if (program.outTexUsage != null) {\n      outData.usage = program.outTexUsage;\n    }\n\n    if (util.sizeFromShape(output.shape) === 0) {\n      // Short-circuit the computation since the result is empty (has 0 in its\n      // shape).\n      outData.values =\n          util.getTypedArrayFromDType(output.dtype as 'float32', 0);\n      return output;\n    }\n\n    const dataToDispose: TensorInfo[] = [];\n    const inputsData: TensorData[] = inputs.map(input => {\n      if (input.dtype === 'complex64') {\n        throw new Error(\n            `GPGPUProgram does not support complex64 input. For complex64 ` +\n            `dtypes, please separate the program into real and imaginary ` +\n            `parts.`);\n      }\n\n      let texData = this.texData.get(input.dataId);\n\n      if (texData.texture == null) {\n        if (!program.packedInputs &&\n            util.sizeFromShape(input.shape) <=\n                env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n          // Upload small tensors that live on the CPU as uniforms, not as\n          // textures. Do this only when the environment supports 32bit floats\n          // due to problems when comparing 16bit floats with 32bit floats.\n          // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n          // possible for packed shaders to sample from uniforms.\n          return {\n            shape: input.shape,\n            texData: null,\n            isUniform: true,\n            uniformValues: texData.values as TypedArray\n          };\n        }\n\n        // This ensures that if a packed program's inputs have not yet been\n        // uploaded to the GPU, they get uploaded as packed right off the bat.\n        if (program.packedInputs) {\n          texData.isPacked = true;\n          texData.shape = input.shape;\n        }\n      }\n\n      this.uploadToGPU(input.dataId);\n      if (!!texData.isPacked !== !!program.packedInputs) {\n        input = texData.isPacked ? this.unpackTensor(input) :\n                                   this.packTensor(input);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n      } else if (\n          texData.isPacked &&\n          !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n        // This is a special case where a texture exists for a tensor\n        // but the shapes are incompatible (due to packing constraints) because\n        // the tensor did not have a chance to go through the packed reshape\n        // shader. This only happens when we reshape the *same* tensor to form\n        // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n        // case will disappear once packed uploading is the default.\n\n        const savedInput = input;\n        const targetShape = input.shape;\n\n        input.shape = texData.shape;\n        input = this.packedReshape(input as Tensor, targetShape);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n\n        savedInput.shape = targetShape;\n      }\n\n      return {shape: input.shape, texData, isUniform: false};\n    });\n\n    this.uploadToGPU(output.dataId);\n    const outputData:\n        TensorData = {shape: output.shape, texData: outData, isUniform: false};\n    const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n    const binary = this.getAndSaveBinary(key, () => {\n      return gpgpu_math.compileProgram(\n          this.gpgpu, program, inputsData, outputData);\n    });\n    const shouldTimeProgram = this.activeTimers != null;\n    let query: WebGLQuery|CPUTimerQuery;\n    if (shouldTimeProgram) {\n      query = this.startTimer();\n    }\n\n    if (!env().get('ENGINE_COMPILE_ONLY')) {\n      gpgpu_math.runProgram(\n          this.gpgpu, binary, inputsData, outputData, customUniformValues);\n    }\n\n    dataToDispose.forEach(info => this.disposeIntermediateTensorInfo(info));\n\n    if (shouldTimeProgram) {\n      query = this.endTimer(query);\n      this.activeTimers.push(\n          {name: program.constructor.name, query: this.getQueryTime(query)});\n    }\n\n    const glFlushThreshold = env().get('WEBGL_FLUSH_THRESHOLD');\n    // Manually GL flush requested\n    if (glFlushThreshold > 0) {\n      const time = util.now();\n      if ((time - this.lastGlFlushTime) > glFlushThreshold) {\n        this.gpgpu.gl.flush();\n        this.lastGlFlushTime = time;\n      }\n    }\n\n    if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked &&\n        preventEagerUnpackingOfOutput === false) {\n      const unpacked = this.unpackTensor(output);\n      this.disposeIntermediateTensorInfo(output);\n      return unpacked;\n    }\n    return output;\n  }\n\n  compileAndRun(\n      program: GPGPUProgram, inputs: TensorInfo[], outputDtype?: DataType,\n      customUniformValues?: number[][],\n      preventEagerUnpackingOfOutput = false): TensorInfo {\n    outputDtype = outputDtype || inputs[0].dtype;\n    const outInfo = this.runWebGLProgram(\n        program, inputs, outputDtype, customUniformValues,\n        preventEagerUnpackingOfOutput);\n    return outInfo;\n  }\n\n  private getAndSaveBinary(key: string, getBinary: () => GPGPUBinary):\n      GPGPUBinary {\n    if (!(key in this.binaryCache)) {\n      this.binaryCache[key] = getBinary();\n    }\n    return this.binaryCache[key];\n  }\n\n  getTextureManager(): TextureManager {\n    return this.textureManager;\n  }\n\n  private disposed = false;\n\n  dispose() {\n    if (this.disposed) {\n      return;\n    }\n    // Avoid disposing the compiled webgl programs during unit testing because\n    // it slows down test execution.\n    if (!env().getBool('IS_TEST')) {\n      const allKeys = Object.keys(this.binaryCache);\n      allKeys.forEach(key => {\n        this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n        delete this.binaryCache[key];\n      });\n    }\n    this.textureManager.dispose();\n    if (this.canvas != null &&\n        (typeof (HTMLCanvasElement) !== 'undefined' &&\n         this.canvas instanceof HTMLCanvasElement)) {\n      this.canvas.remove();\n    } else {\n      this.canvas = null;\n    }\n    if (this.gpgpuCreatedLocally) {\n      this.gpgpu.program = null;\n      this.gpgpu.dispose();\n    }\n    this.disposed = true;\n  }\n\n  floatPrecision(): 16|32 {\n    if (this.floatPrecisionValue == null) {\n      this.floatPrecisionValue = tidy(() => {\n        if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n          // Momentarily switching DEBUG flag to false so we don't throw an\n          // error trying to upload a small value.\n          const debugFlag = env().getBool('DEBUG');\n          env().set('DEBUG', false);\n          const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n          env().set('DEBUG', debugFlag);\n\n          if (underflowCheckValue > 0) {\n            return 32;\n          }\n        }\n        return 16;\n      });\n    }\n    return this.floatPrecisionValue;\n  }\n\n  /** Returns the smallest representable number.  */\n  epsilon(): number {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n  }\n\n  uploadToGPU(dataId: DataId): void {\n    const texData = this.texData.get(dataId);\n    const {shape, dtype, values, texture, usage, isPacked} = texData;\n\n    if (texture != null) {\n      // Array is already on GPU. No-op.\n      return;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let texShape = texData.texShape;\n    if (texShape == null) {\n      // This texShape may not be the final texture shape. For packed or dense\n      // textures, the texShape will be changed when textures are created.\n      texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n      texData.texShape = texShape;\n    }\n\n    if (values != null) {\n      const shapeAs3D = webgl_util.getShapeAs3D(shape);\n\n      let program;\n      let width = texShape[1], height = texShape[0];\n      const isByteArray =\n          values instanceof Uint8Array || values instanceof Uint8ClampedArray;\n\n      // texture for float array is PhysicalTextureType.PACKED_2X2_FLOAT32, we\n      // need to make sure the upload uses the same packed size\n      if (isPacked || !isByteArray) {\n        [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(\n            texShape[0], texShape[1]);\n      }\n\n      if (isPacked) {\n        program = new EncodeMatrixPackedProgram(shapeAs3D, isByteArray);\n      } else {\n        program = new EncodeMatrixProgram(shapeAs3D, isByteArray);\n      }\n\n      // TexShape for float array needs to be the original shape, which byte\n      // array needs to be packed size. This allow the data upload shape to be\n      // matched with texture creation logic.\n      const tempDenseInputTexShape: [number, number] =\n          isByteArray ? [height, width] : texShape;\n      const tempDenseInputHandle =\n          this.makeTensorInfo(tempDenseInputTexShape, dtype);\n      const tempDenseInputTexData =\n          this.texData.get(tempDenseInputHandle.dataId);\n      if (isByteArray) {\n        tempDenseInputTexData.usage = TextureUsage.PIXELS;\n      } else {\n        tempDenseInputTexData.usage = TextureUsage.UPLOAD;\n      }\n      tempDenseInputTexData.texShape = tempDenseInputTexShape;\n      this.gpgpu.uploadDenseMatrixToTexture(\n          this.getTexture(tempDenseInputHandle.dataId), width, height,\n          values as TypedArray);\n\n      const customValues = [[height, width]];\n      // We want the output to remain packed regardless of the value of\n      // WEBGL_PACK.\n      const preventEagerUnpacking = true;\n      const encodedOutputTarget = this.runWebGLProgram(\n          program, [tempDenseInputHandle], dtype, customValues,\n          preventEagerUnpacking);\n\n      // Have the original texture assume the identity of the encoded output.\n      const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n      texData.texShape = outputTexData.texShape;\n      texData.isPacked = outputTexData.isPacked;\n      texData.usage = outputTexData.usage;\n\n      if (!env().get('ENGINE_COMPILE_ONLY')) {\n        texData.texture = outputTexData.texture;\n        // Once uploaded, don't store the values on cpu.\n        texData.values = null;\n        this.texData.delete(encodedOutputTarget.dataId);\n      } else {\n        this.disposeData(encodedOutputTarget.dataId);\n      }\n\n      this.disposeIntermediateTensorInfo(tempDenseInputHandle);\n\n      if (shouldTimeProgram) {\n        this.uploadWaitMs += util.now() - start;\n      }\n    } else {\n      const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n      texData.texture = newTexture;\n    }\n  }\n\n  private convertAndCacheOnCPU(dataId: DataId, float32Values?: Float32Array):\n      TypedArray {\n    const texData = this.texData.get(dataId);\n    const {dtype} = texData;\n\n    this.releaseGPUData(dataId);\n\n    if (float32Values != null) {\n      texData.values = float32ToTypedArray(float32Values, dtype as 'float32');\n    }\n    return texData.values as TypedArray;\n  }\n\n  private acquireTexture(\n      texShape: [number, number], texType: TextureUsage, dtype: DataType,\n      isPacked: boolean): Texture {\n    this.numBytesInGPU += this.computeBytes(texShape, dtype);\n    if (!this.warnedAboutMemory &&\n        this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n      const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n      this.warnedAboutMemory = true;\n      console.warn(\n          `High memory usage in GPU: ${mb} MB, ` +\n          `most likely due to a memory leak`);\n    }\n    return this.textureManager.acquireTexture(texShape, texType, isPacked);\n  }\n\n  private computeBytes(shape: [number, number], dtype: DataType) {\n    return shape[0] * shape[1] * util.bytesPerElement(dtype);\n  }\n\n  checkCompileCompletion() {\n    for (const [, binary] of Object.entries(this.binaryCache)) {\n      this.checkCompletion_(binary);\n    }\n  }\n\n  async checkCompileCompletionAsync(): Promise<boolean[]> {\n    const ps = [];\n    if (this.gpgpu.parallelCompilationExtension) {\n      for (const [, binary] of Object.entries(this.binaryCache)) {\n        ps.push(this.checkCompletionAsync_(binary));\n      }\n      return Promise.all(ps);\n    } else {\n      for (const [, binary] of Object.entries(this.binaryCache)) {\n        const p: Promise<boolean> = new Promise((resolve) => {\n          try {\n            this.checkCompletion_(binary);\n            resolve(true);\n          } catch (error) {\n            throw error;\n          }\n        });\n        ps.push(p);\n      }\n      return Promise.all(ps);\n    }\n  }\n\n  private async checkCompletionAsync_(binary: GPGPUBinary): Promise<boolean> {\n    if (this.gpgpu.gl.getProgramParameter(\n            binary.webGLProgram,\n            this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)) {\n      return this.checkCompletion_(binary);\n    } else {\n      await nextFrame();\n      return this.checkCompletionAsync_(binary);\n    }\n  }\n\n  private checkCompletion_(binary: GPGPUBinary): boolean {\n    if (this.gpgpu.gl.getProgramParameter(\n            binary.webGLProgram, this.gpgpu.gl.LINK_STATUS) === false) {\n      console.log(this.gpgpu.gl.getProgramInfoLog(binary.webGLProgram));\n      if (this.gpgpu.gl.getShaderParameter(\n              binary.fragmentShader, this.gpgpu.gl.COMPILE_STATUS) === false) {\n        webgl_util.logShaderSourceAndInfoLog(\n            binary.source,\n            this.gpgpu.gl.getShaderInfoLog(binary.fragmentShader));\n        throw new Error('Failed to compile fragment shader.');\n      }\n      throw new Error('Failed to link vertex and fragment shaders.');\n    }\n    return true;\n  }\n\n  getUniformLocations() {\n    for (const [, binary] of Object.entries(this.binaryCache)) {\n      const {\n        uniformLocations,\n        customUniformLocations,\n        infLoc,\n        nanLoc,\n        inShapesLocations,\n        inTexShapesLocations,\n        outShapeLocation,\n        outShapeStridesLocation,\n        outTexShapeLocation\n      } = getUniformLocations(this.gpgpu, binary.program, binary.webGLProgram);\n      binary.uniformLocations = uniformLocations;\n      binary.customUniformLocations = customUniformLocations;\n      binary.infLoc = infLoc;\n      binary.nanLoc = nanLoc;\n      binary.inShapesLocations = inShapesLocations;\n      binary.inTexShapesLocations = inTexShapesLocations;\n      binary.outShapeLocation = outShapeLocation;\n      binary.outShapeStridesLocation = outShapeStridesLocation;\n      binary.outTexShapeLocation = outTexShapeLocation;\n    }\n  }\n}\n\nfunction float32ToTypedArray<D extends NumericDataType>(\n    a: Float32Array, dtype: D): tf.DataTypeMap[D] {\n  if (dtype === 'float32' || dtype === 'complex64') {\n    return a as tf.DataTypeMap[D];\n  } else if (dtype === 'int32' || dtype === 'bool') {\n    const result = (dtype === 'int32') ? new Int32Array(a.length) :\n                                         new Uint8Array(a.length);\n    for (let i = 0; i < result.length; ++i) {\n      result[i] = Math.round(a[i]);\n    }\n    return result as tf.DataTypeMap[D];\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nimport * as gpgpu_util from './gpgpu_util';\nimport * as webgl_util from './webgl_util';\n\nexport {MathBackendWebGL, WebGLMemoryInfo, WebGLTimingInfo} from './backend_webgl';\nexport {setWebGLContext} from './canvas_util';\nexport {GPGPUContext} from './gpgpu_context';\nexport {GPGPUProgram} from './gpgpu_math';\n// WebGL specific utils.\nexport {gpgpu_util, webgl_util};\n\n/**\n * Enforce use of half precision textures if available on the platform.\n *\n * @doc {heading: 'Environment', namespace: 'webgl'}\n */\nexport function forceHalfFloat(): void {\n  env().set('WEBGL_FORCE_F16_TEXTURES', true);\n}\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// base.ts is the webgl backend without auto kernel registration.\n\nimport {device_util, registerBackend} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from './backend_webgl';\nexport {version as version_webgl} from './version';\n\nif (device_util.isBrowser()) {\n  registerBackend('webgl', () => new MathBackendWebGL(), 2 /* priority */);\n}\n\n// Export webgl utilities\nexport * from './webgl';\n\n// Export forceHalfFlost under webgl namespace for the union bundle.\nimport {forceHalfFloat} from './webgl';\nexport const webgl = {forceHalfFloat};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport const CHECK_NAN_SNIPPET = `\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n`;\n\nexport const SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\nexport class BinaryOpProgram implements GPGPUProgram {\n  variableNames = ['A', 'B'];\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n\n  constructor(op: string, aShape: number[], bShape: number[]) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    this.userCode = `\n      float binaryOperation(float a, float b) {\n        ${op}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport const CHECK_NAN_SNIPPET = `\n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n`;\n\nexport const ELU_DER = `\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n`;\n\nexport const NOT_EQUAL = `\n  return vec4(notEqual(a, b));\n`;\n\nexport class BinaryOpPackedProgram implements GPGPUProgram {\n  variableNames = ['A', 'B'];\n  outputShape: number[];\n  userCode: string;\n  supportsBroadcasting = true;\n  packedInputs = true;\n  packedOutput = true;\n  enableShapeUniforms: boolean;\n\n  constructor(\n      op: string, aShape: number[], bShape: number[],\n      checkOutOfBounds = false) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const rank = this.outputShape.length;\n    this.enableShapeUniforms = useShapeUniforms(rank);\n    let checkOutOfBoundsString = '';\n    if (checkOutOfBounds) {\n      if (rank === 0 || util.sizeFromShape(this.outputShape) === 1) {\n        checkOutOfBoundsString = `\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        `;\n      } else {\n        const dtype = getCoordsDataType(rank);\n        checkOutOfBoundsString = `\n          ${dtype} coords = getOutputCoords();\n        `;\n        if (rank === 1) {\n          if (this.enableShapeUniforms) {\n            checkOutOfBoundsString += `\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;\n          } else {\n            checkOutOfBoundsString += `\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;\n          }\n        } else {\n          const channels = getChannels('coords', rank);\n          if (this.enableShapeUniforms) {\n            checkOutOfBoundsString += `\n            bool nextRowOutOfBounds =\n              (${channels[rank - 2]} + 1) >= outShape[${rank} - 2];\n            bool nextColOutOfBounds =\n              (${channels[rank - 1]} + 1) >= outShape[${rank} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `;\n          } else {\n            checkOutOfBoundsString += `\n            bool nextRowOutOfBounds =\n              (${channels[rank - 2]} + 1) >= ${this.outputShape[rank - 2]};\n            bool nextColOutOfBounds =\n              (${channels[rank - 1]} + 1) >= ${this.outputShape[rank - 1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `;\n          }\n        }\n      }\n    }\n\n    this.userCode = `\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${op}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${checkOutOfBoundsString}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Identity, IdentityInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function identity(\n    args: {inputs: IdentityInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  backend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: x.shape, dtype: x.dtype};\n}\n\nexport const identityConfig: KernelConfig = {\n  kernelName: Identity,\n  backendName: 'webgl',\n  kernelFunc: identity as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Complex, ComplexInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\n/**\n * In WebGL data is stored in GPU textures which can't be efficiently copied, so\n * complex tensors share data with their real and imaginary components. Complex\n * tensors' reference to the components is tracked by refCount on the individual\n * component. The refCounts are increased by the identity call.\n *\n * When a complex tensor is disposed, it will reduce the refCount on the\n * components by calling disposeData on each.\n */\nexport function complex(\n    args: {inputs: ComplexInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {real, imag} = inputs;\n\n  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n  const complex = backend.texData.get(complexInfo.dataId);\n\n  const realTensorInfo = identity({inputs: {x: real}, backend});\n\n  const imagTensorInfo = identity({inputs: {x: imag}, backend});\n\n  complex.complexTensorInfos = {real: realTensorInfo, imag: imagTensorInfo};\n\n  return complexInfo;\n}\n\nexport const complexConfig: KernelConfig = {\n  kernelName: Complex,\n  backendName: 'webgl',\n  kernelFunc: complex as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, LeakyRelu, LeakyReluAttrs, LeakyReluInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\n\nexport const LEAKYRELU = `return (a < 0.) ? b * a : a;`;\nexport const LEAKYRELU_PACKED = `\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n`;\n\nexport function leakyRelu(args: {\n  inputs: LeakyReluInputs,\n  backend: MathBackendWebGL,\n  attrs: LeakyReluAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {alpha} = attrs;\n\n  const $alpha = backend.makeTensorInfo(\n      [], 'float32',\n      util.createScalarValue(alpha as {} as 'float32', 'float32'));\n\n  const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n      new BinaryOpPackedProgram(LEAKYRELU_PACKED, x.shape, $alpha.shape) :\n      new BinaryOpProgram(LEAKYRELU, x.shape, $alpha.shape);\n  const result = backend.runWebGLProgram(program, [x, $alpha], 'float32');\n\n  backend.disposeIntermediateTensorInfo($alpha);\n\n  return result;\n}\n\nexport const leakyReluConfig: KernelConfig = {\n  kernelName: LeakyRelu,\n  backendName: 'webgl',\n  kernelFunc: leakyRelu as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Prelu, PreluInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\n\nexport const PRELU = `return (a < 0.) ? b * a : a;`;\nexport const PRELU_PACKED = `\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n`;\n\nexport function prelu(args: {inputs: PreluInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x, alpha} = inputs;\n\n  const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n      new BinaryOpPackedProgram(PRELU_PACKED, x.shape, alpha.shape) :\n      new BinaryOpProgram(PRELU, x.shape, alpha.shape);\n  return backend.runWebGLProgram(program, [x, alpha], 'float32');\n}\n\nexport const preluConfig: KernelConfig = {\n  kernelName: Prelu,\n  backendName: 'webgl',\n  kernelFunc: prelu as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, DataType, env, KernelFunc, TypedArray, UnaryInputs, upcastType} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\nimport {complex} from '../kernels/Complex';\nimport {LEAKYRELU, LEAKYRELU_PACKED} from '../kernels/LeakyRelu';\nimport {PRELU, PRELU_PACKED} from '../kernels/Prelu';\nimport * as unary_op from '../unaryop_gpu';\nimport {UnaryOpProgram} from '../unaryop_gpu';\nimport * as unary_packed_op from '../unaryop_packed_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nimport {SimpleBinaryKernelImplCPU, SimpleUnaryKernelImplCPU} from './shared';\n\nexport const CHECK_NAN_SNIPPET_UNARY = `if (isnan(x)) return x;`;\n\nexport const CHECK_NAN_SNIPPET_BINARY = `\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n`;\n\nexport const CHECK_NAN_SNIPPET_BINARY_PACKED = `\n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n`;\n\ntype UnaryKernelFuncConfig = {\n  opSnippet: string,\n  packedOpSnippet?: string,\n  cpuKernelImpl?: SimpleUnaryKernelImplCPU,\n  dtype?: DataType\n};\n\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param opSnippet Op snippet to create `UnaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `UnaryOpPackedProgram`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function unaryKernelFunc(\n    {opSnippet, packedOpSnippet, cpuKernelImpl, dtype}: UnaryKernelFuncConfig):\n    KernelFunc {\n  return ({inputs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const $dtype = dtype || x.dtype;\n    if (webglBackend.shouldExecuteOnCPU([x]) && cpuKernelImpl != null) {\n      const xData = webglBackend.texData.get(x.dataId);\n      const outValues = cpuKernelImpl(xData.values as TypedArray, $dtype);\n      return webglBackend.makeTensorInfo(x.shape, $dtype, outValues);\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK_UNARY_OPERATIONS') && packedOpSnippet != null;\n    let program: UnaryOpProgram|UnaryOpPackedProgram;\n    if (shouldUsePackedProgram) {\n      program = new UnaryOpPackedProgram(x.shape, packedOpSnippet);\n    } else {\n      program = new UnaryOpProgram(x.shape, opSnippet);\n    }\n\n    return webglBackend.runWebGLProgram(program, [x], $dtype);\n  };\n}\n\ntype BinaryKernelFuncConfig = {\n  opSnippet: string,\n  packedOpSnippet?: string,\n  checkOutOfBounds?: boolean,\n  supportsComplex?: boolean,\n  cpuKernelImpl?: SimpleBinaryKernelImplCPU,\n  dtype?: DataType\n};\n\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param opSnippet Op snippet to create `BinaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `BinaryOpPackedProgram`.\n * @param checkOutOfBoundsForPackedProgram Whether to set checkOutOfBounds=true\n *     when creating BinaryOpPackedProgram.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc({\n  opSnippet,\n  packedOpSnippet,\n  checkOutOfBounds = false,\n  supportsComplex = false,\n  cpuKernelImpl,\n  dtype\n}: BinaryKernelFuncConfig): KernelFunc {\n  return ({inputs, backend}) => {\n    const {a, b} = inputs as BinaryInputs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    if (supportsComplex && a.dtype === 'complex64') {\n      const aData = webglBackend.texData.get(a.dataId);\n      const bData = webglBackend.texData.get(b.dataId);\n\n      const [real, imag] = [\n        [aData.complexTensorInfos.real, bData.complexTensorInfos.real],\n        [aData.complexTensorInfos.imag, bData.complexTensorInfos.imag]\n      ].map(complexParts => {\n        const [aPart, bPart] = complexParts;\n\n        const aHandle = {\n          dataId: aPart.dataId,\n          dtype: aPart.dtype,\n          shape: a.shape\n        };\n        const bHandle = {\n          dataId: bPart.dataId,\n          dtype: bPart.dtype,\n          shape: b.shape\n        };\n\n        const program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n        return webglBackend.runWebGLProgram(\n            program, [aHandle, bHandle], upcastType(aPart.dtype, bPart.dtype));\n      });\n\n      const complexOutput =\n          complex({inputs: {real, imag}, backend: webglBackend});\n\n      webglBackend.disposeIntermediateTensorInfo(real);\n      webglBackend.disposeIntermediateTensorInfo(imag);\n\n      // TODO(annxingyuan): Implement CPU forwarding for complex inputs.\n\n      return complexOutput;\n    }\n\n    const $dtype = dtype || upcastType(a.dtype, b.dtype);\n    if ((a.dtype === 'string' || b.dtype === 'string' ||\n         webglBackend.shouldExecuteOnCPU([a, b])) &&\n        cpuKernelImpl != null) {\n      const aVals = webglBackend.texData.get(a.dataId).values as TypedArray;\n      const bVals = webglBackend.texData.get(b.dataId).values as TypedArray;\n\n      const decodedAVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(aVals as any as Uint8Array[]) :\n          aVals;\n      const decodedBVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(bVals as any as Uint8Array[]) :\n          bVals;\n      const [outValues, outShape] =\n          cpuKernelImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n\n      const out = webglBackend.makeTensorInfo(outShape, $dtype);\n      const outData = webglBackend.texData.get(out.dataId);\n      outData.values = outValues;\n      return out;\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK_BINARY_OPERATIONS') &&\n        packedOpSnippet != null;\n    let program: BinaryOpProgram|BinaryOpPackedProgram;\n    if (shouldUsePackedProgram) {\n      program = new BinaryOpPackedProgram(\n          packedOpSnippet, a.shape, b.shape, checkOutOfBounds);\n    } else {\n      program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n    }\n\n    return webglBackend.runWebGLProgram(program, [a, b], $dtype);\n  };\n}\n\nexport function mapActivationToShaderProgram(\n    activation: backend_util.Activation, packed = false): string {\n  if (activation === 'linear') {\n    if (packed) {\n      return unary_packed_op.LINEAR;\n    }\n    return unary_op.LINEAR;\n  } else if (activation === 'relu') {\n    if (packed) {\n      return unary_packed_op.RELU;\n    }\n    return unary_op.RELU;\n  } else if (activation === 'elu') {\n    if (packed) {\n      return unary_packed_op.ELU;\n    }\n    return unary_op.ELU;\n  } else if (activation === 'relu6') {\n    if (packed) {\n      return unary_packed_op.RELU6;\n    }\n    return unary_op.RELU6;\n  } else if (activation === 'prelu') {\n    if (packed) {\n      return PRELU_PACKED;\n    }\n    return PRELU;\n  } else if (activation === 'leakyrelu') {\n    if (packed) {\n      return LEAKYRELU_PACKED;\n    }\n    return LEAKYRELU;\n  } else if (activation === 'sigmoid') {\n    if (packed) {\n      return unary_packed_op.SIGMOID;\n    }\n    return unary_op.SIGMOID;\n  }\n  throw new Error(`Activation ${\n      activation} has not been implemented for the WebGL backend.`);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class MatMulPackedProgram implements GPGPUProgram {\n  variableNames = ['matrixA', 'matrixB'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n\n  constructor(\n      aShape: [number, number, number], bShape: [number, number, number],\n      outputShape: [number, number, number], transposeA = false,\n      transposeB = false, addBias = false, activation: string = null,\n      hasPreluActivation = false, hasLeakyreluActivation = false) {\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    const sharedDim = transposeA ? aShape[1] : aShape[2];\n    const sharedDimensionPacked = Math.ceil(sharedDim / 2);\n\n    const aSample = transposeA ? 'i * 2, rc.y' : 'rc.y, i * 2';\n    const bSample = transposeB ? 'rc.z, i * 2' : 'i * 2, rc.z';\n    const aSwizzle = transposeA ? ['a.xxyy', 'a.zzww'] : ['a.xxzz', 'a.yyww'];\n    const bSwizzle = transposeB ? ['b.xzxz', 'b.ywyw'] : ['b.xyxy', 'b.zwzw'];\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    if (hasLeakyreluActivation) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    let batchASnippet = 'rc.x';\n    let batchBSnippet = 'rc.x';\n    if (aShape[0] < bShape[0]) {\n      batchASnippet = `int(min(float(rc.x), ${aShape[0] - 1}.))`;\n    } else if (bShape[0] < aShape[0]) {\n      batchBSnippet = `int(min(float(rc.x), ${bShape[0] - 1}.))`;\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${sharedDimensionPacked}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${sharedDimensionPacked}; i++) {\n          int batchA = ${batchASnippet};\n          int batchB = ${batchBSnippet};\n          vec4 a = getMatrixA(batchA, ${aSample});\n          vec4 b = getMatrixB(batchB, ${bSample});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${aSwizzle[0]} * ${bSwizzle[0]});\n          result += (${aSwizzle[1]} * ${bSwizzle[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${addBiasSnippet}\n\n        ${applyActivationSnippet}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\n// (Ar + Ai)(Br + Bi) =\n// ArBr + ArBi + AiBr + AiBi = ArBr - AB + ArBi + AiBr\n// Yr = ArBr - AB\n// Yi = ArBi + AiBr\nexport const COMPLEX_MULTIPLY = {\n  REAL: 'return areal * breal - aimag * bimag;',\n  IMAG: 'return areal * bimag + aimag * breal;'\n};\n\nexport class BinaryOpComplexProgram implements GPGPUProgram {\n  variableNames = ['AReal', 'AImag', 'BReal', 'BImag'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(op: string, aShape: number[], bShape: number[]) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    this.userCode = `\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${op}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, env, KernelConfig, Multiply, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport * as binaryop_complex_gpu from '../binaryop_complex_gpu';\nimport {BinaryOpComplexProgram} from '../binaryop_complex_gpu';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\nimport {multiplyImplCPU as cpuMultiply} from '../kernel_utils/shared';\n\nimport {complex} from './Complex';\n\nconst MUL = 'return a * b;';\n\nexport function multiply(\n    args: {inputs: BinaryInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {a, b} = inputs;\n  const dtype = backend_util.upcastType(a.dtype, b.dtype);\n\n  if (a.dtype === 'complex64') {\n    const aData = backend.texData.get(a.dataId);\n    const bData = backend.texData.get(b.dataId);\n\n    const realProgram = new BinaryOpComplexProgram(\n        binaryop_complex_gpu.COMPLEX_MULTIPLY.REAL, a.shape, b.shape);\n    const imagProgram = new BinaryOpComplexProgram(\n        binaryop_complex_gpu.COMPLEX_MULTIPLY.IMAG, a.shape, b.shape);\n\n    const inputs = [\n      {\n        dataId: aData.complexTensorInfos.real.dataId,\n        dtype: aData.complexTensorInfos.real.dtype,\n        shape: a.shape\n      },\n      {\n        dataId: aData.complexTensorInfos.imag.dataId,\n        dtype: aData.complexTensorInfos.imag.dtype,\n        shape: a.shape\n      },\n      {\n        dataId: bData.complexTensorInfos.real.dataId,\n        dtype: bData.complexTensorInfos.real.dtype,\n        shape: b.shape\n      },\n      {\n        dataId: bData.complexTensorInfos.imag.dataId,\n        dtype: bData.complexTensorInfos.imag.dtype,\n        shape: b.shape\n      }\n    ];\n\n    const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n    const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n\n    const complexOutput =\n        complex({inputs: {real: realPart, imag: imagPart}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(imagPart);\n\n    // TODO(annxingyuan): CPU forwarding for complex inputs.\n    return complexOutput;\n  }\n\n  if (backend.shouldExecuteOnCPU([a, b])) {\n    const aData = backend.texData.get(a.dataId);\n    const bData = backend.texData.get(b.dataId);\n    const [outValues, outShape] = cpuMultiply(\n        a.shape, b.shape, aData.values as TypedArray,\n        bData.values as TypedArray, dtype);\n\n    const out = backend.makeTensorInfo(outShape, dtype);\n    const outData = backend.texData.get(out.dataId);\n    outData.values = outValues;\n    return out;\n  }\n\n  let program: BinaryOpProgram|BinaryOpPackedProgram;\n  if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n    program = new BinaryOpPackedProgram(MUL, a.shape, b.shape);\n  } else {\n    program = new BinaryOpProgram(MUL, a.shape, b.shape);\n  }\n\n  return backend.runWebGLProgram(program, [a, b], dtype);\n}\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'webgl',\n  kernelFunc: multiply\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reshape, ReshapeAttrs, ReshapeInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {packedReshape} from '../kernel_utils/reshape';\nimport {isReshapeFree} from '../webgl_util';\n\nexport function reshape(args: {\n  inputs: ReshapeInputs,\n  backend: MathBackendWebGL,\n  attrs: ReshapeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {shape} = attrs;\n  const webglBackend = backend;\n\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n\n  util.assert(\n      xSize === $xSize,\n      () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n          `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n          `shape must have the same number of elements.`);\n\n  const xTexData = webglBackend.texData.get(x.dataId);\n  if (xTexData.isPacked && !isReshapeFree(x.shape, $shape) &&\n      !(xTexData.texture !== null && isReshapeFree(xTexData.shape, $shape))) {\n    return packedReshape(x, $shape, webglBackend);\n  }\n\n  webglBackend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: $shape, dtype: x.dtype};\n}\n\nexport const reshapeConfig: KernelConfig = {\n  kernelName: Reshape,\n  backendName: 'webgl',\n  kernelFunc: reshape as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ReshapePackedProgram} from '../reshape_packed_gpu';\nimport {getBatchDim, getRowsCols} from '../webgl_util';\n\nexport function packedReshape(\n    input: TensorInfo, afterShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const input3DShape =\n      [getBatchDim(input.shape),\n       ...getRowsCols(input.shape)] as [number, number, number];\n  const input3D: TensorInfo = {\n    dtype: input.dtype,\n    shape: input3DShape,\n    dataId: input.dataId\n  };\n  const afterShapeAs3D =\n      [getBatchDim(afterShape),\n       ...getRowsCols(afterShape)] as [number, number, number];\n\n  const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n  const preventEagerUnpackingOfOutput = true;\n  const customValues = [input3DShape];\n  const output = backend.runWebGLProgram(\n      program, [input3D], input.dtype, customValues,\n      preventEagerUnpackingOfOutput);\n  return {dataId: output.dataId, shape: afterShape, dtype: output.dtype};\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MeanProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(reduceInfo: backend_util.ReduceInfo, divisor?: number) {\n    const {windowSize, batchSize, inSize, outSize} = reduceInfo;\n    this.outputShape = [batchSize, outSize];\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    let updateSnippet = `sumValue += dot(values, ones);`;\n    if (divisor != null) {\n      const denominator = 1 / divisor;\n      updateSnippet = `sumValue += dot(values * ${\n          util.isInt(denominator) ? denominator.toPrecision(2) :\n                                    denominator}, ones);`;\n    }\n\n    let checkOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return 0.0;\n        }\n      `;\n    }\n\n    this.userCode = `\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${updateSnippet}\n        }\n        setOutput(sumValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ReduceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      reduceInfo: backend_util.ReduceInfo,\n      reduceType: 'all'|'any'|'max'|'min'|'sum'|'prod') {\n    const {windowSize, batchSize, inSize, outSize} = reduceInfo;\n    this.outputShape = [batchSize, outSize];\n\n    let initializationValue = '0.0';\n    let compareOp = ``;\n\n    if (reduceType === 'prod') {\n      initializationValue = '1.0';\n    } else if (reduceType === 'min') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '1.0 / 1e-20';\n      compareOp = `min`;\n    } else if (reduceType === 'max') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n      compareOp = `max`;\n    }\n\n    let returnValue = `${reduceType}(${reduceType}(${reduceType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n\n    if (reduceType === 'sum') {\n      returnValue = `sumValue`;\n    } else if (reduceType === 'prod') {\n      returnValue = `prodValue`;\n    } else if (reduceType === 'all') {\n      returnValue = `allValue`;\n    } else if (reduceType === 'any') {\n      returnValue = `anyValue`;\n    }\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    let updateSnippet = `\n      if (${reduceType === 'sum'}) {\n        sumValue += dot(values, ones);\n      } else if (${reduceType === 'prod'}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n        if (${reduceType === 'min'} || ${reduceType === 'max'}) {\n          minMaxValue = ${compareOp}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `;\n\n    let vecType = `vec4`;\n\n    if (reduceType === 'all') {\n      initializationValue = '1.0';\n      updateSnippet = `\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    } else if (reduceType === 'any') {\n      initializationValue = '0.0';\n      updateSnippet = `\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    }\n\n    let checkOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n    }\n    this.userCode = `\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        vec4 minMaxValue = vec4(${initializationValue});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MeanProgram} from '../mean_gpu';\nimport {ReduceProgram} from '../reduce_gpu';\n\ntype ReduceTypes = 'all'|'any'|'max'|'min'|'sum'|'prod'|'mean';\n\n// Returns an array of configuration objects that describe each stage of the\n// reduction.\nfunction getReductionStages(inShape: number[]):\n    Array<{inSize: number, windowSize: number, outSize: number}> {\n  const stages = [];\n\n  while (stages.length === 0 || stages[stages.length - 1].outSize !== 1) {\n    const outSize: number =\n        stages.length ? stages[stages.length - 1].outSize : inShape[1];\n    const windowSize = backend_util.computeOptimalWindowSize(outSize);\n    stages.push({\n      inSize: outSize,\n      windowSize,\n      outSize: Math.ceil(outSize / windowSize)\n    });\n  }\n\n  return stages;\n}\n\nexport function reduce(\n    x: TensorInfo, dtype: DataType, reductionType: ReduceTypes,\n    backend: MathBackendWebGL): TensorInfo {\n  const reductionStages = getReductionStages(x.shape);\n\n  let result = x;\n  for (let i = 0; i < reductionStages.length; i++) {\n    const {inSize, windowSize, outSize} = reductionStages[i];\n\n    let program: ReduceProgram|MeanProgram;\n    let previousResult: TensorInfo;\n    if (reductionType === 'mean') {\n      program = i === 0 ?\n          new MeanProgram(\n              {windowSize, inSize, batchSize: x.shape[0], outSize}, inSize) :\n          new MeanProgram({windowSize, inSize, batchSize: x.shape[0], outSize});\n    } else {\n      program = new ReduceProgram(\n          {windowSize, inSize, batchSize: x.shape[0], outSize}, reductionType);\n    }\n\n    previousResult = result;\n    result = backend.runWebGLProgram(program, [result], dtype);\n\n    if (previousResult.dataId !== x.dataId) {\n      backend.disposeIntermediateTensorInfo(previousResult);\n    }\n  }\n\n  return result;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TransposeProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const switched = getSwitchedCoords(newDim);\n\n    this.userCode = `\n    void main() {\n      ${dtype} resRC = getOutputCoords();\n      setOutput(getA(${switched}));\n    }\n    `;\n  }\n}\n\nfunction getSwitchedCoords(newDim: number[]): string {\n  const rank = newDim.length;\n  if (rank > 6) {\n    throw Error(`Transpose for rank ${rank} is not yet supported`);\n  }\n  const originalOrder =\n      ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u', 'resRC.v'];\n  const switchedCoords = new Array(rank);\n  for (let i = 0; i < newDim.length; i++) {\n    switchedCoords[newDim[i]] = originalOrder[i];\n  }\n  return switchedCoords.join();\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getVecChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TransposePackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    if (this.rank > 6) {\n      throw Error(\n          `Packed transpose for rank ${this.rank} is not yet supported.`);\n    }\n    const dtype = getCoordsDataType(this.rank);\n\n    const outputOrder = getVecChannels('rc', this.rank);\n    const switchedOrder = new Array(this.rank);\n    for (let i = 0; i < newDim.length; i++) {\n      switchedOrder[newDim[i]] = outputOrder[i];\n    }\n    const innerDims = `vec2(${switchedOrder.slice(-2).join()})`;\n    const nextColumn =\n        `++${outputOrder[this.rank - 1]} < ${outputShape[this.rank - 1]}`;\n    const getc = `getChannel(getA(${switchedOrder.join()}), ${innerDims})`;\n\n    this.userCode = `\n    void main() {\n      ${dtype} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${getc};\n      if(${nextColumn}) {\n        result[1] = ${getc};\n      }\n      --${outputOrder[this.rank - 1]};\n      if(++${outputOrder[this.rank - 2]} < ${outputShape[this.rank - 2]}) {\n        result[2] = ${getc};\n        if(${nextColumn}) {\n          result[3] = ${getc};\n        }\n      }\n      setOutput(result);\n    }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {transposeImplCPU} from '../kernel_utils/shared';\nimport {TransposeProgram} from '../transpose_gpu';\nimport {TransposePackedProgram} from '../transpose_packed_gpu';\n\nexport function transposeImpl(\n    x: TensorInfo, perm: number[], backend: MathBackendWebGL): TensorInfo {\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n      new TransposePackedProgram(x.shape, perm) :\n      new TransposeProgram(x.shape, perm);\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport {transposeImplCPU};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Sum, SumAttrs, SumInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {sumImpl} from './Sum_impl';\n\nexport function sum(\n    args: {inputs: SumInputs, attrs: SumAttrs, backend: MathBackendWebGL}) {\n  const {inputs, backend, attrs} = args;\n\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  return sumImpl(x, axis, keepDims, backend);\n}\n\nexport const sumConfig: KernelConfig = {\n  kernelName: Sum,\n  backendName: 'webgl',\n  kernelFunc: sum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, sumOutType, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from './Reshape';\n\nimport {transposeImpl} from './Transpose_impl';\n\nexport function sumImpl(\n    x: TensorInfo, axis: number|number[], keepDims: boolean,\n    backend: MathBackendWebGL): TensorInfo {\n  const reductionIndices = axis;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  const sumInputIsTransposed = permutedAxes != null;\n\n  let sumInput = x;\n  if (sumInputIsTransposed) {\n    sumInput = transposeImpl(x, permutedAxes, backend);\n\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);\n  const [sumOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(sumInput.shape, axes);\n\n  let outShape = sumOutShape;\n  if (keepDims) {\n    // rather than reshape at the end, set the target shape here.\n    outShape = backend_util.expandShapeToKeepDim(sumOutShape, origAxes);\n  }\n\n  const inSize = util.sizeFromShape(reduceShape);\n  const xSize = util.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput = reshape(\n      {inputs: {x: sumInput}, attrs: {shape: [batchSize, inSize]}, backend});\n\n  const outType = sumOutType(x.dtype);\n\n  const reduced = reduce(reshapedInput, outType, 'sum', backend);\n  const out =\n      reshape({inputs: {x: reduced}, attrs: {shape: outShape}, backend});\n\n  backend.disposeIntermediateTensorInfo(reshapedInput);\n  backend.disposeIntermediateTensorInfo(reduced);\n  if (sumInputIsTransposed) {\n    backend.disposeIntermediateTensorInfo(sumInput);\n  }\n\n  return out;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transpose, TransposeAttrs, TransposeInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {transposeImpl} from './Transpose_impl';\nimport {transposeImplCPU as cpuTranspose} from './Transpose_impl';\n\nexport function transpose(args: {\n  inputs: TransposeInputs,\n  attrs: TransposeAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {perm} = attrs;\n  const webglBackend = backend;\n\n  const xRank = x.shape.length;\n\n  const newShape: number[] = new Array(xRank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n\n  let out: TensorInfo;\n  if (webglBackend.shouldExecuteOnCPU([x])) {\n    const xTexData = webglBackend.texData.get(x.dataId);\n    const values = xTexData.values as TypedArray;\n    const outValues = cpuTranspose(values, x.shape, x.dtype, perm, newShape);\n\n    out = webglBackend.makeTensorInfo(newShape, x.dtype);\n    const outData = webglBackend.texData.get(out.dataId);\n    outData.values = outValues;\n  } else {\n    out = transposeImpl(x, perm, webglBackend);\n  }\n  return out;\n}\n\nexport const transposeConfig: KernelConfig = {\n  kernelName: Transpose,\n  backendName: 'webgl',\n  kernelFunc: transpose as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, broadcast_util, TensorInfo, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\nimport {MatMulPackedProgram} from '../mulmat_packed_gpu';\n\nimport {multiply} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\n// Empirically determined minimal shared dimension in matmul before we forward\n// to a.mul(b).sum() in order to take advantage of GPU parallelism. See\n// https://github.com/tensorflow/tfjs-core/pull/1379 for benchmarks.\nexport const MATMUL_SHARED_DIM_THRESHOLD = 1000;\n\ntype BatchMatMulConfig = {\n  a: TensorInfo,\n  b: TensorInfo,\n  transposeA: boolean,\n  transposeB: boolean,\n  backend: MathBackendWebGL,\n  bias?: TensorInfo,\n  preluActivationWeights?: TensorInfo,\n  leakyreluAlpha?: number,\n  activation?: backend_util.Activation\n};\n\nexport function batchMatMulImpl({\n  a,\n  b,\n  transposeA,\n  transposeB,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: BatchMatMulConfig): TensorInfo {\n  const aRank = a.shape.length;\n  const bRank = b.shape.length;\n\n  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n\n  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n\n  const outerDimsA = a.shape.slice(0, -2);\n  const outerDimsB = b.shape.slice(0, -2);\n\n  const batchDimA = util.sizeFromShape(outerDimsA);\n  const batchDimB = util.sizeFromShape(outerDimsB);\n\n  const outShapeOuterDims = broadcast_util.assertAndGetBroadcastShape(\n      a.shape.slice(0, -2), b.shape.slice(0, -2));\n  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n\n  util.assert(\n      innerShapeA === innerShapeB,\n      () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n          `${innerShapeB}) of Tensors with shapes ${a.shape} and ` +\n          `${b.shape} and transposeA=${transposeA}` +\n          ` and transposeB=${transposeB} must match.`);\n\n  const a3dShape: [number, number, number] = transposeA ?\n      [batchDimA, innerShapeA, outerShapeA] :\n      [batchDimA, outerShapeA, innerShapeA];\n  const b3dShape: [number, number, number] = transposeB ?\n      [batchDimB, outerShapeB, innerShapeB] :\n      [batchDimB, innerShapeB, outerShapeB];\n\n  // The rest of the implementation is designed to operate on rank-3 tensors\n  const a3d = reshape({inputs: {x: a}, backend, attrs: {shape: a3dShape}});\n  const b3d = reshape({inputs: {x: b}, backend, attrs: {shape: b3dShape}});\n\n  const intermediates: TensorInfo[] = [a3d, b3d];\n\n  const batchDim = Math.max(batchDimA, batchDimB);\n  const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n  const fusedActivation = activation != null ?\n      mapActivationToShaderProgram(activation, true) :\n      null;\n  const containsFusedOps = hasBias || hasPreluActivationWeights ||\n      hasLeakyreluAlpha || fusedActivation != null;\n  let out: TensorInfo;\n\n  // Since the matrices are vectors, it is faster to call mul().sum()\n  // because sum() is O(sqrt(N)) due to divide-and-conquer.\n  if ((outerShapeA === 1 || outerShapeB === 1) &&\n      sharedDim > MATMUL_SHARED_DIM_THRESHOLD && containsFusedOps === false) {\n    let aVec = a3d;\n    let bVec = b3d;\n    if (transposeA) {\n      aVec = transpose({inputs: {x: a3d}, backend, attrs: {perm: [0, 2, 1]}});\n      intermediates.push(aVec);\n    }\n    if (transposeB) {\n      bVec = transpose({inputs: {x: b3d}, backend, attrs: {perm: [0, 2, 1]}});\n      intermediates.push(bVec);\n    }\n\n    const shouldReshapeA = outerShapeB !== 1;\n    const shouldReshapeB = outerShapeB === 1;\n\n    let aVec3d = aVec;\n    if (shouldReshapeA) {\n      aVec3d = reshape({\n        inputs: {x: aVec},\n        backend,\n        attrs: {shape: [batchDim, sharedDim, 1]}\n      });\n\n      intermediates.push(aVec3d);\n    }\n\n    const axis = outerShapeB === 1 ? 2 : 1;\n\n    let bVec3d = bVec;\n    if (shouldReshapeB) {\n      bVec3d = reshape({\n        inputs: {x: bVec},\n        backend,\n        attrs: {shape: [batchDim, 1, sharedDim]}\n      });\n\n      intermediates.push(bVec3d);\n    }\n\n    const product = multiply({inputs: {a: aVec3d, b: bVec3d}, backend});\n    out = sum({inputs: {x: product}, backend, attrs: {axis, keepDims: true}});\n    intermediates.push(product);\n  } else {\n    const dtype = upcastType(a.dtype, b.dtype);\n\n    const program = new MatMulPackedProgram(\n        a3dShape, b3dShape, [batchDim, outerShapeA, outerShapeB], transposeA,\n        transposeB, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n\n    const inputs: TensorInfo[] = [a3d, b3d];\n    if (bias != null) {\n      inputs.push(bias);\n    }\n    if (hasPreluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n    if (hasLeakyreluAlpha) {\n      const $leakyreluAlpha = backend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(leakyreluAlpha as {} as 'float32', 'float32'));\n      inputs.push($leakyreluAlpha);\n      intermediates.push($leakyreluAlpha);\n    }\n\n    out = backend.runWebGLProgram(program, inputs, dtype);\n  }\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: outShape}});\n  intermediates.push(out);\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n  return outReshaped;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {batchMatMulImpl} from './BatchMatMul_impl';\n\nexport function _fusedMatMul(args: {\n  inputs: _FusedMatMulInputs,\n  attrs: _FusedMatMulAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b, bias, preluActivationWeights} = inputs;\n  const {transposeA, transposeB, activation, leakyreluAlpha} = attrs;\n\n  return batchMatMulImpl({\n    a,\n    b,\n    transposeA,\n    transposeB,\n    backend,\n    bias,\n    preluActivationWeights,\n    leakyreluAlpha,\n    activation\n  });\n}\n\nexport const _fusedMatMulConfig: KernelConfig = {\n  kernelName: _FusedMatMul,\n  backendName: 'webgl',\n  kernelFunc: _fusedMatMul as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, AbsInputs, env, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {simpleAbsImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpProgram} from '../unaryop_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nconst ABS = `return abs(x);`;\n\nexport function abs(args: {inputs: AbsInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  // TODO: handle cases when x is complex. Once the cpu implementation\n  // can handle complex values, refactor to use unaryKernelFunc.\n  if (backend.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n    const xData = backend.texData.get(x.dataId);\n    const outValues = simpleAbsImplCPU(xData.values as TypedArray);\n    return backend.makeTensorInfo(x.shape, x.dtype, outValues);\n  }\n\n  let program: UnaryOpProgram|UnaryOpPackedProgram;\n  if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n    program = new UnaryOpPackedProgram(x.shape, ABS);\n  } else {\n    program = new UnaryOpProgram(x.shape, ABS);\n  }\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'webgl',\n  kernelFunc: abs as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ACOS = CHECK_NAN_SNIPPET + `\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n`;\n\nexport const acos = unaryKernelFunc({opSnippet: ACOS});\n\nexport const acosConfig: KernelConfig = {\n  kernelName: Acos,\n  backendName: 'webgl',\n  kernelFunc: acos,\n};\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ACOSH = CHECK_NAN_SNIPPET + `\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));`;\n\nexport const acosh = unaryKernelFunc({opSnippet: ACOSH});\n\nexport const acoshConfig: KernelConfig = {\n  kernelName: Acosh,\n  backendName: 'webgl',\n  kernelFunc: acosh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Add, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {addImplCPU as cpuAdd} from '../kernel_utils/shared';\n\nconst ADD = 'return a + b;';\n\nexport const addKernelFunc = binaryKernelFunc({\n  opSnippet: ADD,\n  packedOpSnippet: ADD,\n  supportsComplex: true,\n  cpuKernelImpl: cpuAdd\n});\n\nexport const addConfig: KernelConfig = {\n  kernelName: Add,\n  backendName: 'webgl',\n  kernelFunc: addKernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AddNProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(outputShape: number[], shapes: number[][]) {\n    this.outputShape = outputShape;\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const snippets: string[] = [];\n    // Get target elements from every input tensor.\n    this.variableNames.forEach(variable => {\n      snippets.push(`float v${variable} = get${variable}AtOutCoords();`);\n    });\n\n    // Calculate the sum of all elements.\n    const operation = this.variableNames\n                          .map(variable => {\n                            return `v${variable}`;\n                          })\n                          .join(' + ');\n\n    this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        float result = ${operation};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AddNPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(outputShape: number[], shapes: number[][]) {\n    this.outputShape = outputShape;\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const snippets: string[] = [];\n    // Get target elements from every input tensor.\n    this.variableNames.forEach(variable => {\n      snippets.push(`vec4 v${variable} = get${variable}AtOutCoords();`);\n    });\n\n    // Calculate the sum of all elements.\n    const operation = this.variableNames\n                          .map(variable => {\n                            return `v${variable}`;\n                          })\n                          .join(' + ');\n\n    this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        vec4 result = ${operation};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AddN, AddNInputs, env, KernelConfig, KernelFunc, TensorInfo, upcastType} from '@tensorflow/tfjs-core';\n\nimport {AddNProgram} from '../addn_gpu';\nimport {AddNPackedProgram} from '../addn_packed_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\nexport function addN(args: {inputs: AddNInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n\n  const tensors = inputs;\n  if (tensors.length === 1) {\n    return identity({inputs: {x: tensors[0]}, backend});\n  }\n\n  // Limit the number of uploaded textures for optimization.\n  if (tensors.length > env().get('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n    const midIndex = Math.floor(tensors.length / 2);\n    const leftSide = addN({inputs: tensors.slice(0, midIndex), backend});\n    const rightSide = addN({inputs: tensors.slice(midIndex), backend});\n    return addN({inputs: [leftSide, rightSide], backend});\n  }\n\n  const dtype =\n      tensors.map(t => t.dtype).reduce((d1, d2) => upcastType(d1, d2));\n  const shapes = tensors.map(t => t.shape);\n  // We can make sure shapes are identical in op level.\n  const usePackedOp = env().getBool('WEBGL_PACK');\n  const program = usePackedOp ?\n      new AddNPackedProgram(tensors[0].shape, shapes) :\n      new AddNProgram(tensors[0].shape, shapes);\n  return backend.runWebGLProgram(program, tensors, dtype);\n}\n\nexport const addNConfig: KernelConfig = {\n  kernelName: AddN,\n  backendName: 'webgl',\n  kernelFunc: addN as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {All, AllAttrs, AllInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\n\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function all(\n    args: {inputs: AllInputs, backend: MathBackendWebGL, attrs: AllAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('all', axes, xRank);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n  const inSize = util.sizeFromShape(reduceShape);\n\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  const reduced = reduce(a2D, a2D.dtype, 'all', backend);\n\n  let res;\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: newShape}});\n  } else {\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n  }\n\n  backend.disposeIntermediateTensorInfo(a2D);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return res;\n}\n\nexport const allConfig: KernelConfig = {\n  kernelName: All,\n  backendName: 'webgl',\n  kernelFunc: all as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Any, AnyAttrs, AnyInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function any(\n    args: {inputs: AnyInputs, backend: MathBackendWebGL, attrs: AnyAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('any', axes, xRank);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n  const inSize = util.sizeFromShape(reduceShape);\n\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  const reduced = reduce(a2D, a2D.dtype, 'any', backend);\n\n  let res;\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: newShape}});\n  } else {\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n  }\n\n  backend.disposeIntermediateTensorInfo(a2D);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return res;\n}\n\nexport const anyConfig: KernelConfig = {\n  kernelName: Any,\n  backendName: 'webgl',\n  kernelFunc: any as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ArgMinMaxProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      reduceInfo: backend_util.ReduceInfo, op: 'max'|'min',\n      firstPass: boolean) {\n    const {windowSize, batchSize, outSize} = reduceInfo;\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n    this.outputShape = [batchSize, outSize];\n    const compOp = (op === 'max') ? '>' : '<';\n    const indexSnippet = firstPass ?\n        'inOffset + i;' :\n        'round(getBestIndicesA(batch, inOffset + i));';\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          int inIdx = ${indexSnippet};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${compOp} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ArgMinMaxPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      shape: number[], windowSize: number, op: 'max'|'min',\n      firstPass: boolean) {\n    util.assert(\n        shape.length > 2,\n        () => `Packed arg${\n            op.charAt(0).toUpperCase() +\n            op.slice(1)} supports only inputs with rank above 2.`);\n    const inSize = shape[shape.length - 1];\n    const outSize = Math.ceil(inSize / windowSize);\n    this.outputShape = shape.slice(0, -1);\n    if (outSize > 1) {\n      this.outputShape.push(outSize);\n    }\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n    const outShape = this.outputShape;\n    const rank = outShape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n\n    let sourceLocSetup;\n    let sourceRank;\n    if (outSize === 1) {\n      sourceRank = rank + 1;\n      const sourceLocDType = getCoordsDataType(sourceRank);\n      sourceLocSetup = `\n        ${sourceLocDType} sourceLocR = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 1]};\n        ${sourceLocDType} sourceLocG = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 2]};\n        ${sourceLocDType} sourceLocA = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 1]};\n        ${sourceLocDType} sourceLocB = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 2]};`;\n    } else {\n      sourceRank = rank;\n      sourceLocSetup = `\n        ${dtype} sourceLocR = coords;\n        ++${coords[rank - 1]};\n        ${dtype} sourceLocG = coords;\n        ++${coords[rank - 2]};\n        ${dtype} sourceLocA = coords;\n        --${coords[rank - 1]};\n        ${dtype} sourceLocB = coords;\n        --${coords[rank - 2]};`;\n    }\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, sourceRank);\n    const inChannel = '.' + channels[sourceRank - 1];  // e.g. \".b\" for rank 3.\n    const intChannels = channels.map(x => 'int ' + x);\n    const srcRCoords =\n        getChannels('sourceLocR', sourceRank - 1).concat('inIdx.r');\n    const srcGCoords =\n        getChannels('sourceLocG', sourceRank - 1).concat('inIdx.g');\n    const srcBCoords =\n        getChannels('sourceLocB', sourceRank - 1).concat('inIdx.b');\n    const srcACoords =\n        getChannels('sourceLocA', sourceRank - 1).concat('inIdx.a');\n\n    const compOp = (op === 'max') ? 'greaterThan' : 'lessThan';\n    const fetchCandidateIdx = firstPass ? '' : `\n          inIdx = round(vec4(getBestIndicesAChannel(${srcRCoords.join()}),\n                             getBestIndicesAChannel(${srcGCoords.join()}),\n                             getBestIndicesAChannel(${srcBCoords.join()}),\n                             getBestIndicesAChannel(${srcACoords.join()})));`;\n\n    const fetchValue = `vec4(\n            getAChannel(${srcRCoords.join()}),\n            hasNextCol ? getAChannel(${srcGCoords.join()}) : 0.,\n            hasNextRow ? getAChannel(${srcBCoords.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${srcACoords.join()}) : 0.)`;\n\n    const getBestIndicesAChannelSnippet = firstPass ? '' : `\n      float getBestIndicesAChannel(${intChannels.join()}) {\n        return getChannel(getBestIndicesA(${channels.join()}),\n                                          vec2(${channels.slice(-2).join()}));\n      }`;\n\n    this.userCode = `\n      float getAChannel(${intChannels.join()}) {\n        return getChannel(getA(${channels.join()}),\n                               vec2(${channels.slice(-2).join()}));\n      }\n      ${getBestIndicesAChannelSnippet}\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        bool hasNextCol = ${coords[rank - 1]} < ${outShape[rank - 1] - 1};\n        bool hasNextRow = ${coords[rank - 2]} < ${outShape[rank - 2] - 1};\n        ${sourceLocSetup}\n        ivec4 srcIdx = ivec4(sourceLocR${inChannel}, sourceLocG${inChannel},\n          sourceLocB${inChannel}, sourceLocA${inChannel}) * ${windowSize};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${fetchValue};\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          inIdx = srcIdx;\n          ${fetchCandidateIdx}\n          vec4 candidate = ${fetchValue};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${compOp}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {ArgMinMaxProgram} from '../argminmax_gpu';\nimport {ArgMinMaxPackedProgram} from '../argminmax_packed_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reshape} from '../kernels/Reshape';\n\nfunction argReduce(\n    backend: MathBackendWebGL, x: TensorInfo, reduceType: 'max'|'min',\n    bestIndicesA: TensorInfo = null): TensorInfo {\n  let batchSize = x.shape[0];\n  let inSize = x.shape[1];\n  if (bestIndicesA != null) {\n    batchSize = bestIndicesA.shape[0];\n    inSize = bestIndicesA.shape[1];\n  }\n  const windowSize = backend_util.computeOptimalWindowSize(inSize);\n  const reduceInfo =\n      {windowSize, inSize, batchSize, outSize: Math.ceil(inSize / windowSize)};\n  const program =\n      new ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n  const inputs = [x];\n  if (bestIndicesA != null) {\n    inputs.push(bestIndicesA);\n  }\n  const output = backend.runWebGLProgram(program, inputs, 'int32');\n  // No need to run another GPGPU program.\n  if (output.shape[1] === 1) {\n    return output;\n  }\n  const result = argReduce(backend, x, reduceType, output);\n  backend.disposeIntermediateTensorInfo(output);\n  return result;\n}\n\nfunction argReducePacked(\n    backend: MathBackendWebGL, x: TensorInfo, reduceType: 'max'|'min',\n    bestIndicesA: TensorInfo = null): TensorInfo {\n  const inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;\n  const inSize = inShape[inShape.length - 1];\n  const windowSize = backend_util.computeOptimalWindowSize(inSize);\n  const program = new ArgMinMaxPackedProgram(\n      inShape, windowSize, reduceType, bestIndicesA == null);\n  const inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];\n  const output = backend.runWebGLProgram(program, inputs, 'int32');\n  if (output.shape.length === x.shape.length) {\n    const result = argReducePacked(backend, x, reduceType, output);\n    backend.disposeIntermediateTensorInfo(output);\n    return result;\n  }\n  return output;\n}\n\nexport function argMinMaxReduce(\n    backend: MathBackendWebGL, x: TensorInfo, axis: number,\n    reduceType: 'min'|'max'): TensorInfo {\n  const axes = [axis];\n  backend_util.assertAxesAreInnerMostDims(\n      'arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes,\n      x.shape.length);\n  if (!env().getBool('WEBGL_PACK_REDUCE') || x.shape.length <= 2) {\n    const intermediateTensorInfos = [];\n    // Eagerly unpack x input since it is passed in to all the shaders which\n    // require unpacked inputs.\n    const xtexData = backend.texData.get(x.dataId);\n    const xIsPacked = xtexData !== null && xtexData.isPacked;\n    let xUnPacked = x;\n    if (xIsPacked) {\n      xUnPacked = backend.unpackTensor(x);\n      intermediateTensorInfos.push(xUnPacked);\n    }\n\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(xUnPacked.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape(\n        {inputs: {x: xUnPacked}, backend, attrs: {shape: [-1, inSize]}});\n    intermediateTensorInfos.push(a2D);\n\n    const reduced = argReduce(backend, a2D, reduceType);\n    intermediateTensorInfos.push(reduced);\n    const reshaped =\n        reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n\n    intermediateTensorInfos.forEach(\n        t => backend.disposeIntermediateTensorInfo(t));\n    return reshaped;\n  }\n  return argReducePacked(backend, x, reduceType);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMax, ArgMaxAttrs, ArgMaxInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {argMinMaxReduce} from '../kernel_utils/arg_min_max';\n\nimport {transpose} from './Transpose';\n\nexport function argMax(\n    args:\n        {inputs: ArgMaxInputs, backend: MathBackendWebGL, attrs: ArgMaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('argMax', [axes[0]], $x.shape.length);\n  const out = argMinMaxReduce(backend, $x, axes[0], 'max');\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n  return out;\n}\n\nexport const argMaxConfig: KernelConfig = {\n  kernelName: ArgMax,\n  backendName: 'webgl',\n  kernelFunc: argMax as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMin, ArgMinAttrs, ArgMinInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {argMinMaxReduce} from '../kernel_utils/arg_min_max';\nimport {transpose} from './Transpose';\n\nexport function argMin(\n    args:\n        {inputs: ArgMinInputs, backend: MathBackendWebGL, attrs: ArgMinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('argMin', [axes[0]], $x.shape.length);\n\n  const out = argMinMaxReduce(backend, $x, axes[0], 'min');\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n  return out;\n}\n\nexport const argMinConfig: KernelConfig = {\n  kernelName: ArgMin,\n  backendName: 'webgl',\n  kernelFunc: argMin as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asin, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ASIN = CHECK_NAN_SNIPPET + `\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n`;\n\nexport const asin = unaryKernelFunc({opSnippet: ASIN});\n\nexport const asinConfig: KernelConfig = {\n  kernelName: Asin,\n  backendName: 'webgl',\n  kernelFunc: asin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asinh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ASINH = CHECK_NAN_SNIPPET + `return log(x + sqrt(x * x + 1.0));`;\n\nexport const asinh = unaryKernelFunc({opSnippet: ASINH});\n\nexport const asinhConfig: KernelConfig = {\n  kernelName: Asinh,\n  backendName: 'webgl',\n  kernelFunc: asinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ATAN = CHECK_NAN_SNIPPET + `\n  return atan(x);\n`;\n\nexport const atan = unaryKernelFunc({opSnippet: ATAN});\n\nexport const atanConfig: KernelConfig = {\n  kernelName: Atan,\n  backendName: 'webgl',\n  kernelFunc: atan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan2} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc, CHECK_NAN_SNIPPET_BINARY, CHECK_NAN_SNIPPET_BINARY_PACKED} from '../kernel_utils/kernel_funcs_utils';\n\nconst ATAN2 = CHECK_NAN_SNIPPET_BINARY + `\n  return atan(a, b);\n`;\n\nconst ATAN2_PACKED = `\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  ` +\n    CHECK_NAN_SNIPPET_BINARY_PACKED + `\n  return result;\n`;\n\nexport const atan2 =\n    binaryKernelFunc({opSnippet: ATAN2, packedOpSnippet: ATAN2_PACKED});\n\nexport const atan2Config: KernelConfig = {\n  kernelName: Atan2,\n  backendName: 'webgl',\n  kernelFunc: atan2,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atanh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ATANH = CHECK_NAN_SNIPPET + `\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;`;\n\nexport const atanh = unaryKernelFunc({opSnippet: ATANH});\n\nexport const atanhConfig: KernelConfig = {\n  kernelName: Atanh,\n  backendName: 'webgl',\n  kernelFunc: atanh,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Pool2DProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, poolType: 'max'|'avg',\n      computePositions: boolean, flattenPositions = false,\n      includeBatchInIndex = false) {\n    if (poolType === 'avg' && computePositions) {\n      throw new Error('Cannot compute positions for average pool.');\n    }\n\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    this.outputShape = convInfo.outShape;\n\n    const isAvgPool = poolType === 'avg';\n    const batchFlattenPositionStr = `((batch  * ${convInfo.inHeight} + xR) * ${\n        convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n    const flattenPositionStr =\n        `(xR * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n\n    let initializationValue = '0.0';\n    if (!isAvgPool) {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n    }\n\n    if (computePositions) {\n      const compareOp = '>=';\n\n      this.userCode = `\n        const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n        const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${compareOp} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${\n          flattenPositions ? (includeBatchInIndex ? batchFlattenPositionStr :\n                                                    flattenPositionStr) :\n                             `wR * ${effectiveFilterWidth} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n      return;\n    }\n\n    const compareOp = 'max';\n\n    let returnValue = `${poolType}(${poolType}(${poolType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n    if (poolType === 'avg') {\n      returnValue = `avgValue / count`;\n    }\n\n    const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n    const filterWidthVec4Remainder = filterWidth % 4;\n\n    const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n\n    this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              getValue(batch, xR, xC + 3 * ${dilationWidth}, d)\n            );\n\n            ${updateSnippet}\n          }\n\n          int xC = xCCorner + ${filterWidthNearestVec4};\n          if (${filterWidthVec4Remainder === 1}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 2}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 3}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              initializationValue\n            );\n\n            ${updateSnippet}\n          }\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n\nexport class Pool3DProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv3DInfo, poolType: 'max'|'avg',\n      computePositions: boolean, flattenPositions = false,\n      includeBatchInIndex = false) {\n    if (poolType === 'avg' && computePositions) {\n      throw new Error('Cannot compute positions for average pool.');\n    }\n\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    this.outputShape = convInfo.outShape;\n\n    const isAvgPool = poolType === 'avg';\n\n    let initializationValue = '0.0';\n    if (!isAvgPool) {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n    }\n\n    if (computePositions) {\n      const compareOp = '>=';\n\n      this.userCode = `\n        const ivec3 strides =\n            ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n        const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${effectiveFilterDepth};\n              wD += ${dilationDepth}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${effectiveFilterHeight};\n                wR += ${dilationHeight}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${effectiveFilterWidth};\n                  wC += ${dilationWidth}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${compareOp} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${\n          flattenPositions ?\n              (includeBatchInIndex ?\n                   `(((batch * ${convInfo.inDepth} + xD) * ${\n                       convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${\n                       convInfo.inChannels} + ch` :\n                   `((xD * ${convInfo.inHeight} + xR) * ${\n                       convInfo.inWidth} + xC) * ${convInfo.inChannels} + ch`) :\n              `wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                      wR * ${effectiveFilterWidth} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n      return;\n    }\n\n    const compareOp = 'max';\n\n    let returnValue = `${poolType}(${poolType}(${poolType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n    if (poolType === 'avg') {\n      returnValue = `avgValue / count`;\n    }\n\n    const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n    const filterWidthVec4Remainder = filterWidth % 4;\n\n    const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n\n    this.userCode = `\n      const ivec3 strides =\n        ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${dilationWidth}, ch)\n              );\n\n              ${updateSnippet}\n            }\n\n            int xC = xCCorner + ${filterWidthNearestVec4};\n            if (${filterWidthVec4Remainder === 1}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 2}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 3}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                initializationValue\n              );\n\n              ${updateSnippet}\n            }\n          }\n          setOutput(${returnValue});\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool, AvgPoolAttrs, AvgPoolInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool2DProgram} from '../pool_gpu';\nimport {assertNotComplex} from '../webgl_util';\nimport {identity} from './Identity';\n\nexport function avgPool(args: {\n  inputs: AvgPoolInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPoolAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'avgPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in avgPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    return identity({inputs: {x}, backend});\n  }\n  const avgPoolProgram = new Pool2DProgram(convInfo, 'avg', false);\n  return backend.runWebGLProgram(avgPoolProgram, [x], 'float32');\n}\n\nexport const avgPoolConfig: KernelConfig = {\n  kernelName: AvgPool,\n  backendName: 'webgl',\n  kernelFunc: avgPool as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool3D, AvgPool3DAttrs, AvgPool3DInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool3DProgram} from '../pool_gpu';\n\nexport function avgPool3D(args: {\n  inputs: AvgPool3DInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode, dataFormat);\n  const avgPoolProgram = new Pool3DProgram(convInfo, 'avg', false);\n  return backend.runWebGLProgram(avgPoolProgram, [x], 'float32');\n}\n\nexport const avgPool3DConfig: KernelConfig = {\n  kernelName: AvgPool3D,\n  backendName: 'webgl',\n  kernelFunc: avgPool3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AvgPool2DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const avgMultiplier = 1 / (filterHeight * filterWidth);\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth};\n            wC+= ${dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class AvgPool3DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool3DGrad, AvgPool3DGradAttrs, AvgPool3DGradInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {AvgPool3DBackpropProgram} from '../avg_pool_backprop_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function avgPool3DGrad(args: {\n  inputs: AvgPool3DGradInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  const avgPoolBackpropProgram = new AvgPool3DBackpropProgram(convInfo);\n  return backend.runWebGLProgram(avgPoolBackpropProgram, [dy], x.dtype);\n}\n\nexport const avgPool3DGradConfig: KernelConfig = {\n  kernelName: AvgPool3DGrad,\n  backendName: 'webgl',\n  kernelFunc: avgPool3DGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPoolGrad, AvgPoolGradAttrs, AvgPoolGradInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {AvgPool2DBackpropProgram} from '../avg_pool_backprop_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {assertNotComplex} from '../webgl_util';\n\nexport function avgPoolGrad(args: {\n  inputs: AvgPoolGradInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  assertNotComplex([dy, input], 'avgPoolGrad');\n  const {filterSize, strides, pad} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad);\n  const avgPoolBackpropProgram = new AvgPool2DBackpropProgram(convInfo);\n  return backend.runWebGLProgram(avgPoolBackpropProgram, [dy], x.dtype);\n}\n\nexport const avgPoolGradConfig: KernelConfig = {\n  kernelName: AvgPoolGrad,\n  backendName: 'webgl',\n  kernelFunc: avgPoolGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BatchMatMul, BatchMatMulAttrs, BatchMatMulInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {batchMatMulImpl} from './BatchMatMul_impl';\n\nexport function batchMatMul(args: {\n  inputs: BatchMatMulInputs,\n  attrs: BatchMatMulAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b} = inputs;\n  const {transposeA, transposeB} = attrs;\n\n  return batchMatMulImpl({a, b, transposeA, transposeB, backend});\n}\n\nexport const batchMatMulConfig: KernelConfig = {\n  kernelName: BatchMatMul,\n  backendName: 'webgl',\n  kernelFunc: batchMatMul as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class BatchNormProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      xShape: number[], meanShape: number[], varianceShape: number[],\n      offsetShape: number[]|null, scaleShape: number[]|null,\n      varianceEpsilon: number) {\n    this.variableNames = ['x', 'mean', 'variance'];\n    backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n\n    let offsetSnippet = '0.0';\n    if (offsetShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n      offsetSnippet = 'getOffsetAtOutCoords()';\n    }\n\n    let scaleSnippet = '1.0';\n    if (scaleShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n      scaleSnippet = 'getScaleAtOutCoords()';\n    }\n\n    this.outputShape = xShape;\n    this.userCode = `\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${offsetSnippet};\n        float scale = ${scaleSnippet};\n        float inv = scale * inversesqrt(variance + float(${varianceEpsilon}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class BatchNormPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      xShape: number[], meanShape: number[], varianceShape: number[],\n      offsetShape: number[]|null, scaleShape: number[]|null,\n      varianceEpsilon: number) {\n    this.variableNames = ['x', 'mean', 'variance'];\n    backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n\n    let offsetSnippet = 'vec4(0.0)';\n    if (offsetShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n      offsetSnippet = 'getOffsetAtOutCoords()';\n    }\n\n    let scaleSnippet = 'vec4(1.0)';\n    if (scaleShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n      scaleSnippet = 'getScaleAtOutCoords()';\n    }\n\n    this.outputShape = xShape;\n    this.userCode = `\n      void main() {\n        vec4 offset = ${offsetSnippet};\n        vec4 scale = ${scaleSnippet};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${varianceEpsilon}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `;\n  }\n}\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, FusedBatchNorm, FusedBatchNormAttrs, FusedBatchNormInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BatchNormProgram} from '../batchnorm_gpu';\nimport {BatchNormPackedProgram} from '../batchnorm_packed_gpu';\n\nexport const batchNorm: (params: {\n  inputs: FusedBatchNormInputs,\n  backend: MathBackendWebGL,\n  attrs: FusedBatchNormAttrs\n}) => TensorInfo = ({inputs, backend, attrs}) => {\n  const {x, mean, variance, offset, scale} = inputs;\n\n  util.assert(\n      mean.shape.length === variance.shape.length,\n      () => 'Batch normalization gradient requires mean and variance to have ' +\n          'equal ranks.');\n  util.assert(\n      offset == null || mean.shape.length === offset.shape.length,\n      () => 'Batch normalization gradient requires mean and offset to have ' +\n          'equal ranks.');\n  util.assert(\n      scale == null || mean.shape.length === scale.shape.length,\n      () => 'Batch normalization gradient requires mean and scale to have ' +\n          'equal ranks.');\n\n  let {varianceEpsilon} = attrs;\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n\n  const finalInputs = [x, mean, variance];\n\n  let offsetShape = null;\n  if (offset != null) {\n    offsetShape = offset.shape;\n    finalInputs.push(offset);\n  }\n\n  let scaleShape = null;\n  if (scale != null) {\n    scaleShape = scale.shape;\n    finalInputs.push(scale);\n  }\n\n  const program = env().getBool('WEBGL_PACK_NORMALIZATION') ?\n      new BatchNormPackedProgram(\n          x.shape, mean.shape, variance.shape, offsetShape, scaleShape,\n          varianceEpsilon) :\n      new BatchNormProgram(\n          x.shape, mean.shape, variance.shape, offsetShape, scaleShape,\n          varianceEpsilon);\n  const output =\n      backend.runWebGLProgram(program, finalInputs, finalInputs[0].dtype);\n\n  return output;\n};\n\nexport const batchNormConfig: KernelConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'webgl',\n  kernelFunc: batchNorm as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class SliceProgram implements GPGPUProgram {\n  variableNames = ['source'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n  customUniforms: Array<{name: string; arrayIndex: number; type: UniformType;}>;\n\n  constructor(destSize: number[]) {\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n\n    const dtype = getCoordsDataType(this.rank);\n    this.customUniforms = [{name: 'start', arrayIndex: this.rank, type: 'int'}];\n    const sourceCoords = getCoords(this.rank);\n\n    let body: string;\n    const coordSum = destSize.map((_, i) => {\n      return `sourceLoc.${coords[i]} = start[${i}] + coords.${coords[i]};`;\n    });\n    body = `\n        ${dtype} sourceLoc;\n        ${dtype} coords = getOutputCoords();\n        ${coordSum.join('\\n')}\n      `;\n    this.userCode = `\n      void main() {\n        ${body}\n        setOutput(getSource(${sourceCoords}));\n      }\n    `;\n  }\n}\n\nconst coords = ['x', 'y', 'z', 'w', 'u', 'v'];\n\nfunction getCoords(rank: number): string {\n  if (rank === 1) {\n    return 'sourceLoc';\n  } else if (rank <= 6) {\n    return coords.slice(0, rank).map(x => 'sourceLoc.' + x).join(',');\n  } else {\n    throw Error(`Slicing for rank ${rank} is not yet supported`);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class SlicePackedProgram implements GPGPUProgram {\n  variableNames = ['source'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n  customUniforms: Array<{name: string; arrayIndex: number; type: UniformType;}>;\n\n  constructor(destSize: number[]) {\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n    this.customUniforms = [{name: 'start', arrayIndex: this.rank, type: 'int'}];\n    const dtype = getCoordsDataType(this.rank);\n    const coords = getChannels('coords', this.rank);\n    const sourceLoc = getChannels('sourceLoc', this.rank);\n\n    const innerDims =\n        this.rank === 1 ? 'sourceLoc' : `vec2(${sourceLoc.slice(-2).join()})`;\n    const getChannel =\n        `getChannel(getSource(${sourceLoc.join()}), ${innerDims})`;\n    const upperRow = `\n      result.x = ${getChannel};\n      if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n        ++${sourceLoc[this.rank - 1]};\n        result.y = ${getChannel};\n        --${sourceLoc[this.rank - 1]};\n      }\n    `;\n    const lowerRow = this.rank === 1 ? '' : `\n      --${coords[this.rank - 1]};\n      if (++${coords[this.rank - 2]} < ${destSize[this.rank - 2]}) {\n        ++${sourceLoc[this.rank - 2]};\n        result.z = ${getChannel};\n        if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n          ++${sourceLoc[this.rank - 1]};\n          result.w = ${getChannel};\n        }\n      }\n    `;\n\n    const sourceLocSetup = this.rank <= 4 ?\n        `sourceLoc = coords +\n            ${dtype}(${destSize.map((_, i) => `start[${i}]`).join()});` :\n        destSize.map((_, i) => `${sourceLoc[i]} = ${coords[i]} + start[${i}];`)\n            .join('\\n');\n    this.userCode = `\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        ${dtype} sourceLoc;\n        ${sourceLocSetup}\n        vec4 result = vec4(0.);\n        ${upperRow}\n        ${lowerRow}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sliceImplCPU} from '../kernel_utils/shared';\nimport {SliceProgram} from '../slice_gpu';\nimport {SlicePackedProgram} from '../slice_packed_gpu';\n\nfunction shallowSlice(\n    x: TensorInfo, begin: number[], size: number[], backend: MathBackendWebGL) {\n  const xTexData = backend.texData.get(x.dataId);\n  const t = backend.makeTensorInfo(size, x.dtype);\n  const newTexData = backend.texData.get(t.dataId);\n  // Copy texture data from the original tensor.\n  Object.assign(newTexData, xTexData);\n  newTexData.refCount = 1;\n  newTexData.shape = size;\n  newTexData.dtype = x.dtype;\n  let flatOffset =\n      slice_util.computeFlatOffset(begin, util.computeStrides(x.shape));\n  if (xTexData.slice) {\n    // We are slicing an already sliced tensor, so we have to accumulate\n    // the offset.\n    flatOffset += xTexData.slice.flatOffset;\n  }\n  newTexData.slice = {\n    flatOffset,\n    // Point to the original dataId, which is used to do ref counting.\n    origDataId: xTexData.slice && xTexData.slice.origDataId || x.dataId\n  };\n\n  // Increase the ref count for that data bucket.\n  const refCount = backend.dataRefCount.get(newTexData.slice.origDataId) || 1;\n  backend.dataRefCount.set(newTexData.slice.origDataId, refCount + 1);\n  return t;\n}\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: MathBackendWebGL, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  if (util.sizeFromShape($size) === 0) {\n    return backend.makeTensorInfo($size, x.dtype, []);\n  }\n\n  // Run on cpu if dtype is string. For string, the backend represents it\n  // as Uint8Array[], where each Uint8Array is a character. Given that the\n  // computation is only on the outer array, uploading the whole data onto\n  // gpu is wasteful. Also, currently webgl doesn't have a design to\n  // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n  // just run the kernel on cpu if dtype is string.\n  if (backend.shouldExecuteOnCPU([x]) || x.dtype === 'string') {\n    const xTexData = backend.texData.get(x.dataId);\n    const outValues = sliceImplCPU(\n        xTexData.values as TypedArray, $begin, $size, x.shape, x.dtype);\n    return backend.makeTensorInfo($size, x.dtype, outValues);\n  }\n\n  const {isPacked} = backend.texData.get(x.dataId);\n  const isContinous = slice_util.isSliceContinous(x.shape, $begin, $size);\n  if (isPacked || !isContinous) {\n    const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n        new SlicePackedProgram($size) :\n        new SliceProgram($size);\n    const customValues = [$begin];\n    return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n  }\n  backend.uploadToGPU(x.dataId);\n  return shallowSlice(x, $begin, $size, backend);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'webgl',\n  kernelFunc: slice as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BatchToSpaceND, BatchToSpaceNDAttrs, BatchToSpaceNDInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {transpose} from './Transpose';\n\nexport const batchToSpaceND = (args: {\n  inputs: BatchToSpaceNDInputs,\n  backend: MathBackendWebGL,\n  attrs: BatchToSpaceNDAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, crops} = attrs;\n\n  util.assert(\n      x.shape.length <= 4,\n      () => 'batchToSpaceND for rank > 4 with a WebGL backend not ' +\n          'implemented yet');\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted =\n      backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords =\n      backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize =\n      backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n  const toDispose = [];\n\n  const reshapedIntermediate =\n      reshape({inputs: {x}, backend, attrs: {shape: reshaped}});\n  const transposedIntermediate = transpose(\n      {inputs: {x: reshapedIntermediate}, backend, attrs: {perm: permuted}});\n  const reshapedIntermediate2 = reshape({\n    inputs: {x: transposedIntermediate},\n    backend,\n    attrs: {shape: reshapedPermuted}\n  });\n  const sliced = slice({\n    inputs: {x: reshapedIntermediate2},\n    backend,\n    attrs: {begin: sliceBeginCoords, size: sliceSize}\n  });\n\n  toDispose.push(reshapedIntermediate);\n  toDispose.push(transposedIntermediate);\n  toDispose.push(reshapedIntermediate2);\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return sliced;\n};\n\nexport const batchToSpaceNDConfig: KernelConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'webgl',\n  kernelFunc: batchToSpaceND as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Bincount, BincountAttrs, BincountInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {bincountImplCPU} from '../kernel_utils/shared';\n\nexport function bincount(args: {\n  inputs: BincountInputs,\n  backend: MathBackendWebGL,\n  attrs: BincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size} = attrs;\n\n  const xVals = backend.readSync(x.dataId) as TypedArray;\n  const weightsVals = backend.readSync(weights.dataId) as TypedArray;\n\n  const outVals =\n      bincountImplCPU(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n  return backend.makeTensorInfo([size], weights.dtype, outVals);\n}\n\nexport const bincountConfig: KernelConfig = {\n  kernelName: Bincount,\n  backendName: 'webgl',\n  kernelFunc: bincount as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BroadcastArgs, BroadcastArgsInputs, KernelConfig, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function broadcastArgs(args: {\n  inputs: BroadcastArgsInputs,\n  backend: MathBackendWebGL,\n}): TensorInfo {\n  const {inputs, backend} = args;\n  const {s0, s1} = inputs;\n\n  const s0Vals = backend.readSync(s0.dataId) as TypedArray;\n  const s1Vals = backend.readSync(s1.dataId) as TypedArray;\n\n  const broadcastShape = backend_util.assertAndGetBroadcastShape(\n      Array.from(s0Vals), Array.from(s1Vals));\n\n  return backend.makeTensorInfo(\n      [broadcastShape.length], 'int32', Int32Array.from(broadcastShape));\n}\n\nexport const broadcastArgsConfig: KernelConfig = {\n  kernelName: BroadcastArgs,\n  backendName: 'webgl',\n  kernelFunc: broadcastArgs\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NotEqual} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {notEqualImplCPU} from '../kernel_utils/shared';\n\nconst NOT_EQUAL = `return float(a != b);`;\n\nexport const notEqual = binaryKernelFunc(\n    {opSnippet: NOT_EQUAL, cpuKernelImpl: notEqualImplCPU, dtype: 'bool'});\n\nexport const notEqualConfig: KernelConfig = {\n  kernelName: NotEqual,\n  backendName: 'webgl',\n  kernelFunc: notEqual,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Real, RealInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\nexport function real(args: {inputs: RealInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n  const inputData = backend.texData.get(input.dataId);\n\n  return identity({inputs: {x: inputData.complexTensorInfos.real}, backend});\n}\n\nexport const realConfig: KernelConfig = {\n  kernelName: Real,\n  backendName: 'webgl',\n  kernelFunc: real as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport {BinaryInputs, Cast, CastAttrs, CastInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {notEqual} from './NotEqual';\nimport {real} from './Real';\n\nimport {int} from '../kernel_utils/int';\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendWebGL, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    // TODO(annxingyuan): Import kernel function once zeros is modularized.\n    const zerosTensor = tf.zeros(x.shape);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensor}, backend});\n\n    zerosTensor.dispose();\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n    backend.disposeIntermediateTensorInfo(realPart);\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  if (dtype === 'int32') {\n    return int(x, backend);\n  }\n\n  if (dtype === 'bool') {\n    const zerosTensorInfo = backend.makeTensorInfo(\n        [], 'bool', util.getTypedArrayFromDType('bool', 1));\n\n    const binaryInputs: BinaryInputs = {a: x, b: zerosTensorInfo};\n\n    const result = notEqual({inputs: binaryInputs, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    return result;\n  }\n\n  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'webgl',\n  kernelFunc: cast as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {UnaryOpProgram} from '../unaryop_gpu';\n\nconst TO_INT = `return float(int(x));`;\n\nexport function int(input: TensorInfo, backend: MathBackendWebGL): TensorInfo {\n  const program = new UnaryOpProgram(input.shape, TO_INT);\n  const output = backend.runWebGLProgram(program, [input], 'int32');\n  return {dataId: output.dataId, shape: output.shape, dtype: output.dtype};\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Ceil, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {ceilImplCPU} from '../kernel_utils/shared';\n\nconst CEIL = `return ceil(x);`;\n\nexport const ceil = unaryKernelFunc(\n    {opSnippet: CEIL, packedOpSnippet: CEIL, cpuKernelImpl: ceilImplCPU});\n\nexport const ceilConfig: KernelConfig = {\n  kernelName: Ceil,\n  backendName: 'webgl',\n  kernelFunc: ceil as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class ClipProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  customUniforms = [\n    {name: 'minVal', type: 'float' as UniformType},\n    {name: 'maxVal', type: 'float' as UniformType}\n  ];\n\n  constructor(aShape: number[]) {\n    this.outputShape = aShape;\n    this.userCode = `\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class ClipPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  userCode: string;\n  outputShape: number[];\n  customUniforms = [\n    {name: 'minVal', type: 'float' as UniformType},\n    {name: 'maxVal', type: 'float' as UniformType}\n  ];\n\n  constructor(aShape: number[]) {\n    this.outputShape = aShape;\n    this.userCode = `\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ClipByValue, ClipByValueAttrs, ClipByValueInputs, env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ClipProgram} from '../clip_gpu';\nimport {ClipPackedProgram} from '../clip_packed_gpu';\n\nexport function clipByValue(args: {\n  inputs: ClipByValueInputs,\n  backend: MathBackendWebGL,\n  attrs: ClipByValueAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {clipValueMin, clipValueMax} = attrs;\n\n  let program;\n  if (env().getBool('WEBGL_PACK_CLIP')) {\n    program = new ClipPackedProgram(x.shape);\n  } else {\n    program = new ClipProgram(x.shape);\n  }\n  const customValues = [[clipValueMin], [clipValueMax]];\n  return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n}\n\nexport const clipByValueConfig: KernelConfig = {\n  kernelName: ClipByValue,\n  backendName: 'webgl',\n  kernelFunc: clipByValue as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ComplexAbsProgram implements GPGPUProgram {\n  variableNames = ['real', 'imag'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n    this.userCode = `\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ComplexAbs, ComplexAbsInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ComplexAbsProgram} from '../complex_abs_gpu';\n\n// Returns a TensorInfo with the complex shape and the dataId of the\n// underlying part. We need to do this because a reshaped complex tensor is\n// not reflected in its parts.\nfunction makeComplexComponentTensorInfo(\n    complexTensor: TensorInfo, complexPart: TensorInfo): TensorInfo {\n  return {\n    dataId: complexPart.dataId,\n    dtype: complexPart.dtype,\n    shape: complexTensor.shape\n  };\n}\n\nexport function complexAbs(\n    args: {inputs: ComplexAbsInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const xData = backend.texData.get(x.dataId);\n\n  const program = new ComplexAbsProgram(x.shape);\n  const programInputs = [\n    makeComplexComponentTensorInfo(x, xData.complexTensorInfos.real),\n    makeComplexComponentTensorInfo(x, xData.complexTensorInfos.imag),\n  ];\n\n  return backend.runWebGLProgram(\n      program, programInputs, programInputs[0].dtype);\n}\n\nexport const complexAbsConfig: KernelConfig = {\n  kernelName: ComplexAbs,\n  backendName: 'webgl',\n  kernelFunc: complexAbs as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ConcatProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  // Concats 2d tensors along axis=1. See comments in MathBackendWebGL.concat().\n  constructor(shapes: Array<[number, number]>) {\n    this.outputShape = backend_util.computeOutShape(shapes, 1 /* axis */);\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const offsets: number[] = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][1];\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][1];\n    }\n\n    const snippets = [`if (yC < ${offsets[0]}) setOutput(getT0(yR, yC));`];\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1];\n      snippets.push(\n          `else if (yC < ${offsets[i]}) ` +\n          `setOutput(getT${i}(yR, yC-${shift}));`);\n    }\n    const lastIndex = offsets.length;\n    const lastShift = offsets[offsets.length - 1];\n    snippets.push(`else setOutput(getT${lastIndex}(yR, yC-${lastShift}));`);\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${snippets.join('\\n        ')}\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ConcatPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(shapes: number[][], axis: number) {\n    this.outputShape = backend_util.computeOutShape(shapes, axis);\n    const shape = this.outputShape;\n    const rank = shape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const offsets: number[] = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][axis];\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][axis];\n    }\n\n    const channel = channels[axis];\n    const lastChannels = channels.slice(-2);\n    const allChannels = channels.join();\n\n    let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getT0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1];\n      // Note: the >= comparison below may seem unnecessary given the check\n      // above but is needed to workaround branch execution issues on some\n      // devices. It makes all the conditions exclusive without relying on\n      // execution order.\n      getValueSnippet += `\n        if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n          return getChannel(\n            getT${i}(${shiftedChannels(channels, channel, shift)}),\n            vec2(${shiftedChannels(lastChannels, channel, shift)}));\n        }`;\n    }\n    const lastIndex = offsets.length;\n    const shift = offsets[offsets.length - 1];\n    getValueSnippet += `\n        return getChannel(\n          getT${lastIndex}(${shiftedChannels(channels, channel, shift)}),\n          vec2(${shiftedChannels(lastChannels, channel, shift)}));`;\n\n    this.userCode = `\n      float getValue(${channels.map(x => 'int ' + x)}) {\n        ${getValueSnippet}\n      }\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n        if (${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.g = getValue(${coords});\n        }\n\n        ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]}) {\n          result.a = getValue(${coords});\n        }\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]} &&\n            ${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.b = getValue(${coords});\n        }\n        setOutput(result);\n      }\n    `;\n  }\n}\n\n/**\n * Return an expression for coordinates into a vector where a given channel\n * will be offset by [shift].\n *\n * @param channels the channels to consider\n * @param channel the channel we want shifted\n * @param shift  the amount to subtract from the channel.\n *\n * @returns a string of the form 'x, y-[shift], z' where any one channel can\n * have the shift applied.\n */\nfunction shiftedChannels(channels: string[], channel: string, shift: number) {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Imag, ImagInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\nexport function imag(args: {inputs: ImagInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n  const inputData = backend.texData.get(input.dataId);\n\n  return identity({inputs: {x: inputData.complexTensorInfos.imag}, backend});\n}\n\nexport const imagConfig: KernelConfig = {\n  kernelName: Imag,\n  backendName: 'webgl',\n  kernelFunc: imag as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, ConcatInputs, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ConcatProgram} from '../concat_gpu';\nimport {ConcatPackedProgram} from '../concat_packed_gpu';\nimport {concatImplCPU} from '../kernel_utils/shared';\n\nimport {complex} from './Complex';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {reshape} from './Reshape';\n\nexport function concatImpl(\n    inputs: ConcatInputs, axis: number, backend: MathBackendWebGL): TensorInfo {\n  const dtype = inputs[0].dtype;\n  if (dtype === 'complex64') {\n    const reals = inputs.map((t) => real({inputs: {input: t}, backend}));\n    const imags = inputs.map((t) => imag({inputs: {input: t}, backend}));\n\n    const realConcated = concatImpl(reals, axis, backend);\n    const imagConcated = concatImpl(imags, axis, backend);\n\n    const result =\n        complex({inputs: {real: realConcated, imag: imagConcated}, backend});\n\n    reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n    imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n    backend.disposeIntermediateTensorInfo(realConcated);\n    backend.disposeIntermediateTensorInfo(imagConcated);\n\n    return result;\n  }\n\n  let runOnCpu = backend.shouldExecuteOnCPU(inputs);\n\n  // Run on cpu if dtype is string. For string, the backend represents it\n  // as Uint8Array[], where each Uint8Array is a character. Given that the\n  // computation is only on the outer array, uploading the whole data onto\n  // gpu is wasteful. Also, currently webgl doesn't have a design to\n  // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n  // just run the kernel on cpu if dtype is string.\n  if (dtype === 'string') {\n    runOnCpu = true;\n  }\n\n  if (runOnCpu) {\n    // Any concat of n-dimensional tensors across any axis can be reduced to\n    // a concatenation of two-dimensional tensors across the axis 1 by first\n    // partitioning the axes of the original tensors into those less than the\n    // axis to be concatenated and the rest. Then reshape the tensors\n    // into a two-dimensional tensor by collapsing these two sets of axes and\n    // concatenate the resulting matrices across the axis 1, finally reshaping\n    // the result to have the proper shape.\n    const tensors2D = inputs.map(t => {\n      const innerSize = util.sizeFromShape(t.shape.slice(axis));\n      const shape = [-1, innerSize];\n      return reshape({inputs: {x: t}, backend, attrs: {shape}});\n    });\n\n    const inputsValShapes = tensors2D.map(t => {\n      return {vals: backend.readSync(t.dataId), shape: t.shape};\n    });\n\n    // Concats 2d tensors along axis=1.\n    const outShape =\n        backend_util.computeOutShape(tensors2D.map(t => t.shape), 1 /* axis */);\n    const simplyConcat = tensors2D[0].shape[0] === 1;\n    const outVals =\n        concatImplCPU(inputsValShapes, outShape, dtype, simplyConcat);\n\n    const finalOutShape =\n        backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n\n    const outInfo = backend.makeTensorInfo(finalOutShape, dtype, outVals);\n\n    tensors2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n    return outInfo;\n  }\n\n  if (inputs.length > env().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n    const midIndex = Math.floor(inputs.length / 2);\n    const leftSide = concatImpl(inputs.slice(0, midIndex), axis, backend);\n    const rightSide = concatImpl(inputs.slice(midIndex), axis, backend);\n\n    const result = concatImpl([leftSide, rightSide], axis, backend);\n\n    backend.disposeIntermediateTensorInfo(leftSide);\n    backend.disposeIntermediateTensorInfo(rightSide);\n\n    return result;\n  }\n\n  if (env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') &&\n      inputs[0].shape.length > 1) {\n    const program = new ConcatPackedProgram(inputs.map(t => t.shape), axis);\n    return backend.runWebGLProgram(program, inputs, dtype);\n  }\n\n  const {tensors2D, outShape} = computeTensors2D(inputs, axis, backend);\n  const program =\n      new ConcatProgram(tensors2D.map(t => t.shape as [number, number]));\n  const result = backend.runWebGLProgram(program, tensors2D, dtype);\n\n  tensors2D.forEach(r => backend.disposeIntermediateTensorInfo(r));\n  const reshapedResult =\n      reshape({inputs: {x: result}, attrs: {shape: outShape}, backend});\n  backend.disposeIntermediateTensorInfo(result);\n\n  return reshapedResult;\n}\n\nfunction computeTensors2D(\n    inputs: ConcatInputs, axis: number, backend: MathBackendWebGL) {\n  // Any concat of n-dimensional tensors across any axis can be reduced to\n  // a concatenation of two-dimensional tensors across the axis 1 by first\n  // partitioning the axes of the original tensors into those less than the\n  // axis to be concatenated and the rest. Then reshape the tensors\n  // into a two-dimensional tensor by collapsing these two sets of axes and\n  // concatenate the resulting matrices across the axis 1, finally reshaping\n  // the result to have the proper shape.\n  const outShape = backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n  const tensors2D = inputs.map(\n      x => reshape({\n        inputs: {x},\n        attrs: {shape: [-1, util.sizeFromShape(x.shape.slice(axis))]},\n        backend\n      }));\n\n  return {tensors2D, outShape};\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Concat, ConcatAttrs, ConcatInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {concatImpl} from './Concat_impl';\nimport {identity} from './Identity';\n\nexport function concat(\n    args:\n        {inputs: ConcatInputs, attrs: ConcatAttrs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n  const outShape =\n      backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  }\n\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n  if ($inputs.length === 1) {\n    return identity({inputs: {x: $inputs[0]}, backend});\n  }\n\n  const shapes = $inputs.map(t => t.shape);\n  backend_util.assertParamsConsistent(shapes, $axis);\n\n  return concatImpl($inputs, $axis, backend);\n}\n\nexport const concatConfig: KernelConfig = {\n  kernelName: Concat,\n  backendName: 'webgl',\n  kernelFunc: concat as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Conv2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivationWeights = false,\n      hasLeakyreluAlpha = false) {\n    this.outputShape = convInfo.outShape;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const channelDim = isChannelsLast ? 3 : 1;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivationWeights) {\n        activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyreluAlpha) {\n        activationSnippet = `float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    if (hasLeakyreluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${channelDim}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${rowDim}], coords[${colDim}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * ${dilationHeight};\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            if (xC < 0 || xC >= ${convInfo.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${inputDepthVec4Remainder === 1}) {\n\n              if (${isChannelsLast}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${inputDepthNearestVec4}) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${inputDepthNearestVec4}, xR, xC) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              }\n\n            } else if (${inputDepthVec4Remainder === 2}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${inputDepthVec4Remainder === 3}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 2, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n\nexport class Conv3DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.outShape;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n\n    this.userCode = `\n      const ivec3 strides = ivec3(${strideDepth}, ${strideHeight}, ${\n        strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          int xF = xFCorner + wF * ${dilationDepth};\n\n          if (xF < 0 || xF >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            int xR = xRCorner + wR * ${dilationHeight};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${inputDepthVec4Remainder === 1}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}) *\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2);\n              } else if (${inputDepthVec4Remainder === 2}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${inputDepthVec4Remainder === 3}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class Im2ColPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [\n    {name: 'inputShape', type: 'ivec3' as const },\n    {name: 'pad', type: 'ivec2' as const },\n    {name: 'stride', type: 'ivec2' as const },\n    {name: 'dilation', type: 'ivec2' as const },\n    {name: 'inChannels', type: 'int' as const },\n    {name: 'itemsPerBlockRow', type: 'int' as const },\n    {name: 'outWidth', type: 'int' as const },\n  ];\n\n  constructor(outputShape: number[], convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const {dataFormat} = convInfo;\n    const glsl = getGlslDifferences();\n    const isChannelsLast = dataFormat === 'channelsLast';\n    const rowDim = isChannelsLast ? 0 : 1;\n    const colDim = isChannelsLast ? 1 : 2;\n\n    const boundsCheckingSnippet = this.enableShapeUniforms ?\n        'if(blockIndex < outShape[1] && pos < outShape[0]) {' :\n        `if(blockIndex < ${outputShape[1]} && pos < ${outputShape[0]}) {`;\n    let unrolled = ``;\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        unrolled += `\n          blockIndex = rc.y + ${col};\n          pos = rc.x + ${row};\n\n          ${boundsCheckingSnippet}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${rowDim}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${colDim}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${isChannelsLast}) {\n                  innerDims = vec2(d1, ch);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;\n      }\n    }\n\n    this.userCode = `\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${unrolled}\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo, util} from '@tensorflow/tfjs-core';\n\n// import {assertAndGetBroadcastShape} from\n// '../../../tfjs-core/src/ops/broadcast_util';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Im2ColPackedProgram} from '../im2col_packed_gpu';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\nimport {MatMulPackedProgram} from '../mulmat_packed_gpu';\nimport * as webgl_util from '../webgl_util';\n\nimport {batchMatMulImpl, MATMUL_SHARED_DIM_THRESHOLD} from './BatchMatMul_impl';\nimport {identity} from './Identity';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\ntype Conv2DConfig = {\n  x: TensorInfo,\n  filter: TensorInfo,\n  convInfo: backend_util.Conv2DInfo,\n  backend: MathBackendWebGL,\n  bias?: TensorInfo,\n  preluActivationWeights?: TensorInfo,\n  leakyreluAlpha?: number,\n  activation?: backend_util.Activation\n};\n\n// For 1x1 kernels that iterate through every point in the input, convolution\n// can be expressed as matrix multiplication (without need for memory\n// remapping).\nexport function conv2dByMatMul({\n  x,\n  filter,\n  convInfo,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: Conv2DConfig) {\n  // Reshapes conv2D input to 2D tensors, uses matMul and then reshape the\n  // result from 2D to 4D.\n  const xShape = x.shape;\n  const xTexData = backend.texData.get(x.dataId);\n  const sharedMatMulDim = convInfo.inChannels;\n  const outerShapeX = xShape[0] * xShape[1] * xShape[2];\n  const outerShapeFilter = convInfo.outChannels;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const transposeA = false;\n  const transposeB = false;\n\n  let out: TensorInfo;\n  const intermediates: TensorInfo[] = [];\n\n  if (preluActivationWeights != null && !isChannelsLast &&\n      preluActivationWeights.shape.length === 3) {\n    // If PReLU's activation weights is NCHW format, then convert it to NHWC for\n    // the following computation.\n    const preluActivationWeightsInNhwcFormat = transpose({\n      inputs: {x: preluActivationWeights},\n      backend,\n      attrs: {perm: [1, 2, 0]}\n    });\n    intermediates.push(preluActivationWeightsInNhwcFormat);\n    preluActivationWeights = preluActivationWeightsInNhwcFormat;\n  }\n\n  // TODO: Once reduction ops are packed, batchMatMul will always be packed\n  // and we can remove this condition.\n  const batchMatMulWillBeUnpacked =\n      (outerShapeX === 1 || outerShapeFilter === 1) &&\n      sharedMatMulDim > MATMUL_SHARED_DIM_THRESHOLD;\n\n  // The algorithm in the if condition assumes (1) the output will be packed,\n  // (2) x is packed, (3) x isChannelsLast, (4)  x's packed texture is already\n  // on GPU, (5) col is odd, (6) the width, height and inChannels are the same\n  // for xTexData.shape and xShape.\n  const canOptimize = !batchMatMulWillBeUnpacked && xTexData.isPacked &&\n      isChannelsLast && xTexData.texture != null && xShape[2] % 2 !== 0 &&\n      util.arraysEqual(xTexData.shape.slice(-3), xShape.slice(-3));\n\n  if (canOptimize) {\n    // We avoid expensive packed 2x2 reshape by padding col count to next,\n    // even number. When col is odd, the result of packed batchMatMul is\n    // the same (has the same texture layout and and values in the texture) as\n    // it is for next even col. We make the odd-cols tensor to look like\n    // even-cols tensor before the operation and, after the batchMatMul,\n    // fix the even-cols result to have odd number of cols.\n    const targetShape = xShape[0] * xShape[1] * (xShape[2] + 1);\n    const xReshaped: TensorInfo = {\n      dataId: x.dataId,\n      shape: [1, targetShape, convInfo.inChannels],\n      dtype: x.dtype\n    };\n    // xTexData.shape gets referenced from GPGPUBinary.inShapeInfos.\n    // Decrementing col count, after batchMatMul->...->compileProgram leads to\n    // invalid col count within the reference in GPGPUBinary.inShapeInfos.\n    // Alternative fix would be to provide a copy to GPGPUBinary.inShapeInfos\n    // in compileProgram method, but that would affect compilation of all\n    // programs - instead, provide a copy here, with even col count, before\n    // calling batchMatMul->...->compileProgram and after that, the original\n    // xTexData.shape is restored.\n    const originalXTexDataShape = xTexData.shape;\n    xTexData.shape = xTexData.shape.slice();\n    xTexData.shape[xTexData.shape.length - 2]++;\n    util.assert(\n        webgl_util.isReshapeFree(xTexData.shape, xReshaped.shape),\n        () => `packed reshape ${xTexData.shape} to ${\n            xReshaped.shape} isn't free`);\n    const filterReshaped = reshape({\n      inputs: {x: filter},\n      backend,\n      attrs: {shape: [1, convInfo.inChannels, convInfo.outChannels]}\n    });\n    intermediates.push(filterReshaped);\n    const pointwiseConv = batchMatMulImpl({\n      a: xReshaped,\n      b: filterReshaped,\n      backend,\n      transposeA,\n      transposeB,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n\n    const pointwiseConvTexData = backend.texData.get(pointwiseConv.dataId);\n    util.assert(\n        pointwiseConvTexData.isPacked,\n        () => 'batchMatMul result is expected to be packed');\n    // Restore the input shape to original.\n    xTexData.shape = originalXTexDataShape;\n    // Set the output shape - there is no need for expensive reshape as data\n    // layout is already correct.\n    pointwiseConvTexData.shape = convInfo.outShape;\n\n    out = identity({inputs: {x: pointwiseConv}, backend});\n    out.shape = convInfo.outShape;\n\n    intermediates.push(pointwiseConv);\n  } else {\n    const xInNhwcFormat = isChannelsLast ?\n        x :\n        transpose({inputs: {x}, backend, attrs: {perm: [0, 2, 3, 1]}});\n    const xInNhwcFormatShape = xInNhwcFormat.shape;\n    const targetShape =\n        xInNhwcFormatShape[0] * xInNhwcFormatShape[1] * xInNhwcFormatShape[2];\n    const xReshaped = reshape({\n      inputs: {x: xInNhwcFormat},\n      backend,\n      attrs: {shape: [1, targetShape, convInfo.inChannels]}\n    });\n    const filterReshaped = reshape({\n      inputs: {x: filter},\n      backend,\n      attrs: {shape: [1, convInfo.inChannels, convInfo.outChannels]}\n    });\n    const result = batchMatMulImpl({\n      a: xReshaped,\n      b: filterReshaped,\n      transposeA,\n      transposeB,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n\n    const outInNHWCFormatShape = [\n      convInfo.batchSize, convInfo.outHeight, convInfo.outWidth,\n      convInfo.outChannels\n    ];\n    const outInNHWCFormat = reshape(\n        {inputs: {x: result}, backend, attrs: {shape: outInNHWCFormatShape}});\n\n    // If the data format is NCHW, then convert the output to be NCHW format.\n    out = isChannelsLast ? outInNHWCFormat : transpose({\n      inputs: {x: outInNHWCFormat},\n      backend,\n      attrs: {perm: [0, 3, 1, 2]}\n    });\n    if (!isChannelsLast) {\n      intermediates.push(xInNhwcFormat);\n      intermediates.push(outInNHWCFormat);\n    }\n\n    intermediates.push(xReshaped);\n    intermediates.push(filterReshaped);\n    intermediates.push(result);\n  }\n\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return out;\n}\n\n// Implements the im2row algorithm as outlined in \"High Performance\n// Convolutional Neural Networks for Document Processing\" (Suvisoft, 2006)\nexport function conv2dWithIm2Row({\n  x,\n  filter,\n  convInfo,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: Conv2DConfig) {\n  // Rearranges conv2d input so each block to be convolved over forms the\n  // column of a new matrix with shape [filterWidth * filterHeight *\n  // inChannels, outHeight * outWidth]. The filter is also rearranged so each\n  // output channel forms a row of a new matrix with shape [outChannels,\n  // filterWidth * filterHeight * inChannels]. The convolution is then\n  // computed by multiplying these matrices and reshaping the result.\n  const {\n    filterWidth,\n    filterHeight,\n    inChannels,\n    outWidth,\n    outHeight,\n    dataFormat\n  } = convInfo;\n\n  const isChannelsLast = dataFormat === 'channelsLast';\n\n  const sharedDim = filterWidth * filterHeight * inChannels;\n  const numCols = outHeight * outWidth;\n  const x2ColShape = [sharedDim, numCols];\n  const transposeA = true;\n  const transposeB = false;\n\n  const intermediates: TensorInfo[] = [];\n\n  if (preluActivationWeights != null && !isChannelsLast &&\n      preluActivationWeights.shape.length === 3) {\n    // If PReLU's activation weights is NCHW format, then convert it to NHWC for\n    // the following computation.\n    const preluActivationWeightsInNhwcFormat = transpose({\n      inputs: {x: preluActivationWeights},\n      backend,\n      attrs: {perm: [1, 2, 0]}\n    });\n    intermediates.push(preluActivationWeightsInNhwcFormat);\n    preluActivationWeights = preluActivationWeightsInNhwcFormat;\n  }\n\n  const xSqueezed =\n      reshape({inputs: {x}, backend, attrs: {shape: x.shape.slice(1)}});\n  const w2Row = reshape({\n    inputs: {x: filter},\n    backend,\n    attrs: {shape: [1, sharedDim, util.sizeFromShape(filter.shape) / sharedDim]}\n  });\n\n  intermediates.push(xSqueezed);\n  intermediates.push(w2Row);\n\n  const im2ColProgram = new Im2ColPackedProgram(x2ColShape, convInfo);\n  const customValues = [\n    xSqueezed.shape, [convInfo.padInfo.top, convInfo.padInfo.left],\n    [convInfo.strideHeight, convInfo.strideWidth],\n    [convInfo.dilationHeight, convInfo.dilationWidth], [convInfo.inChannels],\n    [convInfo.filterWidth * convInfo.inChannels], [convInfo.outWidth]\n  ];\n  const im2Col = backend.runWebGLProgram(\n      im2ColProgram, [xSqueezed], 'float32', customValues);\n  const im2ColReshaped = reshape({\n    inputs: {x: im2Col},\n    backend,\n    attrs: {shape: [1, x2ColShape[0], x2ColShape[1]]}\n  });\n\n  intermediates.push(im2Col);\n  intermediates.push(im2ColReshaped);\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n  const fusedActivation =\n      activation ? mapActivationToShaderProgram(activation, true) : null;\n  const matmulProgram = new MatMulPackedProgram(\n      im2ColReshaped.shape as [number, number, number],\n      w2Row.shape as [number, number, number],\n      [1, numCols, convInfo.outChannels], transposeA, transposeB, hasBias,\n      fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n  const inputs: TensorInfo[] = [im2ColReshaped, w2Row];\n  if (bias) {\n    inputs.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    inputs.push(preluActivationWeights);\n  }\n  if (hasLeakyreluAlpha) {\n    const $leakyreluAlpha = backend.makeTensorInfo(\n        [], 'float32',\n        util.createScalarValue(leakyreluAlpha as {} as 'float32', 'float32'));\n    inputs.push($leakyreluAlpha);\n    intermediates.push($leakyreluAlpha);\n  }\n  const product = backend.runWebGLProgram(matmulProgram, inputs, 'float32');\n\n  const outInNHWCFormatShape = [1, outHeight, outWidth, convInfo.outChannels];\n  const outInNHWCFormat = reshape(\n      {inputs: {x: product}, backend, attrs: {shape: outInNHWCFormatShape}});\n\n  // If the data format is NCHW, then convert the output to be NCHW format.\n  const out = isChannelsLast ?\n      outInNHWCFormat :\n      transpose(\n          {inputs: {x: outInNHWCFormat}, backend, attrs: {perm: [0, 3, 1, 2]}});\n  if (!isChannelsLast) {\n    intermediates.push(outInNHWCFormat);\n  }\n\n  intermediates.push(product);\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return out;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2D, Conv2DAttrs, Conv2DInputs, env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DProgram} from '../conv_gpu';\nimport {conv2dByMatMul, conv2dWithIm2Row} from './Conv2D_impl';\nimport {reshape} from './Reshape';\n\nexport function conv2d(\n    args:\n        {inputs: Conv2DInputs, attrs: Conv2DAttrs, backend: MathBackendWebGL}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dataFormat, dilations, dimRoundingMode} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n  let out: TensorInfo;\n\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n      convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n      convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n      (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n    out = conv2dByMatMul({x, filter, convInfo, backend});\n  } else if (env().getBool('WEBGL_CONV_IM2COL') && x.shape[0] === 1) {\n    out = conv2dWithIm2Row({x, filter, convInfo, backend});\n  } else {\n    const program = new Conv2DProgram(convInfo);\n    out = backend.runWebGLProgram(program, [x, filter], 'float32');\n  }\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: convInfo.outShape}});\n  backend.disposeIntermediateTensorInfo(out);\n\n  return outReshaped;\n}\n\nexport const conv2DConfig: KernelConfig = {\n  kernelName: Conv2D,\n  backendName: 'webgl',\n  kernelFunc: conv2d as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Conv2DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              if (${isChannelsLast}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv2DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const channelDim = isChannelsLast ? 3 : 1;\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${channelDim}];\n\n        ivec2 dyCorner = ivec2(coords[${rowDim}], coords[${colDim}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n\n              if (${isChannelsLast}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv3DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n\n    this.userCode = `\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yF = 0; yF < ${convInfo.outDepth}; yF++) {\n            int xF = wF + yF * ${strideDepth} - ${padFront};\n\n            if (xF < 0 || xF >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n              int xR = wR + yR * ${strideHeight} - ${padTop};\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n                int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv3DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n\n    const padFront = filterDepth - 1 - convInfo.padInfo.front;\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${strideDepth}.0;\n\n          if (dyF < 0.0 || dyF >= ${convInfo.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${filterDepth} - 1 - wF;\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${filterHeight} - 1 - wR;\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${filterWidth} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropFilter, Conv2DBackpropFilterAttrs, Conv2DBackpropFilterInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DDerFilterProgram} from '../conv_backprop_gpu';\n\nexport function conv2DBackpropFilter(args: {\n  inputs: Conv2DBackpropFilterInputs,\n  attrs: Conv2DBackpropFilterAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, dataFormat, dimRoundingMode, filterShape} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad, dimRoundingMode, false /* depthwise */,\n      $dataFormat);\n\n  const program = new Conv2DDerFilterProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\n\nexport const conv2DBackpropFilterConfig: KernelConfig = {\n  kernelName: Conv2DBackpropFilter,\n  backendName: 'webgl',\n  kernelFunc: conv2DBackpropFilter as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropInput, Conv2DBackpropInputAttrs, Conv2DBackpropInputInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DDerInputProgram} from '../conv_backprop_gpu';\n\nexport function conv2DBackpropInput(args: {\n  inputs: Conv2DBackpropInputInputs,\n  attrs: Conv2DBackpropInputAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {inputShape, strides, pad, dataFormat, dimRoundingMode} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n\n  const program = new Conv2DDerInputProgram(convInfo);\n  return backend.runWebGLProgram(program, [dy, filter], 'float32');\n}\n\nexport const conv2DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'webgl',\n  kernelFunc: conv2DBackpropInput as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3D, Conv3DAttrs, Conv3DInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv3DProgram} from '../conv_gpu';\n\nexport function conv3D(\n    args:\n        {inputs: Conv3DInputs, attrs: Conv3DAttrs, backend: MathBackendWebGL}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number],\n      filter.shape as [number, number, number, number, number], strides,\n      dilations, pad);\n\n  const program = new Conv3DProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, filter], 'float32');\n}\n\nexport const conv3DConfig: KernelConfig = {\n  kernelName: Conv3D,\n  backendName: 'webgl',\n  kernelFunc: conv3D as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropFilterV2, Conv3DBackpropFilterV2Attrs, Conv3DBackpropFilterV2Inputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv3DDerFilterProgram} from '../conv_backprop_gpu';\n\nexport function conv3DBackpropFilterV2(args: {\n  inputs: Conv3DBackpropFilterV2Inputs,\n  attrs: Conv3DBackpropFilterV2Attrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, filterShape} = attrs;\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad);\n\n  const program = new Conv3DDerFilterProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\n\nexport const conv3DBackpropFilterV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropFilterV2,\n  backendName: 'webgl',\n  kernelFunc: conv3DBackpropFilterV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropInputV2, Conv3DBackpropInputV2Attrs, Conv3DBackpropInputV2Inputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv3DDerInputProgram} from '../conv_backprop_gpu';\n\nexport function conv3DBackpropInput(args: {\n  inputs: Conv3DBackpropInputV2Inputs,\n  attrs: Conv3DBackpropInputV2Attrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {pad, strides, inputShape} = attrs;\n\n  const convInfo = backend_util.computeConv3DInfo(\n      inputShape, filter.shape as [number, number, number, number, number],\n      strides, 1 /* dilations */, pad);\n\n  const program = new Conv3DDerInputProgram(convInfo);\n  return backend.runWebGLProgram(program, [dy, filter], 'float32');\n}\n\nexport const conv3DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv3DBackpropInputV2,\n  backendName: 'webgl',\n  kernelFunc: conv3DBackpropInput as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst COS = CHECK_NAN_SNIPPET_UNARY + `\n  return cos(x);\n`;\n\nexport const cos = unaryKernelFunc({opSnippet: COS});\n\nexport const cosConfig: KernelConfig = {\n  kernelName: Cos,\n  backendName: 'webgl',\n  kernelFunc: cos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cosh, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst COSH = `\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n`;\n\nexport const cosh = unaryKernelFunc({opSnippet: COSH});\n\nexport const coshConfig: KernelConfig = {\n  kernelName: Cosh,\n  backendName: 'webgl',\n  kernelFunc: cosh,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class CropAndResizeProgram implements GPGPUProgram {\n  variableNames = ['Image', 'Boxes', 'BoxInd'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      imageShape: [number, number, number, number], boxShape: [number, number],\n      cropSize: [number, number], method: 'bilinear'|'nearest',\n      extrapolationValue: number) {\n    const [batch, imageHeight, imageWidth, depth] = imageShape;\n    const [numBoxes, ] = boxShape;\n    const [cropHeight, cropWidth] = cropSize;\n    this.outputShape = [numBoxes, cropHeight, cropWidth, depth];\n    const methodId = method === 'bilinear' ? 1 : 0;\n\n    const [inputHeightFloat, inputWidthFloat] =\n        [`${imageHeight - 1}.0`, `${imageWidth - 1}.0`];\n\n    const [heightRatio, heightScale, inY] = cropHeight > 1 ?\n        [\n          `${(imageHeight - 1) / (cropHeight - 1)}`,\n          '(y2-y1) * height_ratio',\n          `y1*${inputHeightFloat} + float(y)*(height_scale)`,\n        ] :\n        [\n          '0.0',\n          '0.0',\n          `0.5 * (y1+y2) * ${inputHeightFloat}`,\n        ];\n    const [widthRatio, widthScale, inX] = cropWidth > 1 ?\n        [\n          `${(imageWidth - 1) / (cropWidth - 1)}`,\n          '(x2-x1) * width_ratio',\n          `x1*${inputWidthFloat} + float(x)*(width_scale)`,\n        ] :\n        [\n          '0.0',\n          '0.0',\n          `0.5 * (x1+x2) * ${inputWidthFloat}`,\n        ];\n\n    // Reference implementation\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op_gpu.cu.cc\n    this.userCode = `\n      const float height_ratio = float(${heightRatio});\n      const float width_ratio = float(${widthRatio});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${batch}) {\n          return;\n        }\n\n        float height_scale = ${heightScale};\n        float width_scale = ${widthScale};\n\n        float in_y = ${inY};\n        if( in_y < 0.0 || in_y > ${inputHeightFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n        float in_x = ${inX};\n        if( in_x < 0.0 || in_x > ${inputWidthFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${methodId} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {CropAndResize, CropAndResizeAttrs, CropAndResizeInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CropAndResizeProgram} from '../crop_and_resize_gpu';\n\nexport const cropAndResize = (args: {\n  inputs: CropAndResizeInputs,\n  backend: MathBackendWebGL,\n  attrs: CropAndResizeAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {image, boxes, boxInd} = inputs;\n  const {cropSize, method, extrapolationValue} = attrs;\n\n  const program = new CropAndResizeProgram(\n      image.shape as [number, number, number, number],\n      boxes.shape as [number, number], cropSize, method, extrapolationValue);\n  return backend.runWebGLProgram(program, [image, boxes, boxInd], 'float32');\n};\n\nexport const cropAndResizeConfig: KernelConfig = {\n  kernelName: CropAndResize,\n  backendName: 'webgl',\n  kernelFunc: cropAndResize as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport enum CumOpType {\n  Prod = '*',\n  Sum = '+',\n}\n\nexport class CumProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  userCode: string;\n  customUniforms = [{name: 'index', type: 'float' as UniformType}];\n\n  constructor(\n      public op: CumOpType, public outputShape: number[], exclusive: boolean,\n      reverse: boolean) {\n    const rank = this.outputShape.length;\n    const initVal = this.op === CumOpType.Prod ? '1.0' : '0.0';\n    const val =\n        exclusive ? initVal : `getX(${getCoords(rank, 'coords', this.op)})`;\n    const length = this.outputShape[this.outputShape.length - 1];\n    let condition = '';\n    let idxString = '';\n    // When exclusive is set, the cum op becomes roll op that copies the\n    // value from the previous index based on the direction specified by the\n    // reverse flag.\n    if (exclusive) {\n      condition = reverse ? `end != ${length - 1}` : 'end != 0';\n      idxString = reverse ? 'end + 1' : 'end - 1';\n    } else {\n      condition = reverse ? `end + pow2 < ${length}` : 'end >= pow2';\n      idxString = (reverse ? 'end + pow2' : 'end - pow2');\n    }\n\n    this.userCode = `\n      void main() {\n        ${getCoordsDataType(rank)} coords = getOutputCoords();\n        int end = ${getFinalCoord(rank, 'coords', this.op)};\n        float val = ${val};\n        int pow2 = int(pow(2.0, index));\n        if (${condition}) {\n          int idx = ${idxString};\n          ${getFinalCoord(rank, 'coords', this.op)} = idx;\n          val ${this.op}= getX(${getCoords(rank, 'coords', this.op)});\n        }\n        setOutput(val);\n      }\n    `;\n  }\n}\n\nfunction getCoords(rank: number, name: string, op: CumOpType): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.x, ${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.x, ${name}.y, ${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.x, ${name}.y, ${name}.z, ${name}.w`;\n  } else {\n    throw new Error(`Cumulative ${op} for rank ${rank} is not yet supported`);\n  }\n}\n\nfunction getFinalCoord(rank: number, name: string, op: CumOpType): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.w`;\n  } else {\n    throw new Error(`Cumulative ${op} for rank ${rank} is not yet supported`);\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CumOpType, CumProgram} from '../cum_gpu';\n\nimport {identity} from './Identity';\nimport {transpose} from './Transpose';\n\nexport function cumImpl(\n    op: CumOpType, x: TensorInfo, backend: MathBackendWebGL, axis: number,\n    exclusive: boolean, reverse: boolean): TensorInfo {\n  const xRank = x.shape.length;\n  const permutation = backend_util.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, xRank)[0];\n\n  if (permutedAxis !== xRank - 1) {\n    throw new Error(\n        `WebGL cumprod shader expects an inner-most axis=${\n            x.shape.length - 1} ` +\n        `but got axis=${axis}`);\n  }\n  const size = permutedX.shape[permutedAxis];\n  let result = identity({inputs: {x: permutedX}, backend});\n  // Use cum parallel algorithm, inspired by:\n  // https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-39-parallel-prefix-sum-scan-cuda\n  // Note: although the algorithm is called sum, it works for any associtative\n  // operator with an identity.\n\n  for (let i = 0; i <= Math.ceil(Math.log2(size)) - 1; i++) {\n    const program = new CumProgram(op, permutedX.shape, false, reverse);\n    const customValues = [[i]];\n    const prevResult = result;\n    result =\n        backend.runWebGLProgram(program, [result], result.dtype, customValues);\n    backend.disposeIntermediateTensorInfo(prevResult);\n  }\n  // For exclusive cum, shift the end result in the direction of product or sum\n  // and add 1 for product or 0 for sum to the front index.\n  if (exclusive) {\n    const program = new CumProgram(op, permutedX.shape, exclusive, reverse);\n    const prevResult = result;\n    result = backend.runWebGLProgram(program, [result], result.dtype);\n    backend.disposeIntermediateTensorInfo(prevResult);\n  }\n\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose(\n        {inputs: {x: result}, backend, attrs: {perm: reversePermutation}});\n\n    backend.disposeIntermediateTensorInfo(result);\n    backend.disposeIntermediateTensorInfo(permutedX);\n\n    return reverseTransposedResult;\n  }\n\n  return result;\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cumprod, CumprodAttrs, CumprodInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CumOpType} from '../cum_gpu';\nimport {cumImpl} from './Cum_impl';\n\nexport function cumprod(args: {\n  inputs: CumprodInputs,\n  backend: MathBackendWebGL,\n  attrs: CumprodAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n\n  return cumImpl(CumOpType.Prod, x, backend, axis, exclusive, reverse);\n}\n\nexport const cumprodConfig: KernelConfig = {\n  kernelName: Cumprod,\n  backendName: 'webgl',\n  kernelFunc: cumprod as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cumsum, CumsumAttrs, CumsumInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CumOpType} from '../cum_gpu';\nimport {cumImpl} from './Cum_impl';\n\nexport function cumsum(\n    args:\n        {inputs: CumsumInputs, backend: MathBackendWebGL, attrs: CumsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n  return cumImpl(CumOpType.Sum, x, backend, axis, exclusive, reverse);\n}\n\nexport const cumsumConfig: KernelConfig = {\n  kernelName: Cumsum,\n  backendName: 'webgl',\n  kernelFunc: cumsum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DenseBincount, DenseBincountAttrs, DenseBincountInputs, KernelConfig, KernelFunc, Rank, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {bincountImplCPU, bincountReduceImplCPU} from '../kernel_utils/shared';\n\nexport function denseBincount(args: {\n  inputs: DenseBincountInputs,\n  backend: MathBackendWebGL,\n  attrs: DenseBincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size, binaryOutput} = attrs;\n\n  if (x.shape.length === 1) {\n    const xVals = backend.readSync(x.dataId) as TypedArray;\n    const weightsVals = backend.readSync(weights.dataId) as TypedArray;\n\n    const outVals =\n        bincountImplCPU(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n    return backend.makeTensorInfo([size], weights.dtype, outVals);\n  } else if (x.shape.length === 2) {\n    const xBuf = backend.bufferSync<Rank, 'float32'>(x);\n    const weightsBuf = backend.bufferSync<Rank, 'float32'>(weights);\n\n    const outBuf = bincountReduceImplCPU(xBuf, weightsBuf, size, binaryOutput);\n\n    return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n  }\n\n  throw new Error(\n      `Error in denseBincount: input must be at most rank 2, but got rank` +\n      `${x.shape.length}.`);\n}\n\nexport const denseBincountConfig: KernelConfig = {\n  kernelName: DenseBincount,\n  backendName: 'webgl',\n  kernelFunc: denseBincount as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthToSpaceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n  blockSize: number;\n  dataFormat: string;\n\n  constructor(\n      outputShape: number[], blockSize: number, dataFormat: 'NHWC'|'NCHW') {\n    this.outputShape = outputShape;\n    this.blockSize = blockSize;\n    this.dataFormat = dataFormat;\n    this.userCode = `\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${blockSize};\n      int offset_h = imod(h, ${blockSize});\n      int in_w = w / ${blockSize};\n      int offset_w = imod(w, ${blockSize});\n      int offset_d = (offset_h * ${blockSize} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `;\n  }\n\n  private getHeightCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[1]`;\n    } else {\n      return `coords[2]`;\n    }\n  }\n\n  private getWidthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[2]`;\n    } else {\n      return `coords[3]`;\n    }\n  }\n\n  private getDepthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[3]`;\n    } else {\n      return `coords[1]`;\n    }\n  }\n\n  private getOutputDepthSize(): number {\n    if (this.dataFormat === 'NHWC') {\n      return this.outputShape[3];\n    } else {\n      return this.outputShape[1];\n    }\n  }\n\n  private getInputSamplingString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `getX(b, in_h, in_w, in_d)`;\n    } else {\n      return `getX(b, in_d, in_h, in_w)`;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DepthToSpace, DepthToSpaceAttrs, DepthToSpaceInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthToSpaceProgram} from '../depth_to_space_gpu';\n\nexport function depthToSpace(args: {\n  inputs: DepthToSpaceInputs,\n  backend: MathBackendWebGL,\n  attrs: DepthToSpaceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockSize, dataFormat} = attrs;\n\n  const batchSize = x.shape[0];\n  const inputHeight = (dataFormat === 'NHWC') ? x.shape[1] : x.shape[2];\n  const inputWidth = (dataFormat === 'NHWC') ? x.shape[2] : x.shape[3];\n  const inputDepth = (dataFormat === 'NHWC') ? x.shape[3] : x.shape[1];\n\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n\n  const outputShape = (dataFormat === 'NHWC') ?\n      [batchSize, outputHeight, outputWidth, outputDepth] :\n      [batchSize, outputDepth, outputHeight, outputWidth];\n\n  const program = new DepthToSpaceProgram(outputShape, blockSize, dataFormat);\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const depthToSpaceConfig: KernelConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'webgl',\n  kernelFunc: depthToSpace as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class DepthwiseConv2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [\n    {name: 'pads', type: 'ivec2' as const },\n    {name: 'strides', type: 'ivec2' as const },\n    {name: 'dilations', type: 'ivec2' as const },\n    {name: 'inDims', type: 'ivec2' as const },\n  ];\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivation = false,\n      hasLeakyReluAlpha = false) {\n    this.outputShape = convInfo.outShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyReluAlpha) {\n        activationSnippet = `float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    if (hasLeakyReluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class DepthwiseConvPacked2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [\n    {name: 'pads', type: 'ivec2' as const },\n    {name: 'strides', type: 'ivec2' as const },\n    {name: 'dilations', type: 'ivec2' as const },\n    {name: 'inDims', type: 'ivec2' as const },\n  ];\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivation = false,\n      hasLeakyReluAlpha = false) {\n    this.outputShape = convInfo.outShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n    const padLeft = convInfo.padInfo.left;\n    const strideWidth = convInfo.strideWidth;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const texelsAcross = filterWidth;\n\n    let mainLoop = `\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;`;\n\n    for (let c = 0; c < filterWidth; c++) {\n      mainLoop += `\n          vec4 xTexelC${c * 2};\n          int xTexelC${c * 2}Ready;\n          vec4 xTexelC${c * 2 + 1};\n          int xTexelC${c * 2 + 1}Ready;\n          vec4 xC${c};`;\n    }\n\n    /**\n     * This vectorized implementation works by gathering the values needed for\n     * each output channel's dot product into vec4's and then multiplying them\n     * all together (this happens in the final double for-loop below). Most of\n     * the main loop consists of constructing these vec4's with the minimum\n     * number of texture2D calls, which means making use of all four returned\n     * values from a texture2D call at once.\n     */\n    mainLoop += `\n    for (int r = 0; r < ${filterHeight}; r++) {\n      `;\n    for (let c = 0; c < filterWidth; c++) {\n      mainLoop += `\n          xTexelC${c * 2} = vec4(0.0);\n          xTexelC${c * 2}Ready = 0;\n          xTexelC${c * 2 + 1} = vec4(0.0);\n          xTexelC${c * 2 + 1}Ready = 0;\n          xC${c} = vec4(0.0);`;\n    }\n    mainLoop += `\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      `;\n\n    for (let texelC = 0; texelC < (texelsAcross + 1) / 2; texelC++) {\n      const colIndex = texelC * 2;\n\n      mainLoop += `\n          xC = xCCorner + ${colIndex * dilationWidth};\n          `;\n\n      if (strideWidth === 1) {\n        if (colIndex < filterWidth) {\n          // If padding is odd, the outer texels have to be composed.\n          if (padLeft % 2 === 1) {\n            // TODO: Ensure vec4 previous does not result in redundant sample,\n            // and avoid setting xTexelRC's that exceed the boundary in the\n            // first place rather than resetting them to vec4(0)).\n\n            // To compute xCOffset:\n            // - If padding is odd, we must add 1 to ensure we ask for an\n            // even-numbered row.\n            // - We subtract 2 to access the previous texel.\n\n            mainLoop += `\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n              `;\n            // This texel has been read in previous iteration if the dilation\n            // is 1.\n            if (dilationWidth === 1 && colIndex > 0) {\n              mainLoop += `\n                xC${colIndex} = vec4(xTexelC${colIndex - 2}.zw, xTexelC${\n                  colIndex}.xy);\n                `;\n            } else {\n              mainLoop += `\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${colIndex} = vec4(previous.zw, xTexelC${colIndex}.xy);\n                  } else {\n                    xC${colIndex} = vec4(0.0, 0.0, xTexelC${colIndex}.xy);\n                  }\n                  `;\n            }\n          } else {\n            // Padding is even, so xRC corresponds to a single texel.\n            mainLoop += `\n                if (xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                xC${colIndex} = xTexelC${colIndex};\n                `;\n          }\n\n          if (colIndex + 1 < filterWidth) {\n            // If dilation is even, the second entry should match the first\n            // (either both are composed or both are single samples). But if\n            // dilation is odd, then the second entry should be the opposite\n            // of the first (if the first is composed, the second is a single\n            // sample, and vice versa.)\n\n            const nextTexelOffset = padLeft % 2 === 0 ?\n                util.nearestLargerEven(dilationWidth) :\n                dilationWidth;\n\n            if ((dilationWidth % 2 === 0 && padLeft % 2 === 1) ||\n                (dilationWidth % 2 !== 0 && padLeft % 2 !== 1)) {\n              mainLoop += `\n                  xCOffset = xC + imod(pads[1], 2) + ${nextTexelOffset};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                  colIndex + 1}Ready == 0) {\n                    xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${colIndex + 1}.zw = vec2(0.0);\n                    }\n                    xTexelC${colIndex + 1}Ready = 1;\n                  }\n                  `;\n\n              // If dilation > 1 then the xRC's will not be able to share any\n              // values, so each xRC will require two unique calls to getX.\n              if (dilationWidth > 1) {\n                mainLoop += `\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                    colIndex}Ready == 0) {\n                      xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n                      xTexelC${colIndex}Ready = 1;\n                    }\n                    `;\n              }\n\n              mainLoop += `\n                  xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                  colIndex + 1}.xy);\n                  `;\n            } else {\n              // If dilation is 1 and padding is odd, we have already read the\n              // texel when constructing the previous x value. Here we can\n              // simply skip the texture read.\n              if (nextTexelOffset === 1) {\n                mainLoop += `\n                    xC${colIndex + 1} = xTexelC${colIndex};\n                    `;\n              } else {\n                mainLoop += `\n                    xCOffset = xC + ${nextTexelOffset};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                    colIndex + 1}Ready == 0) {\n                      xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${colIndex + 1}.zw = vec2(0.0);\n                      }\n                      xTexelC${colIndex + 1}Ready = 1;\n                    }\n\n                    xC${colIndex + 1} = xTexelC${colIndex + 1};\n                    `;\n              }\n            }\n          }\n        }\n      } else {  // stride === 2\n        if (colIndex < filterWidth) {\n          // Depending on whether padLeft is even or odd, we want either the\n          // xy or zw channels from X texels for xC${colIndex}. If padLeft is\n          // even, xC${colIndex +1} is simply the zw channels of texels we've\n          // already sampled. But if padLeft is odd, xC{$c + 1}.zw will\n          // need to come from the xy channels of a new texel, hence the `\n          // vec4\n          // final` initialized below.\n          if (padLeft % 2 === 1) {\n            mainLoop += `\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${\n                colIndex + 1}Ready == 0) {\n                  xTexelC${colIndex + 1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${colIndex + 1}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex + 1}Ready = 1;\n                }\n\n                xC${colIndex} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                colIndex + 1}.zw);\n              `;\n\n            if (colIndex + 1 < filterWidth) {\n              mainLoop += `\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${colIndex + 1} = vec4(xTexelC${colIndex + 1}.xy, final.xy);\n                `;\n            }\n          } else {\n            mainLoop += `\n                if(xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                colIndex + 1}Ready == 0) {\n                  xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${colIndex + 1}.zw = vec2(0.);\n                  }\n                  xTexelC${colIndex + 1}Ready = 1;\n                }\n\n                xC${colIndex} = vec4(\n                  xTexelC${colIndex}.xy, xTexelC${colIndex + 1}.xy);\n              `;\n\n            if (colIndex + 1 < filterWidth) {\n              mainLoop += `\n                  xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                  colIndex + 1}.zw);\n                `;\n            }\n          }\n        }\n      }\n\n      // localize the dotProd accumulation within the loop, the theory is for\n      // GPU with limited cache, accumulate sum across large amount of\n      // veriables will cause lots of cache misses. (i.e. 5x5 filter will have\n      // 50 variables)\n      if (colIndex < filterWidth) {\n        mainLoop += `\n            wTexel = getW(r, ${colIndex}, d1, q);\n            dotProd += xC${colIndex} * vec4(wTexel.xz, wTexel.xz);\n          `;\n\n        if (colIndex + 1 < filterWidth) {\n          mainLoop += `\n              wTexel = getW(r, ${colIndex + 1}, d1, q);\n              dotProd += xC${colIndex + 1} * vec4(wTexel.xz, wTexel.xz);\n            `;\n        }\n      }\n    }\n    mainLoop += `\n    }\n  `;\n    mainLoop += `\n      }\n    `;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyReluAlpha) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    if (hasLeakyReluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${mainLoop}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs, DepthwiseConv2dNativeInputs, env, KernelConfig, KernelFunc, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DProgram} from '../conv_gpu_depthwise';\nimport {DepthwiseConvPacked2DProgram} from '../conv_packed_gpu_depthwise';\n\nexport function depthwiseConv2dNative(args: {\n  inputs: DepthwiseConv2dNativeInputs,\n  attrs: DepthwiseConv2dNativeAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations, dimRoundingMode} = attrs;\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  let program: DepthwiseConv2DProgram|DepthwiseConvPacked2DProgram;\n  if (env().getBool('WEBGL_PACK_DEPTHWISECONV') && convInfo.strideWidth <= 2 &&\n      convInfo.outChannels / convInfo.inChannels === 1) {\n    program = new DepthwiseConvPacked2DProgram(convInfo);\n  } else {\n    program = new DepthwiseConv2DProgram(convInfo);\n  }\n  const customValues = [\n    [convInfo.padInfo.top, convInfo.padInfo.left],\n    [convInfo.strideHeight, convInfo.strideWidth],\n    [convInfo.dilationHeight, convInfo.dilationWidth],\n    [convInfo.inHeight, convInfo.inWidth]\n  ];\n  return backend.runWebGLProgram(program, [x, filter], 'float32', customValues);\n}\n\nexport const depthwiseConv2dNativeConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNative as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthwiseConv2DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${channelMul} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class DepthwiseConv2DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${channelMul}; dm++) {\n              int d2 = d1 * ${channelMul} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropFilter, DepthwiseConv2dNativeBackpropFilterAttrs, DepthwiseConv2dNativeBackpropFilterInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DDerFilterProgram} from '../conv_backprop_gpu_depthwise';\n\nexport function depthwiseConv2dNativeBackpropFilter(args: {\n  inputs: DepthwiseConv2dNativeBackpropFilterInputs,\n  attrs: DepthwiseConv2dNativeBackpropFilterAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, filterShape} = attrs;\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const program = new DepthwiseConv2DDerFilterProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\n\nexport const depthwiseConv2dNativeBackpropFilterConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropFilter,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNativeBackpropFilter as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropInput, DepthwiseConv2dNativeBackpropInputAttrs, DepthwiseConv2dNativeBackpropInputInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DDerInputProgram} from '../conv_backprop_gpu_depthwise';\n\nexport function depthwiseConv2dNativeBackpropInput(args: {\n  inputs: DepthwiseConv2dNativeBackpropInputInputs,\n  attrs: DepthwiseConv2dNativeBackpropInputAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, inputShape} = attrs;\n\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const program = new DepthwiseConv2DDerInputProgram(convInfo);\n  return backend.runWebGLProgram(program, [dy, filter], 'float32');\n}\n\nexport const depthwiseConv2dNativeBackpropInputConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropInput,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNativeBackpropInput as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DiagProgram implements GPGPUProgram {\n  variableNames = ['X'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(size: number) {\n    this.outputShape = [size, size];\n    this.userCode = `\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Diag, DiagInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DiagProgram} from '../diag_gpu';\nimport {reshape} from './Reshape';\n\nexport function diag(args: {inputs: DiagInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const outShape = [...x.shape, ...x.shape];\n  const xSize = util.sizeFromShape(x.shape);\n\n  const flat = reshape({inputs: {x}, backend, attrs: {shape: [xSize]}});\n\n  const program = new DiagProgram(xSize);\n  const res = backend.runWebGLProgram(program, [flat], flat.dtype);\n\n  const out = reshape({inputs: {x: res}, backend, attrs: {shape: outShape}});\n\n  backend.disposeIntermediateTensorInfo(flat);\n  backend.disposeIntermediateTensorInfo(res);\n\n  return out;\n}\n\nexport const diagConfig: KernelConfig = {\n  kernelName: Diag,\n  backendName: 'webgl',\n  kernelFunc: diag as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Dilation2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.outShape;\n\n    const {\n      inHeight,\n      inWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth\n    } = convInfo;\n\n    const {top: padTop, left: padLeft} = padInfo;\n\n    this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${filterHeight}; h++) {\n          int hIn = hBeg + h * ${dilationHeight};\n\n          if (hIn >= 0 && hIn < ${inHeight}) {\n            for (int w = 0; w < ${filterWidth}; w++) {\n              int wIn = wBeg + w * ${dilationWidth};\n\n              if (wIn >= 0 && wIn < ${inWidth}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2D, Dilation2DAttrs, Dilation2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Dilation2DProgram} from '../dilation_gpu';\nimport {reshape} from './Reshape';\n\nexport function dilation2D(args: {\n  inputs: Dilation2DInputs,\n  attrs: Dilation2DAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  const convInfo = backend_util.computeDilation2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number], strides, pad,\n      'NHWC' /* dataFormat */, dilations);\n  let out: TensorInfo;\n\n  const program = new Dilation2DProgram(convInfo);\n  out = backend.runWebGLProgram(program, [x, filter], 'float32');\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: convInfo.outShape}});\n  backend.disposeIntermediateTensorInfo(out);\n\n  return outReshaped;\n}\n\nexport const dilation2DConfig: KernelConfig = {\n  kernelName: Dilation2D,\n  backendName: 'webgl',\n  kernelFunc: dilation2D as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Einsum, EinsumAttrs, EinsumInputs, KernelConfig, KernelFunc, Tensor, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {multiply} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\nexport function einsum(\n    args:\n        {inputs: EinsumInputs, backend: MathBackendWebGL, attrs: EinsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {equation} = attrs;\n  const tensors = inputs as Tensor[];\n\n  const {allDims, summedDims, idDims} =\n      backend_util.decodeEinsumEquation(equation, tensors.length);\n  backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);\n  const {path, steps} = backend_util.getEinsumComputePath(summedDims, idDims);\n\n  const nSteps = steps.length;\n  let out: TensorInfo|null = null;\n  let numDimsRemaining = allDims.length;\n  const tensorsToDispose: TensorInfo[] = [];\n  for (let i = 0; i < nSteps; ++i) {\n    for (const idTerm of steps[i]) {\n      const {permutationIndices: perm, expandDims: dimsToExpand} =\n          backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);\n      let x: TensorInfo;\n      if (backend_util.isIdentityPermutation(perm)) {\n        x = tensors[idTerm];\n      } else {\n        x = transpose({inputs: {x: tensors[idTerm]}, backend, attrs: {perm}});\n        tensorsToDispose.push(x);\n      }\n      const targetShape: number[] = x.shape.slice();\n      for (let k = 0; k < dimsToExpand.length; ++k) {\n        targetShape.splice(dimsToExpand[k], 0, 1);\n      }\n\n      if (!util.arraysEqual(x.shape, targetShape)) {\n        x = reshape({inputs: {x}, backend, attrs: {shape: targetShape}});\n        tensorsToDispose.push(x);\n      }\n      if (out === null) {\n        out = x;\n      } else {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        out = multiply({inputs: {a: x, b: out}, backend}) as TensorInfo;\n        tensorsToDispose.push(out);\n      }\n    }\n    if (i < nSteps - 1) {\n      if (path[i] >= 0) {\n        out = sum({\n          inputs: {x: out},\n          backend,\n          attrs: {\n            axis: path[i] - (allDims.length - numDimsRemaining),\n            keepDims: false\n          }\n        });\n        tensorsToDispose.push(out);\n      }\n      numDimsRemaining--;\n    }\n  }\n\n  // Clean up intermediate tensors.\n  for (const tensorInfo of tensorsToDispose) {\n    if (tensorInfo === out) {\n      continue;\n    }\n    backend.disposeIntermediateTensorInfo(tensorInfo);\n  }\n\n  return out;\n}\n\nexport const einsumConfig: KernelConfig = {\n  kernelName: Einsum,\n  backendName: 'webgl',\n  kernelFunc: einsum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Elu, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;\n\nconst ELU_PACKED = `\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n`;\n\nconst elu = unaryKernelFunc({opSnippet: ELU, packedOpSnippet: ELU_PACKED});\n\nexport const eluConfig: KernelConfig = {\n  kernelName: Elu,\n  backendName: 'webgl',\n  kernelFunc: elu as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {EluGrad, EluGradInputs, env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\n\nconst ELU_DER = `return (b >= 1.0) ? a : a * (b + 1.0);`;\nconst ELU_DER_PACKED = `\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n`;\n\nexport const eluGrad =\n    (args: {inputs: EluGradInputs, backend: MathBackendWebGL}): TensorInfo => {\n      const {inputs, backend} = args;\n      const {dy, y} = inputs;\n\n      const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n          new BinaryOpPackedProgram(ELU_DER_PACKED, dy.shape, y.shape) :\n          new BinaryOpProgram(ELU_DER, dy.shape, y.shape);\n      return backend.runWebGLProgram(program, [dy, y], dy.dtype);\n    };\n\nexport const eluGradConfig: KernelConfig = {\n  kernelName: EluGrad,\n  backendName: 'webgl',\n  kernelFunc: eluGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Equal, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {equalImplCPU} from '../kernel_utils/shared';\nconst PACKED_EQUAL = `\n  return vec4(equal(a, b));\n`;\n\nconst EQUAL = `return float(a == b);`;\n\nexport const equal = binaryKernelFunc({\n  opSnippet: EQUAL,\n  packedOpSnippet: PACKED_EQUAL,\n  dtype: 'bool',\n  cpuKernelImpl: equalImplCPU,\n});\n\nexport const equalConfig: KernelConfig = {\n  kernelName: Equal,\n  backendName: 'webgl',\n  kernelFunc: equal as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Erf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst ERF = `\n  // Error function is calculated approximately with elementary function.\n  // See \"Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables\", Abramowitz and Stegun.\n  float p = ${backend_util.ERF_P};\n  float a1 = ${backend_util.ERF_A1};\n  float a2 = ${backend_util.ERF_A2};\n  float a3 = ${backend_util.ERF_A3};\n  float a4 = ${backend_util.ERF_A4};\n  float a5 = ${backend_util.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`;\n\nexport const erf = unaryKernelFunc({opSnippet: ERF});\n\nexport const erfConfig: KernelConfig = {\n  kernelName: Erf,\n  backendName: 'webgl',\n  kernelFunc: erf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Exp, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {expImplCPU} from '../kernel_utils/shared';\n\nexport const EXP = CHECK_NAN_SNIPPET_UNARY + `\n  return exp(x);\n`;\n\nconst EXP_PACKED = `\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const exp = unaryKernelFunc({\n  opSnippet: EXP,\n  packedOpSnippet: EXP_PACKED,\n  cpuKernelImpl: expImplCPU,\n  dtype: 'float32',\n});\n\nexport const expConfig: KernelConfig = {\n  kernelName: Exp,\n  backendName: 'webgl',\n  kernelFunc: exp as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ExpandDims, ExpandDimsAttrs, ExpandDimsInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reshape} from './Reshape';\n\nexport function expandDims(args: {\n  inputs: ExpandDimsInputs,\n  attrs: ExpandDimsAttrs,\n  backend: MathBackendWebGL\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {dim} = attrs;\n  const {input} = inputs;\n\n  const inputRank = input.shape.length;\n  const newShape = input.shape.slice();\n  let $dim = dim;\n  if (dim < 0) {\n    // Negative value is counted from the tail of rank.\n    util.assert(\n        -(inputRank + 1) <= dim,\n        () => `Axis must be in the interval [${- (inputRank + 1)}, ${\n            inputRank}]`);\n    $dim = inputRank + dim + 1;\n  }\n  newShape.splice($dim, 0, 1);\n\n  return reshape({inputs: {x: input}, backend, attrs: {shape: newShape}});\n}\n\nexport const expandDimsConfig: KernelConfig = {\n  kernelName: ExpandDims,\n  backendName: 'webgl',\n  kernelFunc: expandDims as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Expm1, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {expm1ImplCPU} from '../kernel_utils/shared';\n\nconst EXPM1 = `return exp(x) - 1.0;`;\n\nexport const expm1 = unaryKernelFunc(\n    {opSnippet: EXPM1, packedOpSnippet: EXPM1, cpuKernelImpl: expm1ImplCPU});\n\nexport const expm1Config: KernelConfig = {\n  kernelName: Expm1,\n  backendName: 'webgl',\n  kernelFunc: expm1 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class FFTProgram implements GPGPUProgram {\n  variableNames = ['real', 'imag'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      component: 'real'|'imag', inputShape: [number, number],\n      inverse: boolean) {\n    const innerDim = inputShape[1];\n    this.outputShape = inputShape;\n\n    const exponentMultiplierSnippet =\n        inverse ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`;\n    const resultDenominator = inverse ? `${innerDim}.0` : '1.0';\n\n    let opString: string;\n    if (component === 'real') {\n      opString = 'return real * expR - imag * expI;';\n    } else if (component === 'imag') {\n      opString = 'return real * expI + imag * expR;';\n    } else {\n      throw new Error(\n          `FFT component must be either \"real\" or \"imag\", got ${component}.`);\n    }\n\n    this.userCode = `\n      const float exponentMultiplier = ${exponentMultiplierSnippet};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${opString}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${innerDim});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${innerDim}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${resultDenominator};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {FFTProgram} from '../fft_gpu';\n\nimport {complex} from './Complex';\nimport {reshape} from './Reshape';\n\nexport function fftImpl(\n    x: TensorInfo, inverse: boolean, backend: MathBackendWebGL): TensorInfo {\n  const xData = backend.texData.get(x.dataId);\n\n  const inputSize = util.sizeFromShape(x.shape);\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = x.shape[x.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape(\n      {inputs: {x}, backend, attrs: {shape: [batch, innerDimensionSize]}});\n\n  const xShape = input2D.shape as [number, number];\n  const realProgram = new FFTProgram('real', xShape, inverse);\n  const imagProgram = new FFTProgram('imag', xShape, inverse);\n\n  const inputs = [\n    {\n      dataId: xData.complexTensorInfos.real.dataId,\n      dtype: xData.complexTensorInfos.real.dtype,\n      shape: xShape\n    },\n    {\n      dataId: xData.complexTensorInfos.imag.dataId,\n      dtype: xData.complexTensorInfos.imag.dtype,\n      shape: xShape\n    }\n  ];\n\n  const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n  const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n\n  const complexOutput =\n      complex({inputs: {real: realPart, imag: imagPart}, backend});\n\n  backend.disposeIntermediateTensorInfo(realPart);\n  backend.disposeIntermediateTensorInfo(imagPart);\n\n  const complexOutputReshaped =\n      reshape({inputs: {x: complexOutput}, backend, attrs: {shape: x.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(complexOutput);\n  return complexOutputReshaped;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FFT, FFTInputs, KernelConfig, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {fftImpl} from './FFT_impl';\n\nexport function fft(args: {inputs: FFTInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  return fftImpl(input, false /* inverse */, backend);\n}\n\nexport const fftConfig: KernelConfig = {\n  kernelName: FFT,\n  backendName: 'webgl',\n  kernelFunc: fft\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class FillProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n  customUniforms = [{name: 'value', type: 'float' as UniformType}];\n\n  constructor(shape: number[], value: number) {\n    this.variableNames = ['x'];\n    this.outputShape = shape;\n\n    this.userCode = `\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Fill, FillAttrs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {FillProgram} from '../fill_gpu';\n\nexport function fill(args: {backend: MathBackendWebGL, attrs: FillAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {shape, value} = attrs;\n  let {dtype} = attrs;\n\n  dtype = dtype || util.inferDtype(value);\n\n  if (dtype === 'string') {\n    // String type should be handled in CPU memory.\n    const values = util.getArrayFromDType(dtype, util.sizeFromShape(shape));\n    values.fill(value as string);\n    return backend.makeTensorInfo(shape, dtype, values);\n  } else {\n    const program = new FillProgram(shape, value as number);\n    const customValues = [[value as number]];\n    return backend.runWebGLProgram(program, [], dtype, customValues);\n  }\n}\n\nexport const fillConfig: KernelConfig = {\n  kernelName: Fill,\n  backendName: 'webgl',\n  kernelFunc: fill as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class FlipLeftRightProgram implements GPGPUProgram {\n  variableNames = ['Image'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(imageShape: [number, number, number, number]) {\n    const imageWidth = imageShape[2];\n    this.outputShape = imageShape;\n\n    this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${imageWidth} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${imageWidth}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tensor4D} from '@tensorflow/tfjs-core';\nimport {FlipLeftRight, FlipLeftRightInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {FlipLeftRightProgram} from '../flip_left_right_gpu';\n\nexport const flipLeftRightConfig: KernelConfig = {\n  kernelName: FlipLeftRight,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, backend}) => {\n    const {image} = inputs as FlipLeftRightInputs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const program = new FlipLeftRightProgram((image as Tensor4D).shape);\n    const output = webglBackend.runWebGLProgram(program, [image], image.dtype);\n    return output;\n  }\n};\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Floor, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {floorImplCPU} from '../kernel_utils/shared';\n\nconst FLOOR = `return floor(x);`;\n\nexport const floor = unaryKernelFunc(\n    {opSnippet: FLOOR, packedOpSnippet: FLOOR, cpuKernelImpl: floorImplCPU});\n\nexport const floorConfig: KernelConfig = {\n  kernelName: Floor,\n  backendName: 'webgl',\n  kernelFunc: floor,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FloorDiv, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\n// We use native integer division to deal with floating point imprecision. Since\n// we implement floor division and glsl implements truncated division, we\n// correct for this by subtracting 1 from result when the result is negative and\n// there is a remainder.\nconst INT_DIV = `\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n`;\n\nconst INT_DIV_PACKED = `\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n`;\n\nexport const floorDiv = binaryKernelFunc(\n    {opSnippet: INT_DIV, packedOpSnippet: INT_DIV_PACKED, dtype: 'int32'});\n\nexport const floorDivConfig: KernelConfig = {\n  kernelName: FloorDiv,\n  backendName: 'webgl',\n  kernelFunc: floorDiv as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from '../../glsl_version';\nimport {GPGPUProgram} from '../../gpgpu_math';\n\nexport class FromPixelsProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    const [height, width, ] = outputShape;\n    this.outputShape = outputShape;\n    this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${width}.0, ${height}.0);\n\n        vec4 values = ${glsl.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from '../../glsl_version';\nimport {GPGPUProgram} from '../../gpgpu_math';\n\nexport class FromPixelsPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = false;\n  packedOutput = true;\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    const [height, width, ] = outputShape;\n    this.outputShape = outputShape;\n    this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${width}.0, ${height}.0);\n            vec4 values = ${glsl.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\nimport {FromPixels, FromPixelsAttrs, FromPixelsInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {TextureUsage} from '../tex_util';\n\nimport {FromPixelsProgram} from './FromPixels_utils/from_pixels_gpu';\nimport {FromPixelsPackedProgram} from './FromPixels_utils/from_pixels_packed_gpu';\n\nexport const fromPixelsConfig: KernelConfig = {\n  kernelName: FromPixels,\n  backendName: 'webgl',\n  kernelFunc: fromPixels as {} as KernelFunc,\n};\n\nlet fromPixels2DContext: CanvasRenderingContext2D;\n\nfunction fromPixels(args: {\n  inputs: FromPixelsInputs,\n  backend: MathBackendWebGL,\n  attrs: FromPixelsAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  let {pixels} = inputs;\n  const {numChannels} = attrs;\n\n  const isVideo = typeof (HTMLVideoElement) !== 'undefined' &&\n      pixels instanceof HTMLVideoElement;\n  const isImage = typeof (HTMLImageElement) !== 'undefined' &&\n      pixels instanceof HTMLImageElement;\n  const [width, height] = isVideo ?\n      [\n        (pixels as HTMLVideoElement).videoWidth,\n        (pixels as HTMLVideoElement).videoHeight\n      ] :\n      [pixels.width, pixels.height];\n\n  const texShape: [number, number] = [height, width];\n  const outShape = [height, width, numChannels];\n\n  if (isImage || isVideo) {\n    if (fromPixels2DContext == null) {\n      fromPixels2DContext = document.createElement('canvas').getContext('2d');\n    }\n\n    fromPixels2DContext.canvas.width = width;\n    fromPixels2DContext.canvas.height = height;\n    fromPixels2DContext.drawImage(\n        pixels as HTMLVideoElement | HTMLImageElement | ImageBitmap,\n        0, 0, width, height);\n    pixels = fromPixels2DContext.canvas;\n  }\n\n  const tempPixelHandle = backend.makeTensorInfo(texShape, 'int32');\n  // This is a byte texture with pixels.\n  backend.texData.get(tempPixelHandle.dataId).usage = TextureUsage.PIXELS;\n  backend.gpgpu.uploadPixelDataToTexture(\n      backend.getTexture(tempPixelHandle.dataId), pixels as ImageData);\n  const program = env().getBool('WEBGL_PACK') ?\n      new FromPixelsPackedProgram(outShape) :\n      new FromPixelsProgram(outShape);\n  const res = backend.runWebGLProgram(program, [tempPixelHandle], 'int32');\n  backend.disposeData(tempPixelHandle.dataId);\n  return res;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, FusedConv2D, FusedConv2DAttrs, FusedConv2DInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DProgram} from '../conv_gpu';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\n\nimport {conv2dByMatMul, conv2dWithIm2Row} from './Conv2D_impl';\nimport {reshape} from './Reshape';\n\nexport function fusedConv2d(args: {\n  inputs: FusedConv2DInputs,\n  attrs: FusedConv2DAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n  let out: TensorInfo;\n  const intermediates: TensorInfo[] = [];\n\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n      convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n      convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n      (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n    out = conv2dByMatMul({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  } else if (env().getBool('WEBGL_CONV_IM2COL') && x.shape[0] === 1) {\n    out = conv2dWithIm2Row({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  } else {\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const hasLeakyreluAlpha = activation === 'leakyrelu';\n    const fusedActivation =\n        activation ? mapActivationToShaderProgram(activation, false) : null;\n    const program = new Conv2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n    const inputs: TensorInfo[] = [x, filter];\n\n    // If the input is a 1-D tensor, align it with the channels.\n    //\n    // For fusedConv2d, the inputs (x, W, bias, preluActivationWeights) are\n    // supposed to be aligned with the dataFormat. The 4-D tensor inputs or\n    // scalar inputs are originally aligned, but the 1-D tensor inputs are\n    // supposed to be aligned with the channels (only bias and PReLU activation\n    // weights could be a 1-D tensor).\n    const alignInputWithDataFormat =\n        (input: TensorInfo, dataFormat: 'NHWC'|'NCHW'): TensorInfo => {\n          if (dataFormat === 'NCHW' && input.shape.length === 1 &&\n              input.shape[0] !== 1) {\n            const alignedInput = reshape({\n              inputs: {x: input},\n              backend,\n              attrs: {shape: [input.shape[0], 1, 1]}\n            });\n            intermediates.push(alignedInput);\n            return alignedInput;\n          }\n          return input;\n        };\n\n    if (hasBias) {\n      inputs.push(alignInputWithDataFormat(bias, dataFormat));\n    }\n\n    if (hasPreluActivationWeights) {\n      inputs.push(alignInputWithDataFormat(preluActivationWeights, dataFormat));\n    }\n\n    if (hasLeakyreluAlpha) {\n      const $leakyreluAlpha = backend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(leakyreluAlpha as {} as 'float32', 'float32'));\n      inputs.push($leakyreluAlpha);\n      intermediates.push($leakyreluAlpha);\n    }\n    out = backend.runWebGLProgram(program, inputs, 'float32');\n  }\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: convInfo.outShape}});\n\n  intermediates.push(out);\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return outReshaped;\n}\n\nexport const fusedConv2DConfig: KernelConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'webgl',\n  kernelFunc: fusedConv2d as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DProgram} from '../conv_gpu_depthwise';\nimport {DepthwiseConvPacked2DProgram} from '../conv_packed_gpu_depthwise';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\n\nexport function fusedDepthwiseConv2D(args: {\n  inputs: FusedDepthwiseConv2DInputs,\n  attrs: FusedDepthwiseConv2DAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {strides, pad, dilations, dimRoundingMode, activation, leakyreluAlpha} =\n      attrs;\n\n  const intermediates: TensorInfo[] = [];\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  const shouldPackDepthwiseConv = env().getBool('WEBGL_PACK_DEPTHWISECONV') &&\n      convInfo.strideWidth <= 2 &&\n      convInfo.outChannels / convInfo.inChannels === 1;\n  const fusedActivation = activation ?\n      mapActivationToShaderProgram(activation, shouldPackDepthwiseConv) :\n      null;\n  const programInputs: TensorInfo[] = [x, filter];\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n\n  if (hasBias) {\n    programInputs.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    programInputs.push(preluActivationWeights);\n  }\n  if (hasLeakyreluAlpha) {\n    const $leakyreluAlpha = backend.makeTensorInfo(\n        [], 'float32',\n        util.createScalarValue(leakyreluAlpha as {} as 'float32', 'float32'));\n    programInputs.push($leakyreluAlpha);\n    intermediates.push($leakyreluAlpha);\n  }\n\n  let program: DepthwiseConv2DProgram|DepthwiseConvPacked2DProgram;\n  if (shouldPackDepthwiseConv) {\n    program = new DepthwiseConvPacked2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n  } else {\n    program = new DepthwiseConv2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n  }\n  const customValues = [\n    [convInfo.padInfo.top, convInfo.padInfo.left],\n    [convInfo.strideHeight, convInfo.strideWidth],\n    [convInfo.dilationHeight, convInfo.dilationWidth],\n    [convInfo.inHeight, convInfo.inWidth]\n  ];\n  const result =\n      backend.runWebGLProgram(program, programInputs, 'float32', customValues);\n\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const fusedDepthwiseConv2DConfig: KernelConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'webgl',\n  kernelFunc: fusedDepthwiseConv2D as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class GatherNDProgram implements GPGPUProgram {\n  variableNames = ['x', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  constructor(\n      private sliceDim: number, private strides: number[], shape: number[]) {\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    const strideString = this.sliceDim > 1 ? 'strides[j]' : 'strides';\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${this.strides});\n         void main() {\n          ${dtype} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${strideString};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherNd, GatherNdInputs, KernelConfig, KernelFunc, Rank, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {GatherNDProgram} from '../gather_nd_gpu';\nimport {gatherNdImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\n\nexport function gatherNd(\n    args: {inputs: GatherNdInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {params, indices} = inputs;\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n  const paramsSize = util.sizeFromShape(params.shape);\n\n  const [resultShape, numSlices, sliceSize, strides] =\n      backend_util.prepareAndValidate(params, indices);\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numSlices, sliceRank]}});\n  const flattenX = reshape({\n    inputs: {x: params},\n    backend,\n    attrs: {shape: [(util.sizeFromShape(params.shape) / sliceSize), sliceSize]}\n  });\n\n  if (backend.shouldExecuteOnCPU([params, indices]) ||\n      params.dtype === 'string') {\n    const indicesData = backend.readSync(indices.dataId) as TypedArray;\n    const paramsBuf = backend.bufferSync<Rank, 'float32'>(params);\n    const outValue = gatherNdImplCPU(\n        indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize,\n        strides, params.shape, paramsSize);\n\n    return backend.makeTensorInfo(resultShape, params.dtype, outValue.values);\n  }\n  const program =\n      new GatherNDProgram(sliceRank, strides, [numSlices, sliceSize]);\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndices], flattenX.dtype);\n\n  const reshaped =\n      reshape({inputs: {x: res}, backend, attrs: {shape: resultShape}});\n\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(res);\n\n  return reshaped;\n}\n\nexport const gatherNdConfig: KernelConfig = {\n  kernelName: GatherNd,\n  backendName: 'webgl',\n  kernelFunc: gatherNd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport type GatherShape = [number, number, number, number];\n\nexport class GatherProgram implements GPGPUProgram {\n  variableNames = ['A', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: GatherShape, outputShape: GatherShape) {\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape, 2);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${aShape[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${sourceCoords}));\n      }\n    `;\n  }\n}\n\n// The input and output are always flattened into rank 4 tensors.\nfunction getSourceCoords(aShape: GatherShape, axis: number): string {\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    if (i === 2) {\n      sourceCoords.push('index');\n    } else {\n      sourceCoords.push(`${currentCoords[i]}`);\n    }\n  }\n  return sourceCoords.join();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherV2, GatherV2Attrs, GatherV2Inputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util, env} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {GatherProgram, GatherShape} from '../gather_gpu';\nimport {gatherV2ImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\n\nexport function gatherV2(args: {\n  inputs: GatherV2Inputs,\n  backend: MathBackendWebGL,\n  attrs: GatherV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, indices} = inputs;\n  const {axis, batchDims} = attrs;\n\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n  if (env().get('DEBUG')) {\n    // In debug mode, throw error when any index is out of bound.\n    // Otherwise, just fill out of bounds with zeroes.\n    const indicesVals = backend.readSync(indices.dataId) as TypedArray;\n    const axisDim = x.shape[parsedAxis];\n    for (let i = 0; i < indicesVals.length; ++i) {\n      const index = indicesVals[i];\n      util.assert(\n        index <= axisDim - 1 && index >= 0,\n        () =>\n          `GatherV2: the index value ${index} is not in [0, ${axisDim - 1}]`);\n    }\n  }\n\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(\n      x, indices, parsedAxis, batchDims);\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const toDispose = [];\n\n  const flattenX = reshape({\n    inputs: {x},\n    backend,\n    attrs: {\n      shape: [\n        shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n        shapeInfo.sliceSize\n      ]\n    }\n  });\n\n  const flattenIndex = reshape({\n    inputs: {x: indices},\n    backend,\n    attrs: {shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]}\n  });\n\n  toDispose.push(flattenX);\n  toDispose.push(flattenIndex);\n\n  const flattenOutputShape = [\n    shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n    shapeInfo.sliceSize\n  ];\n\n  if (backend.shouldExecuteOnCPU([x, indices]) || x.dtype === 'string') {\n    const indicesBuf = backend.bufferSync(flattenIndex);\n    const xBuf = backend.bufferSync(flattenX);\n    const outBuf = gatherV2ImplCPU(xBuf, indicesBuf, flattenOutputShape);\n\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n    return backend.makeTensorInfo(\n        shapeInfo.outputShape, outBuf.dtype, outBuf.values as TypedArray);\n  }\n\n  const program = new GatherProgram(flattenX.shape as GatherShape,\n                                    flattenOutputShape as GatherShape);\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndex], flattenX.dtype);\n  toDispose.push(res);\n\n  const reshaped = reshape(\n      {inputs: {x: res}, backend, attrs: {shape: shapeInfo.outputShape}});\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return reshaped;\n}\n\nexport const gatherV2Config: KernelConfig = {\n  kernelName: GatherV2,\n  backendName: 'webgl',\n  kernelFunc: gatherV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Greater, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {greaterImplCPU} from '../kernel_utils/shared';\n\nconst GREATER = `return float(a > b);`;\nconst GREATER_PACKED = `\n  return vec4(greaterThan(a, b));\n`;\n\nexport const greater = binaryKernelFunc({\n  opSnippet: GREATER,\n  packedOpSnippet: GREATER_PACKED,\n  cpuKernelImpl: greaterImplCPU,\n  dtype: 'bool'\n});\n\nexport const greaterConfig: KernelConfig = {\n  kernelName: Greater,\n  backendName: 'webgl',\n  kernelFunc: greater as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GreaterEqual, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {greaterEqualImplCPU} from '../kernel_utils/shared';\n\nconst GREATER_EQUAL = `return float(a >= b);`;\nconst GREATER_EQUAL_PACKED = `\n  return vec4(greaterThanEqual(a, b));\n`;\n\nexport const greaterEqual = binaryKernelFunc({\n  opSnippet: GREATER_EQUAL,\n  packedOpSnippet: GREATER_EQUAL_PACKED,\n  dtype: 'bool',\n  cpuKernelImpl: greaterEqualImplCPU\n});\n\nexport const greaterEqualConfig: KernelConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'webgl',\n  kernelFunc: greaterEqual as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IFFT, IFFTInputs, KernelConfig, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {fftImpl} from './FFT_impl';\n\nexport function ifft(args: {inputs: IFFTInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  return fftImpl(input, true /* inverse */, backend);\n}\n\nexport const ifftConfig: KernelConfig = {\n  kernelName: IFFT,\n  backendName: 'webgl',\n  kernelFunc: ifft\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsFinite, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst IS_FINITE = `return float(!isnan(x) && !isinf(x));`;\n\nexport const isFinite = unaryKernelFunc({opSnippet: IS_FINITE, dtype: 'bool'});\n\nexport const isFiniteConfig: KernelConfig = {\n  kernelName: IsFinite,\n  backendName: 'webgl',\n  kernelFunc: isFinite,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsInf, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst IS_INF = `return float(isinf(x));`;\n\nexport const isInf = unaryKernelFunc({opSnippet: IS_INF, dtype: 'bool'});\n\nexport const isInfConfig: KernelConfig = {\n  kernelName: IsInf,\n  backendName: 'webgl',\n  kernelFunc: isInf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsNan, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst IS_NAN = `return float(isnan(x));`;\n\nexport const isNaN = unaryKernelFunc({opSnippet: IS_NAN, dtype: 'bool'});\n\nexport const isNaNConfig: KernelConfig = {\n  kernelName: IsNan,\n  backendName: 'webgl',\n  kernelFunc: isNaN,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Less} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {lessImplCPU} from '../kernel_utils/shared';\n\nconst LESS = `return float(a < b);`;\nconst LESS_PACKED = `\n  return vec4(lessThan(a, b));\n`;\n\nexport const less = binaryKernelFunc({\n  opSnippet: LESS,\n  packedOpSnippet: LESS_PACKED,\n  cpuKernelImpl: lessImplCPU,\n  dtype: 'bool'\n});\n\nexport const lessConfig: KernelConfig = {\n  kernelName: Less,\n  backendName: 'webgl',\n  kernelFunc: less as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LessEqual} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {lessEqualImplCPU} from '../kernel_utils/shared';\n\nexport const LESS_EQUAL = `return float(a <= b);`;\nexport const LESS_EQUAL_PACKED = `\n  return vec4(lessThanEqual(a, b));\n`;\n\nexport const lessEqual = binaryKernelFunc({\n  opSnippet: LESS_EQUAL,\n  packedOpSnippet: LESS_EQUAL_PACKED,\n  cpuKernelImpl: lessEqualImplCPU,\n  dtype: 'bool'\n});\n\nexport const lessEqualConfig: KernelConfig = {\n  kernelName: LessEqual,\n  backendName: 'webgl',\n  kernelFunc: lessEqual as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LinSpace, LinSpaceAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {linSpaceImplCPU} from '../kernel_utils/shared';\n\nexport function linSpace(\n    args: {backend: MathBackendWebGL, attrs: LinSpaceAttrs}): TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, num} = attrs;\n\n  // TODO: Use CPU implementation due to the precision problem in Safari.\n  const outVals = linSpaceImplCPU(start, stop, num);\n  return backend.makeTensorInfo([outVals.length], 'float32', outVals);\n}\n\nexport const linSpaceConfig: KernelConfig = {\n  kernelName: LinSpace,\n  backendName: 'webgl',\n  kernelFunc: linSpace as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Log} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {logImplCPU} from '../kernel_utils/shared';\n\n// Windows chrome return 0 if the input is negative value. We will specifically\n// return NaN if the input is 0 to solve compatiblity issue.\nconst LOG = CHECK_NAN_SNIPPET_UNARY + `\n  return x < 0.0 ? 0./0. : log(x);\n`;\n\nconst LOG_PACKED = `\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n`;\n\nexport const log = unaryKernelFunc(\n    {opSnippet: LOG, packedOpSnippet: LOG_PACKED, cpuKernelImpl: logImplCPU});\n\nexport const logConfig: KernelConfig = {\n  kernelName: Log,\n  backendName: 'webgl',\n  kernelFunc: log as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log1p} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOG1P = CHECK_NAN_SNIPPET_UNARY + `\n  return log(1.0 + x);\n`;\n\nexport const log1p = unaryKernelFunc({opSnippet: LOG1P});\n\nexport const log1pConfig: KernelConfig = {\n  kernelName: Log1p,\n  backendName: 'webgl',\n  kernelFunc: log1p,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LogicalAnd} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOGICAL_AND = `return float(a >= 1.0 && b >= 1.0);`;\nconst LOGICAL_AND_PACKED = `\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n`;\n\nexport const logicalAnd = binaryKernelFunc({\n  opSnippet: LOGICAL_AND,\n  packedOpSnippet: LOGICAL_AND_PACKED,\n  dtype: 'bool'\n});\n\nexport const logicalAndConfig: KernelConfig = {\n  kernelName: LogicalAnd,\n  backendName: 'webgl',\n  kernelFunc: logicalAnd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalNot} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOGICAL_NOT = `return float(!(x >= 1.0));`;\n\nexport const logicalNot = unaryKernelFunc({opSnippet: LOGICAL_NOT});\n\nexport const logicalNotConfig: KernelConfig = {\n  kernelName: LogicalNot,\n  backendName: 'webgl',\n  kernelFunc: logicalNot,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LogicalOr} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOGICAL_OR = `return float(a >= 1.0 || b >= 1.0);`;\nconst LOGICAL_OR_PACKED = `\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n`;\n\nexport const logicalOr = binaryKernelFunc(\n    {opSnippet: LOGICAL_OR, packedOpSnippet: LOGICAL_OR_PACKED, dtype: 'bool'});\n\nexport const logicalOrConfig: KernelConfig = {\n  kernelName: LogicalOr,\n  backendName: 'webgl',\n  kernelFunc: logicalOr as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      xShape: number[], radius: number, bias: number, alpha: number,\n      beta: number) {\n    const rad = radius;\n    const maxD = xShape[3] - 1;\n    this.outputShape = xShape;\n\n    // optimize pow(bias + alpha * sum, -beta)\n    // src: https://github.com/tensorflow/tensorflow/..\n    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n    // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n    let powOperator;\n    const basis = `float(${bias}) + float(${alpha}) * sum`;\n    if (beta === 0.5) {\n      powOperator = `inversesqrt(${basis})`;\n    } else if (beta === 1.0) {\n      powOperator = `1.0/(${basis})`;\n    } else {\n      powOperator = `exp(log(${basis}) * float(-${beta}));`;\n    }\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${rad}; j <= ${rad}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${maxD}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${powOperator};\n        setOutput(val);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      xShape: number[], radius: number, bias: number, alpha: number,\n      beta: number) {\n    const rad = radius;\n    const maxD = xShape[3] - 1;\n    this.outputShape = xShape;\n\n    // optimize pow(bias + alpha * sum, -beta)\n    // src: https://github.com/tensorflow/tensorflow/..\n    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n    // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n    let powOperator;\n    const basis = `float(${bias}) + float(${alpha}) * sum`;\n    if (beta === 0.5) {\n      powOperator = `inversesqrt(${basis})`;\n    } else if (beta === 1.0) {\n      powOperator = `1.0/(${basis})`;\n    } else {\n      powOperator = `exp(log(${basis}) * float(-${beta}));`;\n    }\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${rad};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${rad}; j <= ${rad}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${maxD}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${powOperator};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, LRN, LRNAttrs, LRNInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {LRNProgram} from '../lrn_gpu';\nimport {LRNPackedProgram} from '../lrn_packed_gpu';\n\nexport const lrn =\n    (args: {inputs: LRNInputs, backend: MathBackendWebGL, attrs: LRNAttrs}):\n        TensorInfo => {\n          const {inputs, backend, attrs} = args;\n          const {x} = inputs;\n          const {depthRadius, bias, alpha, beta} = attrs;\n\n          const program = env().getBool('WEBGL_PACK_NORMALIZATION') ?\n              new LRNPackedProgram(x.shape, depthRadius, bias, alpha, beta) :\n              new LRNProgram(x.shape, depthRadius, bias, alpha, beta);\n          return backend.runWebGLProgram(program, [x], x.dtype);\n        };\n\n// tslint:disable-next-line: variable-name\nexport const LRNConfig: KernelConfig = {\n  kernelName: LRN,\n  backendName: 'webgl',\n  kernelFunc: lrn as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNGradProgram implements GPGPUProgram {\n  variableNames = ['inputImage', 'outputImage', 'dy'];\n  outputShape: number[] = [];\n  userCode: string;\n  depthRadius: number;\n  bias: number;\n  alpha: number;\n  beta: number;\n  depth: number;\n\n  constructor(\n      inputShape: number[], depthRadius: number, bias: number, alpha: number,\n      beta: number) {\n    this.outputShape = inputShape;\n    this.depth = inputShape[3];\n    this.depthRadius = depthRadius;\n    this.bias = bias;\n    this.alpha = alpha;\n    this.beta = beta;\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${depthRadius})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${depthRadius} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${alpha}) * norm + float(${bias});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${alpha})\n                * float(${beta})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${beta});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRNGrad, LRNGradAttrs, LRNGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {LRNGradProgram} from '../lrn_grad_gpu';\n\nexport const lrnGrad = (args: {\n  inputs: LRNGradInputs,\n  backend: MathBackendWebGL,\n  attrs: LRNGradAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x, y, dy} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  const program = new LRNGradProgram(x.shape, depthRadius, bias, alpha, beta);\n  return backend.runWebGLProgram(program, [x, y, dy], x.dtype);\n};\n\n// tslint:disable-next-line: variable-name\nexport const LRNGradConfig: KernelConfig = {\n  kernelName: LRNGrad,\n  backendName: 'webgl',\n  kernelFunc: lrnGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelFunc, Max, MaxAttrs, MaxInputs, TensorInfo} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {maxImplCPU} from '../kernel_utils/shared';\n\nimport {maxImpl} from './Max_impl';\nimport {transposeImpl, transposeImplCPU} from './Transpose_impl';\n\nexport function max(\n    args: {inputs: MaxInputs, backend: MathBackendWebGL, attrs: MaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reductionIndices, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  const maxInputIsTransposed = permutedAxes != null;\n  const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);\n\n  let maxInput = x;\n  if (maxInputIsTransposed) {\n    if (shouldExecuteOnCPU) {\n      const xTexData = backend.texData.get(maxInput.dataId);\n      const values = xTexData.values as TypedArray;\n\n      const newShape: number[] = new Array(xRank);\n      for (let i = 0; i < newShape.length; i++) {\n        newShape[i] = x.shape[permutedAxes[i]];\n      }\n      const maxInputValues =\n          transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n\n      maxInput = backend.makeTensorInfo(newShape, x.dtype);\n      const maxInputData = backend.texData.get(maxInput.dataId);\n      maxInputData.values = maxInputValues;\n    } else {\n      maxInput = transposeImpl(x, permutedAxes, backend);\n    }\n\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n  const [maxOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(maxInput.shape, axes);\n\n  let outShape = maxOutShape;\n  if (keepDims) {\n    // rather than reshape at the end, set the target shape here.\n    outShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n  }\n\n  let out;\n  if (shouldExecuteOnCPU) {\n    const xTexData = backend.texData.get(maxInput.dataId);\n    const values = xTexData.values as TypedArray;\n\n    const outValues =\n        maxImplCPU(values, util.sizeFromShape(reduceShape), outShape, x.dtype);\n\n    out = backend.makeTensorInfo(outShape, x.dtype);\n    const outData = backend.texData.get(out.dataId);\n    outData.values = outValues;\n  } else {\n    out = maxImpl(maxInput, reduceShape, outShape, backend);\n  }\n\n  if (maxInputIsTransposed) {\n    backend.disposeIntermediateTensorInfo(maxInput);\n  }\n\n  return out;\n}\n\nexport const maxConfig: KernelConfig = {\n  kernelName: Max,\n  backendName: 'webgl',\n  kernelFunc: max as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from '../kernels/Reshape';\n\nexport function maxImpl(\n    x: TensorInfo, reduceShape: number[], outShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const inSize = util.sizeFromShape(reduceShape);\n  const xSize = util.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput =\n      reshape({inputs: {x}, attrs: {shape: [batchSize, inSize]}, backend});\n\n  const reduced = reduce(reshapedInput, x.dtype, 'max', backend);\n  const reshapedOutput =\n      reshape({inputs: {x: reduced}, attrs: {shape: outShape}, backend});\n\n  backend.disposeIntermediateTensorInfo(reshapedInput);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  return reshapedOutput;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Maximum} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET} from '../binaryop_gpu';\nimport {CHECK_NAN_SNIPPET as CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {maximumImplCPU} from '../kernel_utils/shared';\n\nconst MAXIMUM = CHECK_NAN_SNIPPET + `\n  return max(a, b);\n`;\n\nconst MAXIMUM_PACKED = `\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\n\nexport const maximum = binaryKernelFunc({\n  opSnippet: MAXIMUM,\n  packedOpSnippet: MAXIMUM_PACKED,\n  cpuKernelImpl: maximumImplCPU\n});\n\nexport const maximumConfig: KernelConfig = {\n  kernelName: Maximum,\n  backendName: 'webgl',\n  kernelFunc: maximum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool, MaxPoolAttrs, MaxPoolInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool2DProgram} from '../pool_gpu';\nimport {assertNotComplex} from '../webgl_util';\nimport {identity} from './Identity';\n\nexport function maxPool(args: {\n  inputs: MaxPoolInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPoolAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'maxPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    return identity({inputs: {x}, backend});\n  }\n  const maxPoolProgram = new Pool2DProgram(convInfo, 'max', false);\n  return backend.runWebGLProgram(maxPoolProgram, [x], x.dtype);\n}\n\nexport const maxPoolConfig: KernelConfig = {\n  kernelName: MaxPool,\n  backendName: 'webgl',\n  kernelFunc: maxPool as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3D, MaxPool3DAttrs, MaxPool3DInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool3DProgram} from '../pool_gpu';\n\nexport function maxPool3d(args: {\n  inputs: MaxPool3DInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dataFormat, dimRoundingMode} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode, dataFormat);\n  const maxPoolProgram = new Pool3DProgram(convInfo, 'max', false);\n  return backend.runWebGLProgram(maxPoolProgram, [x], x.dtype);\n}\n\nexport const maxPool3DConfig: KernelConfig = {\n  kernelName: MaxPool3D,\n  backendName: 'webgl',\n  kernelFunc: maxPool3d as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MaxPool2DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy', 'maxPos'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const lastIndex = effectiveFilterHeight * effectiveFilterWidth - 1;\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n          wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${lastIndex} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${effectiveFilterWidth} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class MaxPool3DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy', 'maxPos'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const lastIndex =\n        effectiveFilterDepth * effectiveFilterHeight * effectiveFilterWidth - 1;\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n           wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${lastIndex} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                  wR * ${effectiveFilterWidth} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3DGrad, MaxPool3DGradAttrs, MaxPool3DGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MaxPool3DBackpropProgram} from '../max_pool_backprop_gpu';\nimport {Pool3DProgram} from '../pool_gpu';\n\nexport function maxPool3DGrad(args: {\n  inputs: MaxPool3DGradInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n\n  const maxPool3dPositionsProgram =\n      new Pool3DProgram(convInfo, 'max', true /* get positions */);\n  const maxPool3dPositions =\n      backend.runWebGLProgram(maxPool3dPositionsProgram, [x], x.dtype);\n  const maxPoolBackpropProgram = new MaxPool3DBackpropProgram(convInfo);\n  const result = backend.runWebGLProgram(\n      maxPoolBackpropProgram, [dy, maxPool3dPositions], x.dtype);\n  backend.disposeIntermediateTensorInfo(maxPool3dPositions);\n  return result;\n}\n\nexport const maxPool3DGradConfig: KernelConfig = {\n  kernelName: MaxPool3DGrad,\n  backendName: 'webgl',\n  kernelFunc: maxPool3DGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPoolGrad, MaxPoolGradAttrs, MaxPoolGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MaxPool2DBackpropProgram} from '../max_pool_backprop_gpu';\nimport {Pool2DProgram} from '../pool_gpu';\nimport {assertNotComplex} from '../webgl_util';\n\nexport function maxPoolGrad(args: {\n  inputs: MaxPoolGradInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input, output} = inputs;\n  const x = input;\n  assertNotComplex([input, output], 'maxPoolGrad');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode);\n  const getPositions = true;\n  const maxPoolPositionsProgram =\n      new Pool2DProgram(convInfo, 'max', getPositions);\n  const maxPoolPositions: TensorInfo =\n      backend.runWebGLProgram(maxPoolPositionsProgram, [x], x.dtype);\n\n  const maxPoolBackPropProgram = new MaxPool2DBackpropProgram(convInfo);\n  const result = backend.runWebGLProgram(\n      maxPoolBackPropProgram, [dy, maxPoolPositions], x.dtype);\n  backend.disposeIntermediateTensorInfo(maxPoolPositions);\n  return result;\n}\n\nexport const maxPoolGradConfig: KernelConfig = {\n  kernelName: MaxPoolGrad,\n  backendName: 'webgl',\n  kernelFunc: maxPoolGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {maxPoolWithArgmaxImpl} from './MaxPoolWithArgmax_impl';\n\nexport const maxPoolWithArgmaxConfig: KernelConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxPoolWithArgmaxInputs;\n    const {filterSize, strides, pad, includeBatchInIndex} =\n        attrs as {} as MaxPoolWithArgmaxAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    util.assert(\n        x.shape.length === 4,\n        () => `Error in maxPool: input must be rank 4 but got rank ${\n            x.shape.length}.`);\n    const dilations: [number, number] = [1, 1];\n    util.assert(\n        backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n        () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n            `Got strides ${strides} and dilations '${dilations}'`);\n\n    const convInfo = backend_util.computePool2DInfo(\n        x.shape as [number, number, number, number], filterSize, strides,\n        dilations, pad);\n\n    const [result, indexes] =\n        maxPoolWithArgmaxImpl(x, includeBatchInIndex, convInfo, webglBackend);\n    return [result, indexes];\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool2DProgram} from '../pool_gpu';\n\nexport function maxPoolWithArgmaxImpl(\n    x: TensorInfo, includeBatchInIndex: boolean,\n    convInfo: backend_util.Conv2DInfo,\n    backend: MathBackendWebGL): TensorInfo[] {\n  let program = new Pool2DProgram(convInfo, 'max', false);\n  const poolOutput = backend.runWebGLProgram(program, [x], 'float32');\n\n  program = new Pool2DProgram(convInfo, 'max', true, true, includeBatchInIndex);\n  const indexOutput = backend.runWebGLProgram(program, [x], 'float32');\n  return [poolOutput, indexOutput];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Mean, MeanAttrs, MeanInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {meanImpl} from './Mean_impl';\nimport {transposeImpl, transposeImplCPU} from './Transpose_impl';\n\nexport const meanConfig: KernelConfig = {\n  kernelName: Mean,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MeanInputs;\n    const {keepDims, axis} = attrs as {} as MeanAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const xRank = x.shape.length;\n    const origAxes = util.parseAxisParam(axis, x.shape);\n\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    const meanInputIsTransposed = permutedAxes != null;\n    const shouldExecuteOnCPU = webglBackend.shouldExecuteOnCPU([x]);\n\n    const intermediates: TensorInfo[] = [];\n\n    let meanInput = x;\n    if (meanInputIsTransposed) {\n      if (shouldExecuteOnCPU) {\n        const xTexData = webglBackend.texData.get(meanInput.dataId);\n        const values = xTexData.values as TypedArray;\n\n        const newShape: number[] = new Array(xRank);\n        for (let i = 0; i < newShape.length; i++) {\n          newShape[i] = x.shape[permutedAxes[i]];\n        }\n        const meanInputValues =\n            transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n\n        meanInput = webglBackend.makeTensorInfo(newShape, x.dtype);\n        const meanInputData = webglBackend.texData.get(meanInput.dataId);\n        meanInputData.values = meanInputValues;\n      } else {\n        meanInput = transposeImpl(x, permutedAxes, webglBackend);\n      }\n\n      intermediates.push(meanInput);\n      axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    }\n\n    backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);\n    const [meanOutShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(meanInput.shape, axes);\n\n    let outShape = meanOutShape;\n    if (keepDims) {\n      // rather than reshape at the end, set the target shape here.\n      outShape = backend_util.expandShapeToKeepDim(meanOutShape, origAxes);\n    }\n\n    const out = meanImpl(meanInput, reduceShape, outShape, webglBackend);\n    for (const i of intermediates) {\n      webglBackend.disposeIntermediateTensorInfo(i);\n    }\n\n    return out;\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from '../kernels/Reshape';\n\nexport function meanImpl(\n    x: TensorInfo, reduceShape: number[], outShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const inSize = util.sizeFromShape(reduceShape);\n  const xSize = util.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput =\n      reshape({inputs: {x}, attrs: {shape: [batchSize, inSize]}, backend});\n\n  const reduced = reduce(reshapedInput, 'float32', 'mean', backend);\n  const reshapedOutput =\n      reshape({inputs: {x: reduced}, attrs: {shape: outShape}, backend});\n\n  backend.disposeIntermediateTensorInfo(reshapedInput);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  return reshapedOutput;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Min, MinAttrs, MinInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\n\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function min(\n    args: {inputs: MinInputs, backend: MathBackendWebGL, attrs: MinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('min', axes, xRank);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n  const inSize = util.sizeFromShape(reduceShape);\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  const reduced = reduce(a2D, a2D.dtype, 'min', backend);\n\n  let res;\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: newShape}});\n  } else {\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n  }\n\n  backend.disposeIntermediateTensorInfo(a2D);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return res;\n}\n\nexport const minConfig: KernelConfig = {\n  kernelName: Min,\n  backendName: 'webgl',\n  kernelFunc: min as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Minimum} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET} from '../binaryop_gpu';\nimport {CHECK_NAN_SNIPPET as CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {minimumImplCPU} from '../kernel_utils/shared';\n\nconst MINIMUM = CHECK_NAN_SNIPPET + `\n  return min(a, b);\n`;\n\nconst MINIMUM_PACKED = `\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\n\nexport const minimum = binaryKernelFunc({\n  opSnippet: MINIMUM,\n  packedOpSnippet: MINIMUM_PACKED,\n  cpuKernelImpl: minimumImplCPU\n});\n\nexport const minimumConfig: KernelConfig = {\n  kernelName: Minimum,\n  backendName: 'webgl',\n  kernelFunc: minimum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class MirrorPadProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      mode: 'reflect'|'symmetric') {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const unpackedCoords =\n        ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n    const offset = mode === 'reflect' ? 0 : 1;\n\n    if (rank === 1) {\n      this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${offset};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${offset};\n          }\n          setOutput(getX(outC - start));\n        }\n      `;\n      return;\n    }\n    this.userCode = `\n      ${dtype} start = ${dtype}(${start});\n      ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outC = getOutputCoords();\n        for (int i = 0; i < ${rank}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${offset};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${offset};\n          }\n        }\n        ${dtype} coords = outC - start;\n        setOutput(getX(${unpackedCoords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\n/**\n * Example shader code for\n * `mirrorPad(tf.tensor1d([1, 2, 3], 'int32'), [[2, 2]], 'reflect')`\n * ```\n *    const int start = int(2);\n *    const int end = int(5);\n *\n *    void main() {\n *       int outputLoc = getOutputCoords();\n *       vec4 result = vec4(0.);\n *\n *       int rc = outputLoc;\n *\n *       int source = rc;\n *       if (source < start) {\n *         source = start * 2 - source - 0;\n *       } else if (source >= end) {\n *         source = (end - 1) * 2 - source + 0;\n *       }\n *       source -= start;\n *\n *       result[0] = getChannel(getX(source), source);\n *       rc += 1;\n *       if(rc < 6) {\n *          int source = rc;\n *          if (source < start) {\n *            source = start * 2 - source - 0;\n *          } else if (source >= end) {\n *            source = (end - 1) * 2 - source + 0;\n *          }\n *          source -= start;\n *\n *         result[1] = getChannel(getX(source), source);\n *       }\n *\n *       setOutput(result);\n *     }\n * ```\n */\nexport class MirrorPadPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      mode: 'reflect'|'symmetric') {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const coords = getChannels('rc', rank);\n    const source = getChannels('source', rank);\n    const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n    const innerDims =\n        rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n    const offset = mode === 'reflect' ? 0 : 1;\n\n    let mainLoop = '';\n    if (rank === 1) {\n      const padSetup = `\n        ${dtype} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${offset};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${offset};\n        }\n        source -= start;\n      `;\n      mainLoop = `\n        ${dtype} rc = outputLoc;\n        ${padSetup}\n        result[0] = getChannel(getX(${source.join()}), ${innerDims});\n        ${coords[rank - 1]} += 1;\n        if(${cLimit}) {\n          ${padSetup}\n          result[1] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n    } else {\n      const padSetup = `\n        ${dtype} source = rc;\n        ${dtype} lt = ${dtype}(lessThan(source, start));\n        ${dtype} gte = ${dtype}(greaterThanEqual(source, end));\n        ${dtype} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${offset}) +\n                gte * ((end - 1) * 2 - source + ${offset});\n        source -= start;\n      `;\n\n      mainLoop = `\n        ${dtype} rc = outputLoc;\n        ${padSetup}\n        result[0] = getChannel(getX(${source.join()}), ${innerDims});\n        ${coords[rank - 1]} += 1;\n        if(${cLimit}) {\n          ${padSetup}\n          result[1] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n        rc = outputLoc;\n        ${coords[rank - 2]} += 1;\n        if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {\n          ${padSetup}\n          result[2] = getChannel(getX(${source.join()}), ${innerDims});\n          ${coords[rank - 1]} += 1;\n          if(${cLimit}) {\n            ${padSetup}\n            result[3] = getChannel(getX(${source.join()}), ${innerDims});\n          }\n        }\n      `;\n    }\n\n    this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, MirrorPad, MirrorPadAttrs, MirrorPadInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MirrorPadProgram} from '../mirror_pad_gpu';\nimport {MirrorPadPackedProgram} from '../mirror_pad_packed_gpu';\n\nexport const mirrorPadKernelFunc: (params: {\n  inputs: MirrorPadInputs,\n  backend: MathBackendWebGL,\n  attrs: MirrorPadAttrs\n}) => TensorInfo = ({inputs, backend, attrs}) => {\n  const {x} = inputs;\n  const {paddings, mode} = attrs;\n\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n      new MirrorPadPackedProgram(x.shape, paddings, mode) :\n      new MirrorPadProgram(x.shape, paddings, mode);\n\n  const output = backend.runWebGLProgram(program, [x], x.dtype);\n\n  return output;\n};\n\nexport const mirrorPadConfig: KernelConfig = {\n  kernelName: MirrorPad,\n  backendName: 'webgl',\n  kernelFunc: mirrorPadKernelFunc as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Mod} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst MOD = `if (b == 0.0) return NAN;\n  return mod(a, b);`;\n\nconst MOD_PACKED = `\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  ` +\n    CHECK_NAN_SNIPPET + `\n  return result;\n`;\n\nexport const mod = binaryKernelFunc({\n  opSnippet: MOD,\n  packedOpSnippet: MOD_PACKED,\n});\n\nexport const modConfig: KernelConfig = {\n  kernelName: Mod,\n  backendName: 'webgl',\n  kernelFunc: mod as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class MultinomialProgram implements GPGPUProgram {\n  variableNames = ['probs'];\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'seed', type: 'float' as UniformType}];\n\n  constructor(batchSize: number, numOutcomes: number, numSamples: number) {\n    this.outputShape = [batchSize, numSamples];\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${numOutcomes - 1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${numOutcomes - 1}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {RealDiv} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\n// Without the equality check div produces 0.9999 for a = b, which when\n// floored can cause errors.\nconst DIV = `\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;`;\n\n// We do the same as in ./binaryop_gpu, with vec4 and ivec4.\n// On Linux, the vectorized implementation produces NaNs when a and b are 0.\nconst DIV_PACKED = `\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n`;\n\nexport const realDiv = binaryKernelFunc(\n    {opSnippet: DIV, packedOpSnippet: DIV_PACKED, checkOutOfBounds: true});\n\nexport const realDivConfig: KernelConfig = {\n  kernelName: RealDiv,\n  backendName: 'webgl',\n  kernelFunc: realDiv,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sub} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {subImplCPU as cpuSub} from '../kernel_utils/shared';\n\nconst SUB = 'return a - b;';\n\nexport const sub = binaryKernelFunc({\n  opSnippet: SUB,\n  packedOpSnippet: SUB,\n  supportsComplex: true,\n  cpuKernelImpl: cpuSub\n});\n\nexport const subConfig: KernelConfig = {\n  kernelName: Sub,\n  backendName: 'webgl',\n  kernelFunc: sub\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Softmax, SoftmaxAttrs, SoftmaxInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {exp} from './Exp';\nimport {max} from './Max';\nimport {realDiv} from './RealDiv';\nimport {reshape} from './Reshape';\nimport {sub} from './Sub';\nimport {sum} from './Sum';\n\nexport function softmax(args: {\n  inputs: SoftmaxInputs,\n  backend: MathBackendWebGL,\n  attrs: SoftmaxAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {dim} = attrs;\n\n  const axes = util.parseAxisParam([dim], logits.shape);\n\n  const maxLogit = max({\n    inputs: {x: logits},\n    backend,\n    attrs: {reductionIndices: axes, keepDims: false}\n  });\n\n  const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n\n  const maxLogitsReshaped =\n      reshape({inputs: {x: maxLogit}, backend, attrs: {shape: expandedShape}});\n  const a =\n      sub({inputs: {a: logits, b: maxLogitsReshaped}, backend}) as TensorInfo;\n  const b = exp({inputs: {x: a}, backend}) as TensorInfo;\n  const sumExp =\n      sum({inputs: {x: b}, backend, attrs: {axis: axes, keepDims: false}});\n  const sumExpReshaped =\n      reshape({inputs: {x: sumExp}, backend, attrs: {shape: expandedShape}});\n\n  const res =\n      realDiv({inputs: {a: b, b: sumExpReshaped}, backend}) as TensorInfo;\n\n  backend.disposeIntermediateTensorInfo(maxLogit);\n  backend.disposeIntermediateTensorInfo(maxLogitsReshaped);\n  backend.disposeIntermediateTensorInfo(a);\n  backend.disposeIntermediateTensorInfo(b);\n  backend.disposeIntermediateTensorInfo(sumExp);\n  backend.disposeIntermediateTensorInfo(sumExpReshaped);\n\n  return res;\n}\n\nexport const softmaxConfig: KernelConfig = {\n  kernelName: Softmax,\n  backendName: 'webgl',\n  kernelFunc: softmax as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Multinomial, MultinomialAttrs, MultinomialInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MultinomialProgram} from '../multinomial_gpu';\n\nimport {softmax} from './Softmax';\n\nexport function multinomial(args: {\n  inputs: MultinomialInputs,\n  backend: MathBackendWebGL,\n  attrs: MultinomialAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {numSamples, seed, normalized} = attrs;\n\n  const probs = normalized ?\n      logits :\n      softmax(\n          {inputs: {logits}, backend, attrs: {dim: logits.shape.length - 1}});\n  const batchSize = probs.shape[0];\n  const numOutcomes = probs.shape[1];\n  const program = new MultinomialProgram(batchSize, numOutcomes, numSamples);\n  const customValues = [[seed]];\n  const res = backend.runWebGLProgram(program, [probs], 'int32', customValues);\n  if (!normalized) {\n    backend.disposeIntermediateTensorInfo(probs);\n  }\n  return res;\n}\n\nexport const multinomialConfig: KernelConfig = {\n  kernelName: Multinomial,\n  backendName: 'webgl',\n  kernelFunc: multinomial as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Neg, NegInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {negImplCPU} from '../kernel_utils/shared';\nimport {CHECK_NAN_SNIPPET, UnaryOpProgram} from '../unaryop_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nconst NEG = CHECK_NAN_SNIPPET + `\n  return -x;\n`;\n\nconst NEG_PACKED = `\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\n// This doesn't use unaryKernelFunc because negImplCPU is not of type\n// SimpleUnaryKernelImplCPU.\nexport function neg(args: {inputs: NegInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (backend.shouldExecuteOnCPU([x])) {\n    const xData = backend.texData.get(x.dataId);\n    const [outValues, newShape] =\n        negImplCPU(xData.values as TypedArray, x.shape, x.dtype);\n    return backend.makeTensorInfo(newShape, x.dtype, outValues);\n  }\n\n  let program: UnaryOpProgram|UnaryOpPackedProgram;\n  if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n    program = new UnaryOpPackedProgram(x.shape, NEG_PACKED);\n  } else {\n    program = new UnaryOpProgram(x.shape, NEG);\n  }\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'webgl',\n  kernelFunc: neg as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV3, NonMaxSuppressionV3Attrs, NonMaxSuppressionV3Inputs, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV3Impl = kernel_impls.nonMaxSuppressionV3Impl;\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function nonMaxSuppressionV3(args: {\n  inputs: NonMaxSuppressionV3Inputs,\n  backend: MathBackendWebGL,\n  attrs: NonMaxSuppressionV3Attrs\n}) {\n  backend_util.warn(\n      'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n      'Call tf.nonMaxSuppressionAsync() instead');\n\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold} = attrs;\n\n  const boxesVals = backend.readSync(boxes.dataId) as TypedArray;\n  const scoresVals = backend.readSync(scores.dataId) as TypedArray;\n\n  const {selectedIndices} = nonMaxSuppressionV3Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n\n  return backend.makeTensorInfo(\n      [selectedIndices.length], 'int32', new Int32Array(selectedIndices));\n}\n\nexport const nonMaxSuppressionV3Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: 'webgl',\n  kernelFunc: nonMaxSuppressionV3 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV4, NonMaxSuppressionV4Attrs, NonMaxSuppressionV4Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV4Impl = kernel_impls.nonMaxSuppressionV4Impl;\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function nonMaxSuppressionV4(args: {\n  inputs: NonMaxSuppressionV4Inputs,\n  backend: MathBackendWebGL,\n  attrs: NonMaxSuppressionV4Attrs\n}): [TensorInfo, TensorInfo] {\n  backend_util.warn(\n      'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n      'Call tf.nonMaxSuppressionAsync() instead');\n\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize} =\n      attrs;\n\n  const boxesVals = backend.readSync(boxes.dataId) as TypedArray;\n  const scoresVals = backend.readSync(scores.dataId) as TypedArray;\n\n  const {selectedIndices, validOutputs} = nonMaxSuppressionV4Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold,\n      padToMaxOutputSize);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo([], 'int32', new Int32Array([validOutputs]))\n  ];\n}\n\nexport const nonMaxSuppressionV4Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV4,\n  backendName: 'webgl',\n  kernelFunc: nonMaxSuppressionV4 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV5, NonMaxSuppressionV5Attrs, NonMaxSuppressionV5Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function nonMaxSuppressionV5(args: {\n  inputs: NonMaxSuppressionV5Inputs,\n  backend: MathBackendWebGL,\n  attrs: NonMaxSuppressionV5Attrs\n}): [TensorInfo, TensorInfo] {\n  backend_util.warn(\n      'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n      'Call tf.nonMaxSuppressionAsync() instead');\n\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma} = attrs;\n\n  const boxesVals = backend.readSync(boxes.dataId) as TypedArray;\n  const scoresVals = backend.readSync(scores.dataId) as TypedArray;\n\n  const maxOutputSizeVal = maxOutputSize;\n  const iouThresholdVal = iouThreshold;\n  const scoreThresholdVal = scoreThreshold;\n  const softNmsSigmaVal = softNmsSigma;\n\n  const {selectedIndices, selectedScores} = nonMaxSuppressionV5Impl(\n      boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n      scoreThresholdVal, softNmsSigmaVal);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo(\n        [selectedScores.length], 'float32', new Float32Array(selectedScores))\n  ];\n}\n\nexport const nonMaxSuppressionV5Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'webgl',\n  kernelFunc: nonMaxSuppressionV5 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class OneHotProgram implements GPGPUProgram {\n  variableNames = ['indices'];\n  outputShape: number[];\n  userCode: string;\n\n  // Caching uniform location for speed.\n  seedLoc: WebGLUniformLocation;\n\n  constructor(\n      numIndices: number, depth: number, onValue: number, offValue: number) {\n    this.outputShape = [numIndices, depth];\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${offValue}), float(${onValue}),\n                      float(index == coords.y)));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OneHot, OneHotAttrs, OneHotInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {OneHotProgram} from '../onehot_gpu';\nimport {reshape} from './Reshape';\n\nexport const oneHot = (args: {\n  inputs: OneHotInputs,\n  backend: MathBackendWebGL,\n  attrs: OneHotAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {indices} = inputs;\n  const {depth, onValue, offValue} = attrs;\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n  const program = new OneHotProgram(indicesSize, depth, onValue, offValue);\n  const reshaped =\n      reshape({inputs: {x: indices}, backend, attrs: {shape: [indicesSize]}});\n  const result = backend.runWebGLProgram(program, [reshaped], indices.dtype);\n  backend.disposeIntermediateTensorInfo(reshaped);\n\n  const outShape = [...indices.shape, depth];\n  const out = reshape({inputs: {x: result}, backend, attrs: {shape: outShape}});\n  backend.disposeIntermediateTensorInfo(result);\n  return out;\n};\n\nexport const oneHotConfig: KernelConfig = {\n  kernelName: OneHot,\n  backendName: 'webgl',\n  kernelFunc: oneHot as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, ZerosLike, ZerosLikeInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\n\nexport function zerosLike(\n    args: {inputs: ZerosLikeInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = zerosLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({\n      attrs: {\n        shape: x.shape,\n        dtype: x.dtype,\n        value: x.dtype === 'string' ? '' : 0\n      },\n      backend\n    });\n  }\n}\n\nexport const zerosLikeConfig: KernelConfig = {\n  kernelName: ZerosLike,\n  backendName: 'webgl',\n  kernelFunc: zerosLike as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OnesLike, OnesLikeInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {zerosLike} from './ZerosLike';\n\nexport function onesLike(\n    args: {inputs: OnesLikeInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('onesLike is not supported under string dtype');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = onesLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    // TODO(cais, smilkov): Add WebGL shader for onesLike:\n    //   https://github.com/tensorflow/tfjs/issues/1293\n    return fill({attrs: {shape: x.shape, dtype: x.dtype, value: 1}, backend});\n  }\n}\n\nexport const onesLikeConfig: KernelConfig = {\n  kernelName: OnesLike,\n  backendName: 'webgl',\n  kernelFunc: onesLike as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pack, PackAttrs, PackInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {concat} from './Concat';\nimport {expandDims} from './ExpandDims';\n\nexport function pack(\n    args: {inputs: PackInputs, backend: MathBackendWebGL, attrs: PackAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  if (inputs.length === 1) {\n    return expandDims(\n        {inputs: {input: inputs[0]}, backend, attrs: {dim: axis}});\n  }\n\n  const shape = inputs[0].shape;\n  const dtype = inputs[0].dtype;\n\n  inputs.forEach(t => {\n    util.assertShapesMatch(\n        shape, t.shape,\n        'All tensors passed to stack must have matching shapes');\n    util.assert(\n        dtype === t.dtype,\n        () => 'All tensors passed to stack must have matching dtypes');\n  });\n\n  const intermediateTensorInfos: TensorInfo[] = [];\n  const expandedTensors = inputs.map(t => {\n    const expandedT =\n        expandDims({inputs: {input: t}, backend, attrs: {dim: axis}});\n    intermediateTensorInfos.push(expandedT);\n    return expandedT;\n  });\n\n  const result = concat({inputs: expandedTensors, backend, attrs: {axis}});\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const packConfig: KernelConfig = {\n  kernelName: Pack,\n  backendName: 'webgl',\n  kernelFunc: pack as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class PadProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'value', type: 'float' as UniformType}];\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      constantValue: number) {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const type = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const unpackedCoords =\n        ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n\n    if (rank === 1) {\n      this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `;\n      return;\n    }\n    this.userCode = `\n      ${type} start = ${type}(${start});\n      ${type} end = ${type}(${end});\n\n      void main() {\n        ${type} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${type} coords = outC - start;\n          setOutput(getX(${unpackedCoords}));\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class PadPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'value', type: 'float' as UniformType}];\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      constantValue: number) {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const coords = getChannels('rc', rank);\n    const source = getChannels('source', rank);\n    const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n    const innerDims =\n        rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n\n    const componentSetup = [\n      `${dtype} rc = outputLoc;`, `${coords[rank - 1]} += 1;\n       if(${cLimit}) {\n      `,\n      rank === 1 ? '' : `}\n       rc = outputLoc;\n       ${coords[rank - 2]} += 1;\n       if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {`,\n      rank === 1 ? '' : `  ${coords[rank - 1]} += 1;\n         if(${cLimit}) {`\n    ];\n\n    const paddingArea = rank === 1 ?\n        'rc < start || rc >= end' :\n        'any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))';\n    let mainLoop = '';\n    for (let i = 0, j = rank === 1 ? 2 : 4; i < j; i++) {\n      mainLoop += `\n        ${componentSetup[i]}\n        if (${paddingArea}) {\n          result[${i}] = float(value);\n        } else {\n          ${dtype} source = rc - start;\n          result[${i}] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n    }\n    mainLoop += (rank === 1 ? `} ` : `}}`);\n\n    this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, PadV2, PadV2Attrs, PadV2Inputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {PadProgram} from '../pad_gpu';\nimport {PadPackedProgram} from '../pad_packed_gpu';\nimport {fill} from './Fill';\n\nexport const padV2 =\n    (args: {inputs: PadV2Inputs, backend: MathBackendWebGL, attrs: PadV2Attrs}):\n        TensorInfo => {\n          const {inputs, backend, attrs} = args;\n          const {x} = inputs;\n          const {paddings, constantValue} = attrs;\n\n          if (util.sizeFromShape(x.shape) === 0) {\n            // Short-circuit the computation, since x doesn't have value, only\n            // the shape is used to compute output shape to pad.\n            const outputShape = paddings.map(\n                (p, i) =>\n                    p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n            return fill({\n              backend,\n              attrs: {shape: outputShape, value: constantValue, dtype: x.dtype}\n            });\n          }\n\n          const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n              new PadPackedProgram(x.shape, paddings, constantValue) :\n              new PadProgram(x.shape, paddings, constantValue);\n          const customValues = [[constantValue]];\n          return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n        };\n\nexport const padV2Config: KernelConfig = {\n  kernelName: PadV2,\n  backendName: 'webgl',\n  kernelFunc: padV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pow} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst POW = `\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n`;\n\nconst POW_PACKED = `\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  ` +\n    CHECK_NAN_SNIPPET + `\n  return result;\n`;\n\nexport const pow =\n    binaryKernelFunc({opSnippet: POW, packedOpSnippet: POW_PACKED});\n\nexport const powConfig: KernelConfig = {\n  kernelName: Pow,\n  backendName: 'webgl',\n  kernelFunc: pow as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, sumOutType, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {prodImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: MathBackendWebGL, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n  const toDispose = [];\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    toDispose.push(permutedX);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('prod', axes, xRank);\n\n  let res;\n  if (backend.shouldExecuteOnCPU([permutedX])) {\n    const xVals = backend.texData.get(permutedX.dataId).values as TypedArray;\n    const {outVals, outShape, outDtype} =\n        prodImplCPU(permutedX.shape, permutedX.dtype, xVals, axes);\n    res = backend.makeTensorInfo(outShape, outDtype, outVals);\n  } else {\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape(\n        {inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n    const outputDType = sumOutType(x.dtype);\n    const reduced = reduce(a2D, outputDType, 'prod', backend);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n\n    toDispose.push(a2D);\n    toDispose.push(reduced);\n  }\n\n  if (keepDims) {\n    toDispose.push(res);\n    const newShape = backend_util.expandShapeToKeepDim(res.shape, origAxes);\n    res = reshape({inputs: {x: res}, backend, attrs: {shape: newShape}});\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return res;\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'webgl',\n  kernelFunc: prod as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Range, RangeAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {rangeImplCPU} from '../kernel_utils/shared';\n\nexport const range =\n    (args: {backend: MathBackendWebGL, attrs: RangeAttrs}): TensorInfo => {\n      const {backend, attrs} = args;\n      const {start, stop, step, dtype} = attrs;\n      const values = rangeImplCPU(start, stop, step, dtype);\n      return backend.makeTensorInfo([values.length], dtype, values);\n    };\n\nexport const rangeConfig: KernelConfig = {\n  kernelName: Range,\n  backendName: 'webgl',\n  kernelFunc: range as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Reciprocal} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst RECIPROCAL = `return 1.0 / x;`;\n\nexport const reciprocal = unaryKernelFunc({opSnippet: RECIPROCAL});\n\nexport const reciprocalConfig: KernelConfig = {\n  kernelName: Reciprocal,\n  backendName: 'webgl',\n  kernelFunc: reciprocal,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Relu} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst RELU = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : x;\n`;\n\nconst RELU_PACKED = `\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const relu =\n    unaryKernelFunc({opSnippet: RELU, packedOpSnippet: RELU_PACKED});\n\nexport const reluConfig: KernelConfig = {\n  kernelName: Relu,\n  backendName: 'webgl',\n  kernelFunc: relu as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Relu6} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst RELU6 = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n`;\n\nconst RELU6_PACKED = `\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const relu6 =\n    unaryKernelFunc({opSnippet: RELU6, packedOpSnippet: RELU6_PACKED});\n\nexport const relu6Config: KernelConfig = {\n  kernelName: Relu6,\n  backendName: 'webgl',\n  kernelFunc: relu6 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC =\n          `(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` +\n          ` - vec2(0.5)`;\n    } else {\n      sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n\n    this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC = `(vec3(yRC) + vec3(0.5)) * ` +\n          `effectiveInputOverOutputRatioRC - vec3(0.5)`;\n    } else {\n      sourceFracIndexRC = `vec3(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n\n    this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\n                                     ${oldWidth}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${depth - 1};\n        bool hasNextRow = coords.z < ${newWidth - 1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, ResizeBilinear, ResizeBilinearAttrs, ResizeBilinearInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeBilinearProgram} from '../resize_bilinear_gpu';\nimport {ResizeBilinearPackedProgram} from '../resize_bilinear_packed_gpu';\n\nexport function resizeBilinear(args: {\n  inputs: ResizeBilinearInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeBilinearAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  const [newHeight, newWidth] = size;\n\n  const program = env().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ?\n      new ResizeBilinearPackedProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters) :\n      new ResizeBilinearProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters);\n  return backend.runWebGLProgram(program, [images], 'float32');\n}\n\nexport const resizeBilinearConfig: KernelConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'webgl',\n  kernelFunc: resizeBilinear as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      dyShape: [number, number, number, number],\n      inputShape: [number, number, number, number], alignCorners: boolean) {\n    this.outputShape = inputShape;\n    const [, xHeight, xWidth, ] = inputShape;\n    const [, yHeight, yWidth] = dyShape;\n\n    // In the backwards pass, we want to find the pixels that were generated for\n    // each pixel in the input image the forward pass and add the corresponding\n    // coefficient from dy to the gradient (with some interpolation).\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n    const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${xHeight - 1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${xWidth - 1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinearGrad, ResizeBilinearGradAttrs, ResizeBilinearGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeBilinearBackpropProgram} from '../resize_bilinear_backprop_gpu';\n\nexport function resizeBilinearGrad(args: {\n  inputs: ResizeBilinearGradInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeBilinearGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  const program = new ResizeBilinearBackpropProgram(\n      dy.shape as [number, number, number, number],\n      images.shape as [number, number, number, number], alignCorners);\n\n  return backend.runWebGLProgram(program, [dy], dy.dtype);\n}\n\nexport const resizeBilinearGradConfig: KernelConfig = {\n  kernelName: ResizeBilinearGrad,\n  backendName: 'webgl',\n  kernelFunc: resizeBilinearGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeighborProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    // When align corners is false, we rounds the value with floor.\n    const roundBase = alignCorners ? '0.5' : '0.0';\n\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC =\n          `max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` +\n          `, vec2(0.0))`;\n    } else {\n      sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n    this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeighborPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    // When align corners is false, we rounds the value with floor.\n    const roundBase = alignCorners ? '0.5' : '0.0';\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC = `max((vec3(yRC) + vec3(0.5)) * ` +\n          `effectiveInputOverOutputRatioRC, vec3(0.0))`;\n    } else {\n      sourceFracIndexRC = `vec3(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n\n    this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\n                                     ${oldWidth}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${depth - 1};\n        bool hasNextRow = coords.z < ${newWidth - 1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, ResizeNearestNeighbor, ResizeNearestNeighborAttrs, ResizeNearestNeighborInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeNearestNeighborProgram} from '../resize_nearest_neighbor_gpu';\nimport {ResizeNearestNeighborPackedProgram} from '../resize_nearest_neighbor_packed_gpu';\n\nexport function resizeNearestNeighbor(args: {\n  inputs: ResizeNearestNeighborInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeNearestNeighborAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  const [newHeight, newWidth] = size;\n\n  const program = env().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ?\n      new ResizeNearestNeighborPackedProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters) :\n      new ResizeNearestNeighborProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters);\n  return backend.runWebGLProgram(program, [images], images.dtype);\n}\n\nexport const resizeNearestNeighborConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: 'webgl',\n  kernelFunc: resizeNearestNeighbor as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeigborBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      dyShape: [number, number, number, number],\n      inputShape: [number, number, number, number], alignCorners: boolean) {\n    this.outputShape = inputShape;\n    const [, xHeight, xWidth, ] = inputShape;\n    const [, yHeight, yWidth] = dyShape;\n\n    // In the backwards pass, we want to find the pixels that were generated for\n    // each pixel in the input image the forward pass and add the corresponding\n    // coefficient from dy to the gradient (with some interpolation).\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n    const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${effectiveXSize[0]}) *\n                (float(dyR) / float(${effectiveYSize[0]}));\n\n            float sourceFracCol =\n                float(${effectiveXSize[1]}) *\n                  (float(dyC) / float(${effectiveYSize[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${xHeight}) - 1),\n                ${alignCorners} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${xWidth}) - 1),\n                ${alignCorners} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighborGrad, ResizeNearestNeighborGradAttrs, ResizeNearestNeighborGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeNearestNeigborBackpropProgram} from '../resize_nearest_neighbor_backprop_gpu';\n\nexport function resizeNearestNeighborGrad(args: {\n  inputs: ResizeNearestNeighborGradInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeNearestNeighborGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  const program = new ResizeNearestNeigborBackpropProgram(\n      dy.shape as [number, number, number, number],\n      images.shape as [number, number, number, number], alignCorners);\n  return backend.runWebGLProgram(program, [dy], dy.dtype);\n}\n\nexport const resizeNearestNeighborGradConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighborGrad,\n  backendName: 'webgl',\n  kernelFunc: resizeNearestNeighborGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ReverseProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(xShape: number[], axis: number[]) {\n    const rank = xShape.length;\n    if (rank > 4) {\n      throw new Error(\n          `WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n    }\n    this.outputShape = xShape;\n\n    if (rank === 1) {\n      this.userCode = `\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${xShape[0]} - coord - 1));\n        }\n      `;\n      return;\n    }\n    const getInCoord = (i: number) => {\n      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n        return `${xShape[i]} - coords[${i}] - 1`;\n      }\n      return `coords[${i}]`;\n    };\n    const inCoords = xShape.map((_, i) => getInCoord(i)).join(',');\n    const type = getCoordsDataType(rank);\n\n    this.userCode = `\n      void main() {\n        ${type} coords = getOutputCoords();\n        setOutput(getX(${inCoords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ReversePackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(xShape: number[], axis: number[]) {\n    const rank = xShape.length;\n    if (rank > 4) {\n      throw new Error(\n          `WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n    }\n    this.outputShape = xShape;\n    const channels = getChannels('rc', rank);\n    const nextColumn =\n        `${channels[rank - 1]} + 1 < ${this.outputShape[rank - 1]}`;\n    const nextRow = `${channels[rank - 2]} + 1 < ${this.outputShape[rank - 2]}`;\n    const type = getCoordsDataType(rank);\n    if (rank === 1) {\n      this.userCode = `\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${xShape[0]} - rc - 1),\n            ${xShape[0]} - rc - 1);\n          if(${nextColumn}){\n              result.g = getChannel(getX(${xShape[0]} - (rc  + 1) - 1),\n                ${xShape[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `;\n    } else {\n      this.userCode = `\n        void main() {\n          ${type} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${getR(channels.slice())};\n          if(${nextColumn}){\n            result.g = ${getG(channels.slice())};\n          }\n          if(${nextRow}) {\n            result.b = ${getB(channels.slice())};\n            if(${nextColumn}) {\n              result.a = ${getA(channels.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `;\n    }\n\n    function getR(channels: string[]): string {\n      return getChannel(channels);\n    }\n\n    function getG(channels: string[]): string {\n      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getB(channels: string[]): string {\n      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getA(channels: string[]): string {\n      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getChannel(channels: string[]): string {\n      const inCoordsArray = xShape.map((_, i) => getInCoord(i, channels));\n      const inCoords = inCoordsArray.join(',');\n      const innerDims = inCoordsArray.slice(-2).join(',');\n      return `getChannel(getX(${inCoords}), vec2(${innerDims}))`;\n    }\n\n    function getInCoord(i: number, channels1: string[]): string {\n      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n        return `${xShape[i]} - ${channels1[i]} - 1`;\n      } else {\n        return `${channels1[i]}`;\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Reverse, ReverseAttrs, ReverseInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ReverseProgram} from '../reverse_gpu';\nimport {ReversePackedProgram} from '../reverse_packed_gpu';\n\nimport {identity} from './Identity';\n\nexport function reverse(args: {\n  inputs: ReverseInputs,\n  backend: MathBackendWebGL,\n  attrs: ReverseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const $dims = util.parseAxisParam(dims, x.shape);\n  if (xRank === 0) {\n    return identity({inputs: {x}, backend});\n  }\n\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n      new ReversePackedProgram(x.shape, $dims) :\n      new ReverseProgram(x.shape, $dims);\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const reverseConfig: KernelConfig = {\n  kernelName: Reverse,\n  backendName: 'webgl',\n  kernelFunc: reverse as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class RotateProgram implements GPGPUProgram {\n  variableNames = ['Image'];\n  outputShape: number[] = [];\n  userCode: string;\n  customUniforms = [{name: 'params', type: 'vec4' as UniformType}];\n  constructor(\n      imageShape: [number, number, number, number],\n      fillValue: number|[number, number, number]) {\n    const imageHeight = imageShape[1];\n    const imageWidth = imageShape[2];\n    this.outputShape = imageShape;\n\n    let fillSnippet = '';\n    if (typeof fillValue === 'number') {\n      fillSnippet = `float outputValue = ${fillValue.toFixed(2)};`;\n    } else {\n      fillSnippet = `\n        vec3 fill = vec3(${fillValue.join(',')});\n        float outputValue = fill[coords[3]];`;\n    }\n\n    this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${fillSnippet}\n          if(coordX >= 0 && coordX < ${imageWidth} && coordY >= 0 && coordY < ${\n        imageHeight}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Tensor4D} from '@tensorflow/tfjs-core';\nimport {RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {RotateProgram} from '../rotate_gpu';\n\nexport const rotateWithOffsetConfig: KernelConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as RotateWithOffsetInputs;\n    const {radians, fillValue, center} = attrs as {} as RotateWithOffsetAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const program = new RotateProgram((image as Tensor4D).shape, fillValue);\n    const [centerX, centerY] =\n        backend_util.getImageCenter(center, image.shape[1], image.shape[2]);\n    const customValues =\n        [[centerX, centerY, Math.sin(radians), Math.cos(radians)]];\n    const output = webglBackend.runWebGLProgram(\n        program, [image], image.dtype, customValues);\n    return output;\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Round} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst ROUND = `\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n`;\n\nexport const round = unaryKernelFunc({opSnippet: ROUND});\n\nexport const roundConfig: KernelConfig = {\n  kernelName: Round,\n  backendName: 'webgl',\n  kernelFunc: round,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Rsqrt} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {rsqrtImplCPU} from '../kernel_utils/shared';\n\nconst RSQRT = `return inversesqrt(x);`;\n\nexport const rsqrt =\n    unaryKernelFunc({opSnippet: RSQRT, cpuKernelImpl: rsqrtImplCPU});\n\nexport const rsqrtConfig: KernelConfig = {\n  kernelName: Rsqrt,\n  backendName: 'webgl',\n  kernelFunc: rsqrt as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ScatterProgram implements GPGPUProgram {\n  variableNames = ['updates', 'indices', 'defaultValue'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      updateSize: number, sliceDim: number, indicesRank: number,\n      updatesRank: number, strides: number[], shape: number[],\n      summingDupeIndex = true) {\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    let indicesString = '';\n    if (indicesRank === 1) {\n      indicesString = 'i';\n    } else if (indicesRank === 2) {\n      indicesString = 'i, j';\n    }\n    const indicesSnippet = `getIndices(${indicesString})`;\n\n    let updatesString = '';\n    if (updatesRank === 1) {\n      updatesString = 'i';\n    } else if (updatesRank === 2) {\n      updatesString = 'i, coords[1]';\n    }\n    const updatesSnippet = `getUpdates(${updatesString})`;\n\n    const strideString = sliceDim > 1 ? 'strides[j]' : 'strides';\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${strides});\n\n        void main() {\n          ${dtype} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${updateSize}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${sliceDim}; j++) {\n              int index = round(${indicesSnippet});\n              flattenedIndex += index * ${strideString};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${updatesSnippet};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ScatterNd, ScatterNdAttrs, ScatterNdInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ScatterProgram} from '../scatter_gpu';\nimport {reshape} from './Reshape';\n\nexport function scatterNd(args: {\n  inputs: ScatterNdInputs,\n  backend: MathBackendWebGL,\n  attrs: ScatterNdAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices, updates} = inputs;\n  const {shape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, shape);\n\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  if (outputSize === 0) {\n    return backend.makeTensorInfo(shape, indices.dtype);\n  }\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numUpdates, sliceRank]}});\n  const flattenX = reshape(\n      {inputs: {x: updates}, backend, attrs: {shape: [numUpdates, sliceSize]}});\n\n  const defaultValue = backend.makeTensorInfo(\n      [], 'float32', new Float32Array([0]));  // scalar(0)\n  const program = new ScatterProgram(\n      numUpdates, sliceRank, flattenIndices.shape.length, flattenX.shape.length,\n      strides, flattenShape);\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndices, defaultValue], flattenX.dtype);\n\n  const reshaped = reshape({inputs: {x: res}, backend, attrs: {shape}});\n\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(res);\n  backend.disposeIntermediateTensorInfo(defaultValue);\n\n  return reshaped;\n}\n\nexport const scatterNdConfig: KernelConfig = {\n  kernelName: ScatterNd,\n  backendName: 'webgl',\n  kernelFunc: scatterNd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class SearchSortedProgram implements GPGPUProgram {\n  variableNames = ['sortedSequence', 'values'];\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'numInputs', type: 'int' as UniformType}];\n\n  constructor(\n      batchSize: number, numInputs: number, numValues: number,\n      side: 'left'|'right') {\n    this.outputShape = [batchSize, numValues];\n\n    const webGL2LoopHead = 'while (left < right) {';\n    // WebGL1 doesn't accept non constant loop conditions, so upper bound loop\n    // iterations.\n    const webGL1LoopHead = `for (int i = 0; i < ${\n        Math.ceil(Math.log2(numInputs + 1))}; ++i) { if (left >= right) break;`;\n    const loopHead = env().getNumber('WEBGL_VERSION') === 2 ? webGL2LoopHead :\n                                                              webGL1LoopHead;\n\n    // left corresponds to lower bound and right to upper bound.\n    const boundComparator = side === 'left' ? '<' : '<=';\n    this.userCode = `\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${loopHead}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${boundComparator} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SearchSorted, SearchSortedAttrs, SearchSortedInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {SearchSortedProgram} from '../search_sorted_gpu';\n\nexport function searchSorted(args: {\n  inputs: SearchSortedInputs,\n  backend: MathBackendWebGL,\n  attrs: SearchSortedAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sortedSequence, values} = inputs;\n  const {side} = attrs;\n\n  const program = new SearchSortedProgram(\n      sortedSequence.shape[0], sortedSequence.shape[1], values.shape[1], side);\n  const customValues = [[sortedSequence.shape[1]]];\n  return backend.runWebGLProgram(\n      program, [sortedSequence, values], 'int32', customValues);\n}\n\nexport const searchSortedConfig: KernelConfig = {\n  kernelName: SearchSorted,\n  backendName: 'webgl',\n  kernelFunc: searchSorted as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class SelectProgram implements GPGPUProgram {\n  variableNames = ['c', 'a', 'b'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(cRank: number, shape: number[], rank: number) {\n    this.outputShape = shape;\n\n    let cCoords;\n    let abCoords;\n    if (rank > 4) {\n      throw Error(`Where for rank ${rank} is not yet supported`);\n    }\n\n    if (rank === 1) {\n      abCoords = `resRC`;\n      cCoords = `resRC`;\n    } else {\n      const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n      const cCoordVars = [];\n      const abCoordVars = [];\n      for (let i = 0; i < shape.length; i++) {\n        abCoordVars.push(`${currentCoords[i]}`);\n        if (i < cRank) {\n          cCoordVars.push(`${currentCoords[i]}`);\n        }\n      }\n      cCoords = cCoordVars.join();\n      abCoords = abCoordVars.join();\n    }\n\n    const dtype = getCoordsDataType(rank);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        float cVal = getC(${cCoords});\n        if (cVal >= 1.0) {\n          setOutput(getA(${abCoords}));\n        } else {\n          setOutput(getB(${abCoords}));\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Select, SelectInputs, TensorInfo, upcastType} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {SelectProgram} from '../select_gpu';\n\nexport function select(args: {inputs: SelectInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {condition, t, e} = inputs;\n\n  const program =\n      new SelectProgram(condition.shape.length, t.shape, t.shape.length);\n  return backend.runWebGLProgram(\n      program, [condition, t, e], upcastType(t.dtype, e.dtype));\n}\n\nexport const selectConfig: KernelConfig = {\n  kernelName: Select,\n  backendName: 'webgl',\n  kernelFunc: select as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Selu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SELU = `\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${backend_util.SELU_SCALEALPHA};\n  float scale = ${backend_util.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`;\n\nexport const selu = unaryKernelFunc({opSnippet: SELU});\n\nexport const seluConfig: KernelConfig = {\n  kernelName: Selu,\n  backendName: 'webgl',\n  kernelFunc: selu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sigmoid} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {sigmoidImplCPU} from '../kernel_utils/shared';\n\nconst SIGMOID = CHECK_NAN_SNIPPET_UNARY + `\n  return 1.0 / (1.0 + exp(-1.0 * x));\n`;\n\nconst SIGMOID_PACKED = `\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\nexport const sigmoid = unaryKernelFunc({\n  opSnippet: SIGMOID,\n  packedOpSnippet: SIGMOID_PACKED,\n  cpuKernelImpl: sigmoidImplCPU\n});\n\nexport const sigmoidConfig: KernelConfig = {\n  kernelName: Sigmoid,\n  backendName: 'webgl',\n  kernelFunc: sigmoid,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sign} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\n// Sign does not propagate NANs.\nconst SIGN = `\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n`;\n\nexport const sign = unaryKernelFunc({opSnippet: SIGN});\n\nexport const signConfig: KernelConfig = {\n  kernelName: Sign,\n  backendName: 'webgl',\n  kernelFunc: sign,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sin} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SIN = CHECK_NAN_SNIPPET_UNARY + `\n  return sin(x);\n`;\n\nexport const sin = unaryKernelFunc({opSnippet: SIN});\n\nexport const sinConfig: KernelConfig = {\n  kernelName: Sin,\n  backendName: 'webgl',\n  kernelFunc: sin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sinh} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SINH = `\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n`;\n\nexport const sinh = unaryKernelFunc({opSnippet: SINH});\n\nexport const sinhConfig: KernelConfig = {\n  kernelName: Sinh,\n  backendName: 'webgl',\n  kernelFunc: sinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Softplus} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SOFTPLUS = `\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n`;\n\nexport const softplus = unaryKernelFunc({opSnippet: SOFTPLUS});\n\nexport const softplusConfig: KernelConfig = {\n  kernelName: Softplus,\n  backendName: 'webgl',\n  kernelFunc: softplus,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SpaceToBatchND, SpaceToBatchNDAttrs, SpaceToBatchNDInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {padV2} from './PadV2';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport const spaceToBatchND = (args: {\n  inputs: SpaceToBatchNDInputs,\n  backend: MathBackendWebGL,\n  attrs: SpaceToBatchNDAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, paddings} = attrs;\n\n  util.assert(\n      x.shape.length <= 4,\n      () => 'spaceToBatchND for rank > 4 with a WebGL backend not ' +\n          'implemented yet');\n\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const completePaddings: Array<[number, number]> = [[0, 0]];\n  completePaddings.push(...paddings as Array<[number, number]>);\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  const toDispose = [];\n\n  const paddedX = padV2({\n    inputs: {x},\n    backend,\n    attrs: {paddings: completePaddings, constantValue: 0}\n  });\n\n  const reshapedPaddedShape =\n      backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n      reshapedPaddedShape.length, blockShape.length, false);\n\n  const flattenShape =\n      backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n\n  const reshapedPaddedX = reshape(\n      {inputs: {x: paddedX}, backend, attrs: {shape: reshapedPaddedShape}});\n\n  const paddedXT = transpose({\n    inputs: {x: reshapedPaddedX},\n    backend,\n    attrs: {perm: permutedReshapedPaddedPermutation}\n  });\n\n  const result =\n      reshape({inputs: {x: paddedXT}, backend, attrs: {shape: flattenShape}});\n\n  toDispose.push(paddedX);\n  toDispose.push(reshapedPaddedX);\n  toDispose.push(paddedXT);\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n};\n\nexport const spaceToBatchNDConfig: KernelConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'webgl',\n  kernelFunc: spaceToBatchND as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseFillEmptyRows, SparseFillEmptyRowsInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseFillEmptyRowsImplCPU} from '../kernel_utils/shared';\n\nexport function sparseFillEmptyRows(args: {\n  inputs: SparseFillEmptyRowsInputs,\n  backend: MathBackendWebGL\n}): [TensorInfo, TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {indices, values, denseShape, defaultValue} = inputs;\n  if (denseShape.shape.length !== 1) {\n    throw new Error(`Dense shape must be a vector, saw:\n         ${denseShape.shape}`);\n  }\n  if (indices.shape.length !== 2) {\n    throw new Error(`Indices must be a matrix, saw:\n         ${indices.shape}`);\n  }\n  if (values.shape.length !== 1) {\n    throw new Error(`Values must be a vector, saw:\n         ${values.shape}`);\n  }\n  if (defaultValue.shape.length !== 0) {\n    throw new Error(`Default value must be a scalar, saw:\n        ${defaultValue.shape}`);\n  }\n\n  const $indices = backend.readSync(indices.dataId) as TypedArray;\n  const $values = backend.readSync(values.dataId) as TypedArray;\n  const $denseShape = backend.readSync(denseShape.dataId) as TypedArray;\n  const $defaultValue =\n      backend.readSync(defaultValue.dataId)[0] as number;\n\n  const [outputIndices, outputIndicesShape, outputValues,\n         emptyRowIndicator, reverseIndexMap] =\n      sparseFillEmptyRowsImplCPU(\n          $indices, indices.shape, indices.dtype, $values, values.dtype,\n          $denseShape, $defaultValue);\n  return [\n    backend.makeTensorInfo(outputIndicesShape, indices.dtype, outputIndices),\n    backend.makeTensorInfo(\n        [outputIndicesShape[0]], values.dtype, outputValues),\n    backend.makeTensorInfo(\n        [emptyRowIndicator.length], 'bool',\n        new Uint8Array(\n            emptyRowIndicator.map((value: boolean) => Number(value)))),\n    backend.makeTensorInfo(\n        [reverseIndexMap.length], indices.dtype,\n        new Int32Array(reverseIndexMap)),\n  ];\n}\n\nexport const sparseFillEmptyRowsConfig: KernelConfig = {\n  kernelName: SparseFillEmptyRows,\n  backendName: 'webgl',\n  kernelFunc: sparseFillEmptyRows as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseReshape, SparseReshapeInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseReshapeImplCPU} from '../kernel_utils/shared';\n\nexport function sparseReshape(\n    args: {inputs: SparseReshapeInputs, backend: MathBackendWebGL}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {inputIndices, inputShape, newShape} = inputs;\n  if (inputIndices.shape.length !== 2) {\n    throw new Error(`Input indices should be a matrix but received shape ${\n        inputIndices.shape}`);\n  }\n  if (inputShape.shape.length !== 1) {\n    throw new Error(`Input shape should be a vector but received shape ${\n        inputShape.shape}`);\n  }\n\n  if (newShape.shape.length !== 1) {\n    throw new Error(\n        `Target shape should be a vector but received shape ${newShape.shape}`);\n  }\n\n  const $inputShape =\n      Array.from(backend.readSync(inputShape.dataId) as TypedArray);\n  const $inputIndices = backend.readSync(inputIndices.dataId) as TypedArray;\n  const targetShape =\n      Array.from(backend.readSync(newShape.dataId) as TypedArray);\n\n  const [newIndices, indicesShape, outputShape] = sparseReshapeImplCPU(\n      $inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape,\n      targetShape);\n  return [\n    backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices),\n    backend.makeTensorInfo(\n        [outputShape.length], newShape.dtype, new Int32Array(outputShape)),\n  ];\n}\n\nexport const sparseReshapeConfig: KernelConfig = {\n  kernelName: SparseReshape,\n  backendName: 'webgl',\n  kernelFunc: sparseReshape,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseSegmentMean, SparseSegmentMeanInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseSegmentReductionImplCPU} from '../kernel_utils/shared';\n\nexport function sparseSegmentMean(\n    args: {inputs: SparseSegmentMeanInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n              ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n              ${segmentIds.shape}`);\n  }\n\n  const $data = backend.readSync(data.dataId) as TypedArray;\n  const $indices = backend.readSync(indices.dataId) as TypedArray;\n  const $segmentIds = backend.readSync(segmentIds.dataId) as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImplCPU(\n      $data, data.shape, data.dtype, $indices, $segmentIds, true);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentMeanConfig: KernelConfig = {\n  kernelName: SparseSegmentMean,\n  backendName: 'webgl',\n  kernelFunc: sparseSegmentMean as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseSegmentSum, SparseSegmentSumInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseSegmentReductionImplCPU} from '../kernel_utils/shared';\n\nexport function sparseSegmentSum(\n    args: {inputs: SparseSegmentSumInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n             ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n             ${segmentIds.shape}`);\n  }\n\n  const $data = backend.readSync(data.dataId) as TypedArray;\n  const $indices = backend.readSync(indices.dataId) as TypedArray;\n  const $segmentIds = backend.readSync(segmentIds.dataId) as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImplCPU(\n      $data, data.shape, data.dtype, $indices, $segmentIds);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentSumConfig: KernelConfig = {\n  kernelName: SparseSegmentSum,\n  backendName: 'webgl',\n  kernelFunc: sparseSegmentSum as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Rank, SparseToDense, SparseToDenseAttrs, SparseToDenseInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {scatterImplCPU} from '../kernel_utils/shared';\nimport {ScatterProgram} from '../scatter_gpu';\n\nimport {reshape} from './Reshape';\n\nexport function sparseToDense(args: {\n  inputs: SparseToDenseInputs,\n  backend: MathBackendWebGL,\n  attrs: SparseToDenseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sparseIndices, sparseValues, defaultValue} = inputs;\n  const {outputShape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n  const sumDupeIndices = false;\n\n  if (sparseValues.dtype === 'string') {\n    const indicesBuf = backend.bufferSync<Rank, 'int32'>(sparseIndices);\n    const updatesBuf = backend.bufferSync<Rank, 'string'>(sparseValues);\n    const $defaultValue = util.decodeString(\n        backend.readSync(defaultValue.dataId)[0] as Uint8Array);\n    const outBuf = scatterImplCPU(\n        indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates,\n        sliceRank, strides, $defaultValue, sumDupeIndices);\n    return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n  }\n  const program = new ScatterProgram(\n      numUpdates, sliceRank, sparseIndices.shape.length,\n      sparseValues.shape.length, strides, [outputSize, 1], sumDupeIndices);\n\n  const res = backend.runWebGLProgram(\n      program, [sparseValues, sparseIndices, defaultValue], sparseValues.dtype);\n\n  const reshaped =\n      reshape({inputs: {x: res}, backend, attrs: {shape: outputShape}});\n\n  backend.disposeIntermediateTensorInfo(res);\n  return reshaped;\n}\n\nexport const sparseToDenseConfig: KernelConfig = {\n  kernelName: SparseToDense,\n  backendName: 'webgl',\n  kernelFunc: sparseToDense as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SplitV, SplitVAttrs, SplitVInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {slice} from './Slice';\n\nexport function splitV(\n    args:\n        {inputs: SplitVInputs, backend: MathBackendWebGL, attrs: SplitVAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {numOrSizeSplits, axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, x.shape)[0];\n  const splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n\n  const xRank = x.shape.length;\n  const begin = new Array(xRank).fill(0);\n  const size = x.shape.slice();\n\n  return splitSizes.map(s => {\n    const sliceSize = [...size];\n    sliceSize[$axis] = s;\n    const sliceT =\n        slice({inputs: {x}, backend, attrs: {begin, size: sliceSize}});\n    begin[$axis] += s;\n    return sliceT;\n  });\n}\n\nexport const splitVConfig: KernelConfig = {\n  kernelName: SplitV,\n  backendName: 'webgl',\n  kernelFunc: splitV as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Sqrt} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {sqrtImplCPU} from '../kernel_utils/shared';\n\nconst SQRT = `return sqrt(x);`;\n\nexport const sqrt = unaryKernelFunc(\n    {opSnippet: SQRT, packedOpSnippet: SQRT, cpuKernelImpl: sqrtImplCPU});\n\nexport const sqrtConfig: KernelConfig = {\n  kernelName: Sqrt,\n  backendName: 'webgl',\n  kernelFunc: sqrt as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Square} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SQUARE = `return x * x;`;\n\nexport const square = unaryKernelFunc({opSnippet: SQUARE});\n\nexport const squareConfig: KernelConfig = {\n  kernelName: Square,\n  backendName: 'webgl',\n  kernelFunc: square,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SquaredDifference} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\n\nexport const squaredDifference = binaryKernelFunc(\n    {opSnippet: SQUARED_DIFFERENCE, packedOpSnippet: SQUARED_DIFFERENCE});\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'webgl',\n  kernelFunc: squaredDifference,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Step, StepAttrs, TensorInfo, UnaryInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CHECK_NAN_SNIPPET, UnaryOpProgram} from '../unaryop_gpu';\n\nexport function step(\n    {inputs, attrs, backend}:\n        {inputs: UnaryInputs, attrs: StepAttrs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {x} = inputs;\n  const opSnippet = CHECK_NAN_SNIPPET + `\n    return x > 0.0 ? 1.0 : float(${attrs.alpha});\n  `;\n\n  const program = new UnaryOpProgram(x.shape, opSnippet);\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const stepConfig: KernelConfig = {\n  kernelName: Step,\n  backendName: 'webgl',\n  kernelFunc: step as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class StridedSliceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(begin: number[], strides: number[], size: number[]) {\n    this.outputShape = size;\n    const rank = size.length;\n    const inputDtype = getCoordsDataType(size.length);\n    const dtype = getCoordsDataType(size.length);\n\n    let newCoords = '';\n    if (rank === 1) {\n      newCoords = 'coords * strides + begin';\n    } else {\n      let outputAxis = 0;\n      newCoords =\n          size.map((_, i) => {\n                outputAxis++;\n                return size.length === 1 ?\n                    `coords * strides[${i}] + begin[${i}]` :\n                    `coords[${outputAxis - 1}] * strides[${i}] + begin[${i}]`;\n              })\n              .join(',');\n    }\n\n    this.userCode = `\n      ${inputDtype} begin = ${inputDtype}(${begin});\n      ${inputDtype} strides = ${inputDtype}(${strides});\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        setOutput(getX(${newCoords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, KernelConfig, KernelFunc, Rank, slice_util, StridedSlice, StridedSliceAttrs, StridedSliceInputs, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stridedSliceImplCPU} from '../kernel_utils/shared';\nimport {StridedSliceProgram} from '../strided_slice_gpu';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function stridedSlice(args: {\n  inputs: StridedSliceInputs,\n  backend: MathBackendWebGL,\n  attrs: StridedSliceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  } = attrs;\n\n  const {\n    finalShapeSparse,\n    finalShape,\n    isIdentity,\n    sliceDim0,\n    isSimpleSlice,\n    begin: $begin,\n    end: $end,\n    strides: $strides\n  } =\n      slice_util.sliceInfo(\n          x.shape, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask);\n\n  let result;\n\n  if (isIdentity) {\n    // Optimization #1, slice is a no-op plus reshape\n    result = reshape({inputs: {x}, backend, attrs: {shape: finalShape}});\n  } else if (sliceDim0 || isSimpleSlice) {\n    // Optimization #2, slice is memory contiguous (only occurs in dim 0)\n    util.assert(\n        x.shape.length >= 1,\n        () => `Input must have rank at least 1, got: ${x.shape.length}`);\n\n    const size = slice_util.computeOutShape($begin, $end, $strides);\n    // To tolerate begin[0] > end[0] (a 0-output slice), we min(begin, end).\n    const sliced = slice({inputs: {x}, backend, attrs: {begin: $begin, size}});\n    result =\n        reshape({inputs: {x: sliced}, backend, attrs: {shape: finalShape}});\n    backend.disposeIntermediateTensorInfo(sliced);\n  } else {\n    const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);\n    if (shouldExecuteOnCPU) {\n      // tslint:disable-next-line: no-unnecessary-type-assertion\n      const values = backend.readSync(x.dataId) as TypedArray;\n      // tslint:disable-next-line: no-unnecessary-type-assertion\n      const xBuf = buffer(x.shape, x.dtype, values) as TensorBuffer<Rank>;\n      const resultValues =\n          stridedSliceImplCPU(finalShapeSparse, xBuf, $strides, $begin);\n      result = backend.makeTensorInfo(finalShape, x.dtype, resultValues.values);\n    } else {\n      const program =\n          new StridedSliceProgram($begin, $strides, finalShapeSparse);\n      result = backend.runWebGLProgram(program, [x], x.dtype);\n    }\n  }\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: finalShape}});\n\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const stridedSliceConfig: KernelConfig = {\n  kernelName: StridedSlice,\n  backendName: 'webgl',\n  kernelFunc: stridedSlice as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringNGrams, StringNGramsAttrs, StringNGramsInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stringNGramsImplCPU} from '../kernel_utils/shared';\n\nexport function stringNGrams(args: {\n  inputs: StringNGramsInputs,\n  backend: MathBackendWebGL,\n  attrs: StringNGramsAttrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences\n  } = attrs;\n  const {data, dataSplits} = inputs;\n  const $data = backend.readSync(data.dataId) as Uint8Array[];\n  const $dataSplits = backend.readSync(dataSplits.dataId) as Int32Array;\n\n  const [nGrams, nGramsSplits] = stringNGramsImplCPU(\n      $data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth,\n      preserveShortSequences);\n  return [\n    backend.makeTensorInfo([nGrams.length], 'string', nGrams),\n    backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits),\n  ];\n}\n\nexport const stringNGramsConfig: KernelConfig = {\n  kernelName: StringNGrams,\n  backendName: 'webgl',\n  kernelFunc: stringNGrams as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringSplit, StringSplitAttrs, StringSplitInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stringSplitImplCPU} from '../kernel_utils/shared';\n\nexport function stringSplit(args: {\n  inputs: StringSplitInputs,\n  backend: MathBackendWebGL,\n  attrs: StringSplitAttrs\n}): [TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {skipEmpty} = attrs;\n  const {input, delimiter} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (input.shape.length !== 1) {\n    throw new Error(`Input must be a vector, got shape: ${input.shape}`);\n  }\n  if (delimiter.shape.length !== 0) {\n    throw new Error(\n        `Delimiter must be a scalar, got shape: ${delimiter.shape}`);\n  }\n\n  const $input = backend.readSync(input.dataId) as Uint8Array[];\n  const $delimiter = backend.readSync(delimiter.dataId)[0] as Uint8Array;\n\n  const [indices, values, shape] =\n      stringSplitImplCPU($input, $delimiter, skipEmpty);\n  const outputSize = values.length;\n  return [\n    backend.makeTensorInfo([outputSize, 2], 'int32', indices),\n    backend.makeTensorInfo([outputSize], 'string', values),\n    backend.makeTensorInfo([2], 'int32', new Int32Array(shape))\n  ];\n}\n\nexport const stringSplitConfig: KernelConfig = {\n  kernelName: StringSplit,\n  backendName: 'webgl',\n  kernelFunc: stringSplit as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringToHashBucketFast, StringToHashBucketFastAttrs, StringToHashBucketFastInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stringToHashBucketFastImplCPU} from '../kernel_utils/shared';\n\nexport function stringToHashBucketFast(args: {\n  inputs: StringToHashBucketFastInputs,\n  backend: MathBackendWebGL,\n  attrs: StringToHashBucketFastAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {numBuckets} = attrs;\n  const {input} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (numBuckets <= 0) {\n    throw new Error(`Number of buckets must be at least 1`);\n  }\n\n  const $input = backend.readSync(input.dataId) as Uint8Array[];\n\n  const output = stringToHashBucketFastImplCPU($input, numBuckets);\n  return backend.makeTensorInfo(input.shape, 'int32', output);\n}\n\nexport const stringToHashBucketFastConfig: KernelConfig = {\n  kernelName: StringToHashBucketFast,\n  backendName: 'webgl',\n  kernelFunc: stringToHashBucketFast as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tan} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst TAN = `return tan(x);`;\n\nexport const tan = unaryKernelFunc({opSnippet: TAN});\n\nexport const tanConfig: KernelConfig = {\n  kernelName: Tan,\n  backendName: 'webgl',\n  kernelFunc: tan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tanh} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst TANH = `\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n`;\n\nexport const tanh = unaryKernelFunc({opSnippet: TANH});\n\nexport const tanhConfig: KernelConfig = {\n  kernelName: Tanh,\n  backendName: 'webgl',\n  kernelFunc: tanh,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TileProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], reps: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[i] * reps[i];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n  }\n}\n\nfunction getSourceCoords(aShape: number[]): string {\n  const rank = aShape.length;\n  if (rank > 5) {\n    throw Error(`Tile for rank ${rank} is not yet supported`);\n  }\n  if (rank === 1) {\n    return `imod(resRC, ${aShape[0]})`;\n  }\n\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u'];\n\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    sourceCoords.push(`imod(${currentCoords[i]}, ${aShape[i]})`);\n  }\n  return sourceCoords.join();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, KernelConfig, KernelFunc, TensorInfo, Tile, TileAttrs, TileInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {tileImplCPU} from '../kernel_utils/shared';\nimport {TileProgram} from '../tile_gpu';\n\nexport function tile(\n    params: {inputs: TileInputs, backend: MathBackendWebGL, attrs: TileAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = params;\n  const {x} = inputs;\n  const {reps} = attrs;\n\n  // tile gpu program cannot handle rank > 5 case.\n  if (x.dtype === 'string' || x.shape.length > 5) {\n    // Even thought string tensor is always on CPU, just to be consistent on how\n    // to access tensor data.\n    const data = backend.readSync(x.dataId);\n    const value = x.dtype === 'string' ?\n        (data as Uint8Array[]).map(d => util.decodeString(d)) :\n        data as TypedArray;\n    const buf = buffer(x.shape, x.dtype, value);\n    const outBuf = tileImplCPU(buf, reps);\n    return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n  }\n\n  const program = new TileProgram(x.shape, reps);\n  const output = backend.runWebGLProgram(program, [x], x.dtype);\n\n  return output;\n}\n\nexport const tileConfig: KernelConfig = {\n  kernelName: Tile,\n  backendName: 'webgl',\n  kernelFunc: tile as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\n// Based on Algorithm 2 of Bitonic Top K, ref:\n// https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf\n// The original algorithm is based on computing the top K only, however\n// since for TFJS we require the indices of the top K values as well then the\n// algorithm found here is a bit modified. Rather than producing the values\n// at each step, the indices containing the top K are generated instead.\n// The output values are not generated to reduce the number of outputs in the\n// GPU, the values can easily be retrieved from the indices using a gather\n// op.\nexport class SwapProgram implements GPGPUProgram {\n  variableNames = ['x', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  // |n| Size of the original input of TopK.\n  // |firstPass|indicates if this is the first time swap is being used which\n  // means no indices input containing the top K is present yet.\n  // |inc| Swaps pairs of indices (0, inc), (1, inc + 1), (2, inc + 2) ...\n  customUniforms = [\n    {name: 'n', type: 'int' as UniformType},\n    {name: 'firstPass', type: 'int' as UniformType},\n    {name: 'negativeInf', type: 'float' as UniformType},\n    {name: 'dir', type: 'int' as UniformType},\n    {name: 'inc', type: 'int' as UniformType}\n  ];\n\n  /**\n   * @param shape desired output shape (can be larger than input shape, output\n   *                                    will be padded with -Infinity)\n   */\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n\n    this.userCode = `\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     `;\n  }\n}\n\nexport class MergeProgram implements GPGPUProgram {\n  variableNames = ['x', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  // |n| Size of the original input of TopK\n  // |firstPass| indicates if this is the first time swap is being used which\n  // means no indices input containing the top K is present yet.\n  // |k| Top k elements desired\n  customUniforms = [\n    {name: 'n', type: 'int' as UniformType},\n    {name: 'firstPass', type: 'int' as UniformType},\n    {name: 'k', type: 'int' as UniformType}\n  ];\n\n  /**\n   * @param shape desired output shape (must be half of the input size)\n   */\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n\n    this.userCode = `\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, NumericDataType, TensorInfo, TopK, TopKAttrs, TopKInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {topKImplCPU} from '../kernel_utils/shared';\nimport {MergeProgram, SwapProgram} from '../top_k_gpu';\nimport {fill} from './Fill';\nimport {gatherV2} from './GatherV2';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nfunction disposeIntermediateTensorInfoOrNull(\n    backend: MathBackendWebGL, tensorInfo: TensorInfo) {\n  if (tensorInfo !== null) {\n    backend.disposeIntermediateTensorInfo(tensorInfo);\n  }\n}\n\nfunction roundUpToPow2(num: number) {\n  let pow2 = 1;\n  while (pow2 < num) {\n    pow2 *= 2;\n  }\n  return pow2;\n}\n\n// Based on Algorithm 2 of Bitonic Top K, ref:\n// https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf\nexport function topK(\n    args: {inputs: TopKInputs, backend: MathBackendWebGL, attrs: TopKAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {k, sorted} = attrs;\n\n  // Empirically determined constant used to determine last dim threshold for\n  // handing off execution to the CPU.\n  const TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD =\n      env().getNumber('TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD');\n\n  // Empirically determined constant used to determine k threshold for handing\n  // off execution to the CPU.\n  const TOPK_K_CPU_HANDOFF_THRESHOLD =\n      env().getNumber('TOPK_K_CPU_HANDOFF_THRESHOLD');\n\n  const xShape = x.shape;\n  const lastDim = xShape[xShape.length - 1];\n\n  if (backend.shouldExecuteOnCPU([x]) ||\n      lastDim < TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD ||\n      k > TOPK_K_CPU_HANDOFF_THRESHOLD) {\n    const xVals = backend.readSync(x.dataId) as TypedArray;\n    const [allTopKVals, allTopKIndices] =\n        topKImplCPU(xVals, xShape, x.dtype as NumericDataType, k, sorted);\n\n    return [\n      backend.makeTensorInfo(\n          allTopKVals.shape, allTopKVals.dtype, allTopKVals.values),\n      backend.makeTensorInfo(\n          allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)\n    ];\n  }\n\n  if (k === 0) {\n    xShape[xShape.length - 1] = 0;\n    return [\n      backend.makeTensorInfo(xShape, x.dtype, []),\n      backend.makeTensorInfo(xShape, 'int32', [])\n    ];\n  }\n\n  if (lastDim === 1 /* firstPass */) {\n    return [\n      x, fill({attrs: {shape: xShape, dtype: 'int32', value: 0}, backend})\n    ];\n  }\n\n  // Eagerly unpack x input since it is passed in to all the shaders which\n  // require unpacked inputs.\n  const xtexData = backend.texData.get(x.dataId);\n  const xIsPacked = xtexData !== null && xtexData.isPacked;\n  const xUnPacked = xIsPacked ? backend.unpackTensor(x) : x;\n\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const xSize = util.sizeFromShape(xShape);\n  const batch = xSize / lastDim;\n  const x2D = reshape(\n      {inputs: {x: xUnPacked}, attrs: {shape: [batch, lastDim]}, backend});\n\n  if (xIsPacked) {\n    disposeIntermediateTensorInfoOrNull(backend, xUnPacked);\n  }\n\n  const kPow2 = roundUpToPow2(k);\n  const lastDimPow2 = roundUpToPow2(lastDim);\n\n  // Only the indices containing the top K are kept at every step to reduce\n  // number of outputs in the GPU algorithms, so once the final set of indices\n  // is computed then gather is used to grab the corresponding values\n  // from the original input.\n  let indices: TensorInfo = null;\n\n  // GPU algorithm always takes in an indices input but this input is not used\n  // on the first run of a GPU algorithm, therefore if indices is null we simply\n  // pass in x2D instead of it but the value will not actually be used\n  const getInputs = () => indices === null ? [x2D, x2D] : [x2D, indices];\n\n  const runSwap = (dir: number, inc: number, shape: number[]) => {\n    const inputs = getInputs();\n    const program = new SwapProgram(shape);\n    const fistPass = indices === null ? 1 : 0;\n    const customValues =\n        [[lastDim], [fistPass], [Number.NEGATIVE_INFINITY], [dir], [inc]];\n    const prevIndices = indices;\n    indices = backend.runWebGLProgram(program, inputs, 'int32', customValues);\n    disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n  };\n\n  // Step 1: local sort\n  for (let len = 1; len < kPow2; len *= 2) {\n    const dir = len * 2;\n    for (let inc = len; inc >= 1; inc /= 2) {\n      runSwap(dir, inc, [batch, lastDimPow2]);\n    }\n  }\n\n  // Step 2: merge\n  for (let indicesSize = lastDimPow2; indicesSize > kPow2; indicesSize /= 2) {\n    const inputs = getInputs();\n    const mergeProgram = new MergeProgram([batch, indicesSize / 2]);\n    const firstPass = indices === null ? 1 : 0;\n    const customValues = [[lastDim], [firstPass], [kPow2]];\n    const prevIndices = indices;\n    indices =\n        backend.runWebGLProgram(mergeProgram, inputs, 'int32', customValues);\n    disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n\n    // Step 3: rebuild\n    const len = kPow2 / 2;\n    const dir = len * 2;\n    for (let inc = len; inc >= 1; inc /= 2) {\n      runSwap(dir, inc, indices.shape);\n    }\n  }\n\n  // Keep only the requested top K results instead of kPow2\n  let prevIndices = indices;\n  indices = slice(\n      {inputs: {x: indices}, backend, attrs: {begin: 0, size: [batch, k]}});\n  disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n\n  // Gather values on last dimension\n  let values = gatherV2(\n      {inputs: {x: x2D, indices}, backend, attrs: {axis: 1, batchDims: 1}});\n  disposeIntermediateTensorInfoOrNull(backend, x2D);\n\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const newShape = xShape.slice(0, -1);\n  newShape.push(k);\n\n  prevIndices = indices;\n  indices = reshape({inputs: {x: indices}, attrs: {shape: newShape}, backend});\n  disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n\n  const prevValues = values;\n  values = reshape({inputs: {x: values}, attrs: {shape: newShape}, backend});\n  disposeIntermediateTensorInfoOrNull(backend, prevValues);\n\n  return [values, indices];\n}\n\nexport const topKConfig: KernelConfig = {\n  kernelName: TopK,\n  backendName: 'webgl',\n  kernelFunc: topK as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class TransformProgram implements GPGPUProgram {\n  variableNames = ['Image', 'Transforms'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      imageHeight: number, imageWidth: number,\n      interpolation: 'nearest'|'bilinear',\n      fillMode: 'constant'|'reflect'|'wrap'|'nearest', fillValue: number,\n      outShape: [number, number, number, number]) {\n    this.outputShape = outShape;\n    const interpolationModeId = interpolation === 'nearest' ? 1 : 2;\n    let fillModeId;\n    switch (fillMode) {\n      case 'constant':\n        fillModeId = 1;\n        break;\n      case 'reflect':\n        fillModeId = 2;\n        break;\n      case 'wrap':\n        fillModeId = 3;\n        break;\n      case 'nearest':\n        fillModeId = 4;\n        break;\n      default:\n        fillModeId = 1;\n        break;\n    }\n    this.userCode = `\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${fillModeId} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${fillModeId} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${fillModeId} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${\n        imageHeight} && 0 <= coordX && coordX < ${imageWidth}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${fillValue});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${fillValue});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${imageWidth}));\n                float mapY = mapCoord(inY, float(${imageHeight}));\n\n                if (${interpolationModeId} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transform, TransformAttrs, TransformInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {TransformProgram} from '../transform_gpu';\n\nexport function transform(args: {\n  inputs: TransformInputs,\n  backend: MathBackendWebGL,\n  attrs: TransformAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {image, transforms} = inputs;\n  const {interpolation, fillMode, fillValue, outputShape} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const [outHeight, outWidth] =\n      outputShape != null ? outputShape : [imageHeight, imageWidth];\n  const outShape =\n      [batch, outHeight, outWidth,\n       numChannels] as [number, number, number, number];\n\n  const program = new TransformProgram(\n      imageHeight, imageWidth, interpolation, fillMode, fillValue, outShape);\n  return backend.runWebGLProgram(program, [image, transforms], 'float32');\n}\n\nexport const transformConfig: KernelConfig = {\n  kernelName: Transform,\n  backendName: 'webgl',\n  kernelFunc: transform as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unique, UniqueAttrs, UniqueInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {uniqueImplCPU} from '../kernel_utils/shared';\nimport {assertNotComplex} from '../webgl_util';\n\nexport function unique(\n    args:\n        {inputs: UniqueInputs, attrs: UniqueAttrs, backend: MathBackendWebGL}):\n    TensorInfo[] {\n  const {inputs, attrs, backend} = args;\n  const {axis} = attrs;\n  const {x} = inputs;\n  assertNotComplex(x, 'unique');\n\n  // For now, always forward calculation to the CPU backend.\n  console.warn(\n      'WARNING: ',\n      'UI might be locked temporarily as data is being downloaded');\n  const values = backend.readSync(x.dataId);\n  const {outputValues, outputShape, indices} =\n      uniqueImplCPU(values, axis, x.shape, x.dtype);\n  return [\n    backend.makeTensorInfo(outputShape, x.dtype, outputValues),\n    backend.makeTensorInfo([indices.length], 'int32', indices),\n  ];\n}\n\nexport const uniqueConfig: KernelConfig = {\n  kernelName: Unique,\n  backendName: 'webgl',\n  kernelFunc: unique as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unpack, UnpackAttrs, UnpackInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function unpack(\n    args:\n        {inputs: UnpackInputs, backend: MathBackendWebGL, attrs: UnpackAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {value} = inputs;\n  let {axis} = attrs;\n\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n\n  const x = value;\n  const xRank = x.shape.length;\n\n  const num = value.shape[axis];\n  const outShape: number[] = new Array(xRank - 1);\n  let outIndex = 0;\n  for (let i = 0; i < xRank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = x.shape[i];\n    }\n  }\n\n  const toDispose = [];\n\n  const begin = new Array(xRank).fill(0);\n  const size = x.shape.slice();\n  size[axis] = 1;\n  const res: TensorInfo[] = new Array(num);\n  for (let i = 0; i < res.length; i++) {\n    begin[axis] = i;\n    const sliced = slice({inputs: {x}, backend, attrs: {begin, size}});\n    const reshaped =\n        reshape({inputs: {x: sliced}, backend, attrs: {shape: outShape}});\n    res[i] = reshaped;\n\n    toDispose.push(sliced);\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return res;\n}\n\nexport const unpackConfig: KernelConfig = {\n  kernelName: Unpack,\n  backendName: 'webgl',\n  kernelFunc: unpack as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class SegmentOpProgram implements GPGPUProgram {\n  variableNames = ['x', 'segmentIds'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      segOpInfo: backend_util.segment_util.SegOpInfo,\n      segOpType: 'unsortedSegmentSum') {\n    const windowSize = segOpInfo.windowSize;\n    const batchSize = segOpInfo.batchSize;\n    const inSize = segOpInfo.inSize;\n    const numSegments = segOpInfo.numSegments;\n    const outSize = numSegments * Math.ceil(inSize / windowSize);\n    this.outputShape = [batchSize, outSize];\n\n    const initializationValue = '0.0';\n    const returnValue = `sumValue`;\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    const updateSnippet = `\n        sumValue += dot(values, segFilter);\n    `;\n\n    let checkValueOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkValueOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n    }\n\n    let checkSegmentIdOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkSegmentIdOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return -1.0;\n        }\n      `;\n    }\n\n    this.userCode = `\n      const float initializationValue = ${initializationValue};\n\n      float getValue(int batch, int inIdx) {\n        ${checkValueOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${checkSegmentIdOutOfBounds}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${numSegments})) * float(${windowSize}));\n        int currentSeg = int(mod(float(outIdx), float(${numSegments})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, KernelConfig, KernelFunc, sumOutType, TensorInfo, UnsortedSegmentSum, UnsortedSegmentSumAttrs, UnsortedSegmentSumInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {SegmentOpProgram} from '../segment_gpu';\n\nimport {range} from './Range';\nimport {reshape} from './Reshape';\nimport {tile} from './Tile';\nimport {transpose} from './Transpose';\n\nexport function unsortedSegmentSum(args: {\n  inputs: UnsortedSegmentSumInputs,\n  backend: MathBackendWebGL,\n  attrs: UnsortedSegmentSumAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, segmentIds} = inputs;\n  const {numSegments} = attrs;\n\n  const xRank = x.shape.length;\n\n  const toDispose = [];\n\n  let axis = 0;\n  const permutation = backend_util.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n    toDispose.push(permutedX);\n    axis = backend_util.getInnerMostAxes(1, xRank)[0];\n  }\n\n  const outShape = backend_util.segment_util.computeOutShape(\n      permutedX.shape, axis, numSegments);\n  const inSize = util.sizeFromShape([permutedX.shape[axis]]);\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  toDispose.push(a2D);\n\n  const outputDType = sumOutType(x.dtype);\n\n  const segOpCompute =\n      (x: TensorInfo, segOpType: 'unsortedSegmentSum', segmentIds: TensorInfo,\n       dtype: DataType, numSegments: number): TensorInfo => {\n        const batchSize = x.shape[0];\n        const inSize = x.shape[1];\n        const windowSize =\n            backend_util.segment_util.segOpComputeOptimalWindowSize(\n                inSize, numSegments);\n        const segOpInfo = {windowSize, inSize, batchSize, numSegments};\n        const program = new SegmentOpProgram(segOpInfo, segOpType);\n        const output = backend.compileAndRun(program, [x, segmentIds], dtype);\n        toDispose.push(output);\n        // No need to run another GPGPU program.\n        if (output.shape[1] === numSegments) {\n          return output;\n        }\n        const rangeInfo = range({\n          backend,\n          attrs: {start: 0, stop: numSegments, step: 1, dtype: 'float32'}\n        });\n        const tileInfo = tile({\n          inputs: {x: rangeInfo},\n          backend,\n          attrs: {reps: [inSize / windowSize]}\n        });\n\n        toDispose.push(rangeInfo);\n        toDispose.push(tileInfo);\n\n        const result =\n            segOpCompute(output, segOpType, tileInfo, dtype, numSegments);\n        return result;\n      };\n\n  const segOpResult = segOpCompute(\n      a2D, 'unsortedSegmentSum', segmentIds, outputDType, numSegments);\n\n  const reshaped =\n      reshape({inputs: {x: segOpResult}, backend, attrs: {shape: outShape}});\n\n  let result = reshaped;\n  if (permutation != null) {\n    toDispose.push(reshaped);\n    const perm = backend_util.getUndoAxesPermutation(permutation);\n    result = transpose({inputs: {x: result}, backend, attrs: {perm}});\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return result;\n}\n\nexport const unsortedSegmentSumConfig: KernelConfig = {\n  kernelName: UnsortedSegmentSum,\n  backendName: 'webgl',\n  kernelFunc: unsortedSegmentSum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {KernelConfig, registerKernel} from '@tensorflow/tfjs-core';\n\nimport {_fusedMatMulConfig} from './kernels/_FusedMatMul';\nimport {absConfig} from './kernels/Abs';\nimport {acosConfig} from './kernels/Acos';\nimport {acoshConfig} from './kernels/Acosh';\nimport {addConfig} from './kernels/Add';\nimport {addNConfig} from './kernels/AddN';\nimport {allConfig} from './kernels/All';\nimport {anyConfig} from './kernels/Any';\nimport {argMaxConfig} from './kernels/ArgMax';\nimport {argMinConfig} from './kernels/ArgMin';\nimport {asinConfig} from './kernels/Asin';\nimport {asinhConfig} from './kernels/Asinh';\nimport {atanConfig} from './kernels/Atan';\nimport {atan2Config} from './kernels/Atan2';\nimport {atanhConfig} from './kernels/Atanh';\nimport {avgPoolConfig} from './kernels/AvgPool';\nimport {avgPool3DConfig} from './kernels/AvgPool3D';\nimport {avgPool3DGradConfig} from './kernels/AvgPool3DGrad';\nimport {avgPoolGradConfig} from './kernels/AvgPoolGrad';\nimport {batchMatMulConfig} from './kernels/BatchMatMul';\nimport {batchNormConfig} from './kernels/BatchNorm';\nimport {batchToSpaceNDConfig} from './kernels/BatchToSpaceND';\nimport {bincountConfig} from './kernels/Bincount';\nimport {broadcastArgsConfig} from './kernels/BroadcastArgs';\nimport {castConfig} from './kernels/Cast';\nimport {ceilConfig} from './kernels/Ceil';\nimport {clipByValueConfig} from './kernels/ClipByValue';\nimport {complexConfig} from './kernels/Complex';\nimport {complexAbsConfig} from './kernels/ComplexAbs';\nimport {concatConfig} from './kernels/Concat';\nimport {conv2DConfig} from './kernels/Conv2D';\nimport {conv2DBackpropFilterConfig} from './kernels/Conv2DBackpropFilter';\nimport {conv2DBackpropInputConfig} from './kernels/Conv2DBackpropInput';\nimport {conv3DConfig} from './kernels/Conv3D';\nimport {conv3DBackpropFilterV2Config} from './kernels/Conv3DBackpropFilterV2';\nimport {conv3DBackpropInputConfig} from './kernels/Conv3DBackpropInputV2';\nimport {cosConfig} from './kernels/Cos';\nimport {coshConfig} from './kernels/Cosh';\nimport {cropAndResizeConfig} from './kernels/CropAndResize';\nimport {cumprodConfig} from './kernels/Cumprod';\nimport {cumsumConfig} from './kernels/Cumsum';\nimport {denseBincountConfig} from './kernels/DenseBincount';\nimport {depthToSpaceConfig} from './kernels/DepthToSpace';\nimport {depthwiseConv2dNativeConfig} from './kernels/DepthwiseConv2dNative';\nimport {depthwiseConv2dNativeBackpropFilterConfig} from './kernels/DepthwiseConv2dNativeBackpropFilter';\nimport {depthwiseConv2dNativeBackpropInputConfig} from './kernels/DepthwiseConv2dNativeBackpropInput';\nimport {diagConfig} from './kernels/Diag';\nimport {dilation2DConfig} from './kernels/Dilation2D';\nimport {einsumConfig} from './kernels/Einsum';\nimport {eluConfig} from './kernels/Elu';\nimport {eluGradConfig} from './kernels/EluGrad';\nimport {equalConfig} from './kernels/Equal';\nimport {erfConfig} from './kernels/Erf';\nimport {expConfig} from './kernels/Exp';\nimport {expandDimsConfig} from './kernels/ExpandDims';\nimport {expm1Config} from './kernels/Expm1';\nimport {fftConfig} from './kernels/FFT';\nimport {fillConfig} from './kernels/Fill';\nimport {flipLeftRightConfig} from './kernels/FlipLeftRight';\nimport {floorConfig} from './kernels/Floor';\nimport {floorDivConfig} from './kernels/FloorDiv';\nimport {fromPixelsConfig} from './kernels/FromPixels';\nimport {fusedConv2DConfig} from './kernels/FusedConv2D';\nimport {fusedDepthwiseConv2DConfig} from './kernels/FusedDepthwiseConv2D';\nimport {gatherNdConfig} from './kernels/GatherNd';\nimport {gatherV2Config} from './kernels/GatherV2';\nimport {greaterConfig} from './kernels/Greater';\nimport {greaterEqualConfig} from './kernels/GreaterEqual';\nimport {identityConfig} from './kernels/Identity';\nimport {ifftConfig} from './kernels/IFFT';\nimport {imagConfig} from './kernels/Imag';\nimport {isFiniteConfig} from './kernels/IsFinite';\nimport {isInfConfig} from './kernels/IsInf';\nimport {isNaNConfig} from './kernels/IsNaN';\nimport {leakyReluConfig} from './kernels/LeakyRelu';\nimport {lessConfig} from './kernels/Less';\nimport {lessEqualConfig} from './kernels/LessEqual';\nimport {linSpaceConfig} from './kernels/LinSpace';\nimport {logConfig} from './kernels/Log';\nimport {log1pConfig} from './kernels/Log1p';\nimport {logicalAndConfig} from './kernels/LogicalAnd';\nimport {logicalNotConfig} from './kernels/LogicalNot';\nimport {logicalOrConfig} from './kernels/LogicalOr';\nimport {LRNConfig} from './kernels/LRN';\nimport {LRNGradConfig} from './kernels/LRNGrad';\nimport {maxConfig} from './kernels/Max';\nimport {maximumConfig} from './kernels/Maximum';\nimport {maxPoolConfig} from './kernels/MaxPool';\nimport {maxPool3DConfig} from './kernels/MaxPool3D';\nimport {maxPool3DGradConfig} from './kernels/MaxPool3DGrad';\nimport {maxPoolGradConfig} from './kernels/MaxPoolGrad';\nimport {maxPoolWithArgmaxConfig} from './kernels/MaxPoolWithArgmax';\nimport {meanConfig} from './kernels/Mean';\nimport {minConfig} from './kernels/Min';\nimport {minimumConfig} from './kernels/Minimum';\nimport {mirrorPadConfig} from './kernels/MirrorPad';\nimport {modConfig} from './kernels/Mod';\nimport {multinomialConfig} from './kernels/Multinomial';\nimport {multiplyConfig} from './kernels/Multiply';\nimport {negConfig} from './kernels/Neg';\nimport {nonMaxSuppressionV3Config} from './kernels/NonMaxSuppressionV3';\nimport {nonMaxSuppressionV4Config} from './kernels/NonMaxSuppressionV4';\nimport {nonMaxSuppressionV5Config} from './kernels/NonMaxSuppressionV5';\nimport {notEqualConfig} from './kernels/NotEqual';\nimport {oneHotConfig} from './kernels/OneHot';\nimport {onesLikeConfig} from './kernels/OnesLike';\nimport {packConfig} from './kernels/Pack';\nimport {padV2Config} from './kernels/PadV2';\nimport {powConfig} from './kernels/Pow';\nimport {preluConfig} from './kernels/Prelu';\nimport {prodConfig} from './kernels/Prod';\nimport {rangeConfig} from './kernels/Range';\nimport {realConfig} from './kernels/Real';\nimport {realDivConfig} from './kernels/RealDiv';\nimport {reciprocalConfig} from './kernels/Reciprocal';\nimport {reluConfig} from './kernels/Relu';\nimport {relu6Config} from './kernels/Relu6';\nimport {reshapeConfig} from './kernels/Reshape';\nimport {resizeBilinearConfig} from './kernels/ResizeBilinear';\nimport {resizeBilinearGradConfig} from './kernels/ResizeBilinearGrad';\nimport {resizeNearestNeighborConfig} from './kernels/ResizeNearestNeighbor';\nimport {resizeNearestNeighborGradConfig} from './kernels/ResizeNearestNeighborGrad';\nimport {reverseConfig} from './kernels/Reverse';\nimport {rotateWithOffsetConfig} from './kernels/RotateWithOffset';\nimport {roundConfig} from './kernels/Round';\nimport {rsqrtConfig} from './kernels/Rsqrt';\nimport {scatterNdConfig} from './kernels/ScatterNd';\nimport {searchSortedConfig} from './kernels/SearchSorted';\nimport {selectConfig} from './kernels/Select';\nimport {seluConfig} from './kernels/Selu';\nimport {sigmoidConfig} from './kernels/Sigmoid';\nimport {signConfig} from './kernels/Sign';\nimport {sinConfig} from './kernels/Sin';\nimport {sinhConfig} from './kernels/Sinh';\nimport {sliceConfig} from './kernels/Slice';\nimport {softmaxConfig} from './kernels/Softmax';\nimport {softplusConfig} from './kernels/Softplus';\nimport {spaceToBatchNDConfig} from './kernels/SpaceToBatchND';\nimport {sparseFillEmptyRowsConfig} from './kernels/SparseFillEmptyRows';\nimport {sparseReshapeConfig} from './kernels/SparseReshape';\nimport {sparseSegmentMeanConfig} from './kernels/SparseSegmentMean';\nimport {sparseSegmentSumConfig} from './kernels/SparseSegmentSum';\nimport {sparseToDenseConfig} from './kernels/SparseToDense';\nimport {splitVConfig} from './kernels/SplitV';\nimport {sqrtConfig} from './kernels/Sqrt';\nimport {squareConfig} from './kernels/Square';\nimport {squaredDifferenceConfig} from './kernels/SquaredDifference';\nimport {stepConfig} from './kernels/Step';\nimport {stridedSliceConfig} from './kernels/StridedSlice';\nimport {stringNGramsConfig} from './kernels/StringNGrams';\nimport {stringSplitConfig} from './kernels/StringSplit';\nimport {stringToHashBucketFastConfig} from './kernels/StringToHashBucketFast';\nimport {subConfig} from './kernels/Sub';\nimport {sumConfig} from './kernels/Sum';\nimport {tanConfig} from './kernels/Tan';\nimport {tanhConfig} from './kernels/Tanh';\nimport {tileConfig} from './kernels/Tile';\nimport {topKConfig} from './kernels/TopK';\nimport {transformConfig} from './kernels/Transform';\nimport {transposeConfig} from './kernels/Transpose';\nimport {uniqueConfig} from './kernels/Unique';\nimport {unpackConfig} from './kernels/Unpack';\nimport {unsortedSegmentSumConfig} from './kernels/UnsortedSegmentSum';\nimport {zerosLikeConfig} from './kernels/ZerosLike';\n\n// List all kernel configs here\nconst kernelConfigs: KernelConfig[] = [\n  _fusedMatMulConfig,\n  absConfig,\n  acosConfig,\n  acoshConfig,\n  addConfig,\n  addNConfig,\n  allConfig,\n  anyConfig,\n  argMaxConfig,\n  argMinConfig,\n  asinConfig,\n  asinhConfig,\n  atanConfig,\n  atan2Config,\n  atanhConfig,\n  avgPoolConfig,\n  avgPool3DConfig,\n  avgPool3DGradConfig,\n  avgPoolGradConfig,\n  batchMatMulConfig,\n  batchNormConfig,\n  batchToSpaceNDConfig,\n  bincountConfig,\n  broadcastArgsConfig,\n  castConfig,\n  ceilConfig,\n  clipByValueConfig,\n  complexConfig,\n  complexAbsConfig,\n  concatConfig,\n  conv2DConfig,\n  conv2DBackpropFilterConfig,\n  conv2DBackpropInputConfig,\n  conv3DConfig,\n  conv3DBackpropFilterV2Config,\n  conv3DBackpropInputConfig,\n  cosConfig,\n  coshConfig,\n  cropAndResizeConfig,\n  cumprodConfig,\n  cumsumConfig,\n  denseBincountConfig,\n  depthToSpaceConfig,\n  depthwiseConv2dNativeConfig,\n  depthwiseConv2dNativeBackpropFilterConfig,\n  depthwiseConv2dNativeBackpropInputConfig,\n  diagConfig,\n  dilation2DConfig,\n  einsumConfig,\n  eluConfig,\n  eluGradConfig,\n  equalConfig,\n  erfConfig,\n  expConfig,\n  expandDimsConfig,\n  expm1Config,\n  fftConfig,\n  fillConfig,\n  flipLeftRightConfig,\n  floorConfig,\n  floorDivConfig,\n  fromPixelsConfig,\n  fusedConv2DConfig,\n  fusedDepthwiseConv2DConfig,\n  gatherNdConfig,\n  gatherV2Config,\n  greaterConfig,\n  greaterEqualConfig,\n  identityConfig,\n  ifftConfig,\n  imagConfig,\n  isFiniteConfig,\n  isInfConfig,\n  isNaNConfig,\n  leakyReluConfig,\n  lessConfig,\n  lessEqualConfig,\n  linSpaceConfig,\n  logConfig,\n  log1pConfig,\n  logicalAndConfig,\n  logicalNotConfig,\n  logicalOrConfig,\n  LRNConfig,\n  LRNGradConfig,\n  maxConfig,\n  maximumConfig,\n  maxPoolConfig,\n  maxPool3DConfig,\n  maxPool3DGradConfig,\n  maxPoolGradConfig,\n  maxPoolWithArgmaxConfig,\n  meanConfig,\n  minConfig,\n  minimumConfig,\n  mirrorPadConfig,\n  modConfig,\n  multinomialConfig,\n  multiplyConfig,\n  negConfig,\n  nonMaxSuppressionV3Config,\n  nonMaxSuppressionV4Config,\n  nonMaxSuppressionV5Config,\n  notEqualConfig,\n  oneHotConfig,\n  onesLikeConfig,\n  packConfig,\n  padV2Config,\n  powConfig,\n  preluConfig,\n  prodConfig,\n  rangeConfig,\n  realConfig,\n  realDivConfig,\n  reciprocalConfig,\n  reluConfig,\n  relu6Config,\n  reshapeConfig,\n  resizeBilinearConfig,\n  resizeBilinearGradConfig,\n  resizeNearestNeighborConfig,\n  resizeNearestNeighborGradConfig,\n  reverseConfig,\n  rotateWithOffsetConfig,\n  roundConfig,\n  rsqrtConfig,\n  scatterNdConfig,\n  searchSortedConfig,\n  selectConfig,\n  seluConfig,\n  sigmoidConfig,\n  signConfig,\n  sinConfig,\n  sinhConfig,\n  sliceConfig,\n  softmaxConfig,\n  softplusConfig,\n  spaceToBatchNDConfig,\n  sparseFillEmptyRowsConfig,\n  sparseReshapeConfig,\n  sparseSegmentMeanConfig,\n  sparseSegmentSumConfig,\n  sparseToDenseConfig,\n  splitVConfig,\n  sqrtConfig,\n  squareConfig,\n  squaredDifferenceConfig,\n  stepConfig,\n  stridedSliceConfig,\n  stringNGramsConfig,\n  stringSplitConfig,\n  stringToHashBucketFastConfig,\n  subConfig,\n  sumConfig,\n  tanConfig,\n  tanhConfig,\n  tileConfig,\n  topKConfig,\n  transformConfig,\n  transposeConfig,\n  uniqueConfig,\n  unpackConfig,\n  unsortedSegmentSumConfig,\n  zerosLikeConfig\n];\n\nfor (const kernelConfig of kernelConfigs) {\n  registerKernel(kernelConfig);\n}\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '3.18.0';\nexport {version};\n"],"names":["contexts","WEBGL_ATTRIBUTES","alpha","antialias","premultipliedAlpha","preserveDrawingBuffer","depth","stencil","failIfMajorPerformanceCaveat","setWebGLContext","webGLVersion","gl","getWebGLContext","customCanvas","newCtx","Error","canvas","OffscreenCanvas","document","createElement","createCanvas","addEventListener","ev","preventDefault","getContext","getWebGLRenderingContext","console","log","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","PackingScheme","TextureUsage","PhysicalTextureType","getUnpackedMatrixTextureShapeWidthHeight","rows","columns","getDenseTexShape","shape","size","util","sizeFromShape","texelsNeeded","Math","ceil","sizeToSquarishShape","getPackedMatrixTextureShapeWidthHeight","max","getTextureConfig","textureHalfFloatExtension","glany","internalFormatFloat","internalFormatHalfFloat","internalFormatPackedHalfFloat","internalFormatPackedFloat","textureFormatFloat","downloadTextureFormat","downloadUnpackNumChannels","defaultNumChannels","textureTypeHalfFloat","textureTypeFloat","env","getNumber","R32F","R16F","RGBA16F","RGBA32F","RED","HALF_FLOAT","FLOAT","RGBA8","RGBA","HALF_FLOAT_OES","callAndCheck","func","returnValue","getBool","error","getError","NO_ERROR","getWebGLErrorMessage","checkWebGLError","canBeRepresented","num","abs","status","INVALID_ENUM","INVALID_VALUE","INVALID_OPERATION","INVALID_FRAMEBUFFER_OPERATION","OUT_OF_MEMORY","CONTEXT_LOST_WEBGL","getExtensionOrThrow","extensionName","throwIfNull","getExtension","createVertexShader","vertexShaderSource","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","createFragmentShader","fragmentShaderSource","fragmentShader","FRAGMENT_SHADER","get","logShaderSourceAndInfoLog","lineNumberRegex","shaderInfoLog","lineNumberRegexResult","exec","lineNumber","shaderLines","split","pad","length","toString","linesWithLineNumbers","map","line","rightPad","maxLineLength","i","beforeErrorLines","slice","errorLine","afterErrorLines","join","createProgram","linkProgram","program","getProgramParameter","LINK_STATUS","getProgramInfoLog","validateProgram","VALIDATE_STATUS","createStaticVertexBuffer","data","buffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","createStaticIndexBuffer","ELEMENT_ARRAY_BUFFER","createTexture","validateTextureSize","width","height","maxTextureSize","createFramebuffer","bindVertexBufferToProgramAttribute","attribute","arrayEntriesPerItem","itemStrideInBytes","itemOffsetInBytes","loc","getAttribLocation","vertexAttribPointer","enableVertexAttribArray","bindTextureUnit","texture","textureUnit","validateTextureUnit","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","getProgramUniformLocationOrThrow","uniformName","getUniformLocation","getProgramUniformLocation","bindTextureToProgramUniformSampler","uniformSamplerLocation","uniform1i","bindColorTextureToFramebuffer","framebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","unbindColorTextureFromFramebuffer","validateFramebuffer","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","getFramebufferErrorMessage","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_UNSUPPORTED","returnTOrNull","failureMessage","tOrNull","maxTextureUnit","MAX_COMBINED_TEXTURE_IMAGE_UNITS","glTextureUnit","getBatchDim","dimsToSkip","getRowsCols","getShapeAs3D","shapeAs3D","getTextureShapeFromLogicalShape","logShape","isPacked","maxTexSize","d","nearestLargerEven","squeezeResult","squeezeShape","newShape","batchDim","cols","isEven","n","isReshapeFree","shape1","shape2","arraysEqual","shape1Cols","shape2Cols","MAX_TEXTURE_SIZE","MAX_TEXTURES_IN_SHADER","getWebGLMaxTextureSize","getParameter","getMaxTexturesInShader","MAX_TEXTURE_IMAGE_UNITS","min","getWebGLDisjointQueryTimerVersion","queryTimerVersion","hasExtension","isWebGLVersionEnabled","e","isCapableOfRenderingToFloatTexture","createFloatTextureAndBindToFramebuffer","isDownloadFloatTextureEnabled","COLOR_BUFFER_HALF_FLOAT","texConfig","texImage2D","frameBuffer","isFrameBufferComplete","deleteTexture","deleteFramebuffer","createHalfFloatTextureAndBindToFramebuffer","isWebGLFenceEnabled","fenceSync","assertNotComplex","tensor","opName","Array","isArray","forEach","t","assert","dtype","viewport","scissor","ENV","getGlslDifferences","version","varyingVs","varyingFs","texture2D","output","defineOutput","defineSpecialNaN","defineSpecialInf","defineRound","getLogicalCoordinatesFromFlatIndex","coords","index","strides","computeStrides","stride","getOutputLogicalCoordinatesFromFlatIndexByUniform","_","getLogicalCoordinatesFromFlatIndexByUniform","variableName","indicesArr","numCoords","symbolicallyComputeStrides","getFlatIndexFrom3D","registerFlag","device_util","isMobile","threshold","ENCODE_FLOAT_SNIPPET","getBroadcastDims","backend_util","makeShader","inputsInfo","outputShape","prefixSnippets","x","shapeInfo","logicalShape","isUniform","push","name","enableShapeUniforms","uniformShape","getUniformInfoFromShape","packedInputs","texShape","customUniforms","type","arrayIndex","inputPrefixSnippet","inputSamplingSnippet","inInfo","outShapeInfo","usesPackedTextures","res","getPackedSamplerFromInInfo","getSamplerFromInInfo","inShape","outShape","inputInfo","texName","texFuncSnippet","charAt","toUpperCase","funcName","inRank","outRank","broadcastDims","getCoordsDataType","rankDiff","coordsSnippet","fields","unpackedCoordsSnippet","s","isInputScalar","isOutputScalar","indexOf","getPackedSamplerAtOutputCoords","outTexShape","inTexShape","flatOffset","getSamplerAtOutputCoords","getInputSamplingSnippet","glsl","floatTextureSampleSnippet","getFloatTextureSampleSnippet","outputSamplingSnippet","floatTextureSetOutputSnippet","shaderPrefix","SAMPLE_1D_SNIPPET","SAMPLE_2D_SNIPPET","SAMPLE_3D_SNIPPET","getShaderPrefix","getOutputScalarCoords","packedTexShape","getOutputPacked1DCoords","texelsInLogicalRow","getOutputPacked2DCoords","texelsInBatch","getOutputPacked3DCoords","texelsInBatchN","batches","b","getOutputPackedNDCoords","getPackedOutputSamplingSnippet","getFloatTextureSetRGBASnippet","getOutput1DCoords","getOutput2DCoords","shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform","coordsFromIndexSnippet","shader_util.getLogicalCoordinatesFromFlatIndex","getOutput3DCoords","getOutput4DCoords","getOutput5DCoords","getOutput6DCoords","getOutputSamplingSnippet","getFloatTextureSetRSnippet","SHADER_PACKED_PREFIX","userCode","texNumR","texNumC","offset","getFlatOffsetUniformName","tNumR","tNumC","getSamplerScalar","getUniformSampler","getSampler1D","keptDims","squeezedShape","params","squeezeInputInfo","getSqueezedParams","getSampler2D","stride0","stride1","getSampler3D","stride2","stride2Str","stride1Str","stride0Str","getSampler4D","stride3","getSampler5D","stride4","getSampler6D","getPackedSamplerScalar","getPackedSampler1D","valuesPerRow","getPackedSampler2D","getPackedSampler3D","rank","getPackedSamplerND","inSize","useSqueezePackedShape","useSqueezeShape","newInputInfo","JSON","parse","stringify","getUniformLocations","gpgpu","webGLProgram","uniformLocations","inShapesLocations","inTexShapesLocations","customUniformLocations","outShapeLocation","outTexShapeLocation","outShapeStridesLocation","infLoc","nanLoc","shouldThrow","variableNames","varName","validateBinaryAndProgram","shapeInfos","inputs","shapeA","input","shapeB","texShapeA","texShapeB","texData","useShapeUniforms","DecodeMatrixProgram","constructor","this","DENSE","DecodeMatrixPackedProgram","EncodeFloatProgram","DOWNLOAD","EncodeFloatPackedProgram","EncodeMatrixProgram","inputIsUnsignedByte","shader_util.getFlatIndexFrom3D","EncodeMatrixPackedProgram","mainLoop","row","col","channel","webgl_util.createVertexShader","createVertexBuffer","webgl_util.createStaticVertexBuffer","Float32Array","createIndexBuffer","webgl_util.createStaticIndexBuffer","Uint16Array","createAndConfigureTexture","internalFormat","textureFormat","textureType","webgl_util.validateTextureSize","webgl_util.createTexture","tex2d","webgl_util.callAndCheck","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","texStorage2D","getInternalFormatForFloat32MatrixTexture","textureConfig","createFloat32MatrixTexture","tex_util.getUnpackedMatrixTextureShapeWidthHeight","getInternalFormatForFloat16MatrixTexture","createFloat16MatrixTexture","getInternalFormatForUnsignedBytesMatrixTexture","createUnsignedBytesMatrixTexture","UNSIGNED_BYTE","getInternalFormatForPackedMatrixTexture","createPackedMatrixTexture","tex_util.getPackedMatrixTextureShapeWidthHeight","getInternalFormatForFloat16PackedMatrixTexture","createFloat16PackedMatrixTexture","bindVertexProgramAttributeStreams","vertexBuffer","webgl_util.bindVertexBufferToProgramAttribute","uploadDenseMatrixToTexture","dataForUpload","texelDataType","Uint8Array","set","texSubImage2D","uploadPixelDataToTexture","pixels","createBufferFromOutputTexture","gl2","PIXEL_PACK_BUFFER","bufferSizeBytes","bytesPerFloat","STREAM_READ","readPixels","downloadFloat32MatrixFromBuffer","downloadTarget","getBufferSubData","downloadByteEncodedFloatMatrixFromOutputTexture","w","h","downloadPackedMatrixFromBuffer","batch","physicalRows","physicalCols","tex_util.getPackedRGBAArraySizeFromMatrixShape","downloadMatrixFromPackedOutputTexture","packedRGBA","GPGPUContext","glVersion","COLOR_BUFFER_FLOAT","parallelCompilationExtension","TEXTURE_FLOAT","TEXTURE_HALF_FLOAT","textureFloatExtension","webgl_util.getExtensionOrThrow","webgl_util.hasExtension","colorBufferFloatExtension","colorBufferHalfFloatExtension","gpgpu_util.createVertexBuffer","indexBuffer","gpgpu_util.createIndexBuffer","webgl_util.createFramebuffer","tex_util.getTextureConfig","debug","dispose","disposed","warn","outputTexture","finish","deleteBuffer","throwIfDisposed","gpgpu_util.createFloat32MatrixTexture","gpgpu_util.createFloat16MatrixTexture","gpgpu_util.createUnsignedBytesMatrixTexture","gpgpu_util.uploadPixelDataToTexture","gpgpu_util.uploadDenseMatrixToTexture","gpgpu_util.createFloat16PackedMatrixTexture","gpgpu_util.createPackedMatrixTexture","deleteMatrixTexture","webgl_util.unbindColorTextureFromFramebuffer","downloadMatrixDriver","gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture","gpgpu_util.downloadPackedMatrixFromBuffer","gpgpu_util.downloadFloat32MatrixFromBuffer","createBufferFromTexture","bindTextureToFrameBuffer","result","gpgpu_util.createBufferFromOutputTexture","unbindTextureToFrameBuffer","createAndWaitForFence","fenceContext","createFence","pollFence","query","isFencePassed","sync","SYNC_GPU_COMMANDS_COMPLETE","flush","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","beginQuery","endQuery","isQueryAvailable","downloadMatrixFromPackedTexture","gpgpu_util.downloadMatrixFromPackedOutputTexture","gpgpu_util.createVertexShader","webgl_util.createProgram","attachShader","webgl_util.linkProgram","webgl_util.validateProgram","vertexAttrsAreBound","setProgram","gpgpu_util.bindVertexProgramAttributeStreams","deleteProgram","useProgram","webgl_util.getProgramUniformLocationOrThrow","webgl_util.getProgramUniformLocation","getAttributeLocation","getUniformLocationNoThrow","setInputMatrixTexture","inputMatrixTexture","uniformLocation","throwIfNoProgram","webgl_util.bindTextureToProgramUniformSampler","setOutputMatrixTexture","outputMatrixTexture","setOutputMatrixTextureDriver","setOutputPackedMatrixTexture","outputPackedMatrixTexture","setOutputMatrixWriteRegion","startRow","numRows","startColumn","numColumns","setOutputMatrixWriteRegionDriver","setOutputPackedMatrixWriteRegion","debugValidate","webgl_util.validateFramebuffer","executeProgram","drawElements","TRIANGLES","UNSIGNED_SHORT","blockUntilAllProgramsCompleted","getQueryTimerExtension","disjointQueryTimerExtension","getQueryTimerExtensionWebGL2","getQueryTimerExtensionWebGL1","ext","createQuery","TIME_ELAPSED_EXT","createQueryEXT","beginQueryEXT","endQueryEXT","waitForQueryAndGetTime","repeatedTry","getQueryTime","getQueryParameter","QUERY_RESULT","getQueryObjectEXT","QUERY_RESULT_EXT","available","QUERY_RESULT_AVAILABLE","disjoint","GPU_DISJOINT_EXT","QUERY_RESULT_AVAILABLE_EXT","Promise","resolve","addItemToPoll","pollItems","arr","linearSearchLastTrue","itemsToPoll","isDoneFn","resolveFn","webgl_util.bindColorTextureToFramebuffer","downloadAndDecode","outputMatrixTextureMaybePacked","y","createSimpleBinaryKernelImpl","op","aShape","bShape","aVals","bVals","assertAndGetBroadcastShape","resultRank","resultStrides","resultSize","getTypedArrayFromDType","aRank","bRank","aStrides","bStrides","aBroadcastDims","bBroadcastDims","indexToLoc","aLoc","aIndex","locToIndex","bLoc","bIndex","addImpl","a","createSimpleUnaryImpl","values","attrs","newValues","ceilImpl","xi","equalImpl","expImpl","exp","expm1Impl","expm1","floorImpl","floor","greaterImpl","greaterEqualImpl","lessImpl","lessEqualImpl","logImpl","maximumImpl","aValue","bValue","minimumImpl","multiplyImpl","notEqualImpl","rsqrtImpl","sqrt","sigmoidImpl","sqrtImpl","squaredDifferenceImpl","diff","StringNGramsOp","separator","nGramWidths","leftPad","padWidth","preserveShortSequences","encodeString","preserveShort","getPadWidth","nGramWidth","getNumNGrams","createNGrams","splitIndex","outputStartIndex","numNGrams","nGramIndex","leftPadding","rightPadding","numTokens","dataStartIndex","nGramSize","nGram","nextNGramIndex","appendToNGram","str","value","compute","splits","inputDataSize","splitsSize","prevSplit","validSplits","numBatchItems","nGramsSplits","getArrayFromDType","empty","nGrams","outputStartIdx","dataLength","delimiters","skipEmpty","subarray","delimiter","f","token","tokenStart","subImpl","comparePair","valueDiff","select","array","k","left","right","z","sd","sign","j","swap","vals","resultValues","xVals","weightsVals","weightsDtype","weightsShape","weightsSize","outVals","makeZerosTypedArray","xBuf","weightsBuf","binaryOutput","numCols","outBuf","simplyConcat","colOffset","decodedData","fromUint8ToStringArray","tIdx","resIdx","indicesData","paramsBuf","numSlices","sliceRank","sliceSize","paramsShape","paramsSize","flattenIndex","dim","indicesBuf","flattenOutputShape","originalLoc","batchIdx","indicesIdx","indicesIndex","originalIndex","start","stop","step","reduceSize","Number","isNaN","xShape","xDtype","minusOne","createScalarValue","reductionAxes","reduceShape","computeOutAndReduceShapes","outDtype","upcastType","prod","numElements","indices","updates","outputSize","numUpdates","defaultValue","sumDupeIndices","flattenShape","updatesData","fill","begin","isContinous","slice_util","isSliceContinous","xStrides","computeFlatOffset","inBuf","outLoc","inLoc","idx","fromStringArrayToUint8","indicesShape","indicesDType","valuesDType","denseShape","indicesCount","denseRows","emptyRowIndicator","reverseIndexMap","getSparseFillEmptyRowsIndicesDenseShapeMismatch","rowsAreOrdered","lastIndicesRow","csrOffset","getSparseFillEmptyRowsNegativeIndexErrorMessage","getSparseFillEmptyRowsOutOfRangeIndexErrorMessage","allRowsFull","rowEmpty","outputIndices","outputValues","fullIndicesCount","filledCount","outputI","startingIndex","inputIndices","inputIndicesShape","inputDType","inputShape","targetShape","denseSize","nnz","outputRank","product","unknownIndex","getSparseReshapeMultipleNegativeOneOutputDimErrorMessage","getSparseReshapeNegativeOutputDimErrorMessage","getSparseReshapeEmptyTensorZeroOutputDimErrorMessage","missing","trunc","getSparseReshapeInputOutputMultipleErrorMessage","getSparseReshapeInputOutputMismatchErrorMessage","inputRank","inputStrides","outputStrides","newIndices","id","segmentIds","isMean","numIndices","inputFlat","numCol","outputRows","getSparseSegmentReductionNegativeSegmentIdsErrorMessage","outputLength","reduce","end","uninitializedIndex","outIndex","nextIndex","getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage","getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage","getSparseSegmentReductionIndicesOutOfRangeErrorMessage","newLoc","dataSplits","batchSize","tokens","maxNumEntries","prevTokensLength","nEntries","c","numBuckets","fingerPrint64","modulo","getLowBitsUnsigned","reps","sorted","lastDim","allTopKVals","allTopKIndices","valAndInd","sort","outOffset","topKVals","topKIndices","perm","xRank","xSize","newStrides","axis","$axis","parseAxisParam","uniqueElements","Int32Array","inputBuffer","TensorBuffer","uniqueIndices","is1DTensor","element","axisValues","m","undefined","uniqueIndex","Object","keys","outputTmpShape","outputBuffer","uniqueElementIndex","addImplCPU","bincountImpl","bincountImplCPU","bincountReduceImpl","bincountReduceImplCPU","ceilImplCPU","concatImpl","concatImplCPU","equalImplCPU","expImplCPU","expm1ImplCPU","floorImplCPU","gatherNdImpl","gatherNdImplCPU","gatherV2Impl","gatherV2ImplCPU","greaterImplCPU","greaterEqualImplCPU","lessImplCPU","lessEqualImplCPU","linSpaceImpl","linSpaceImplCPU","logImplCPU","maxImpl","maxImplCPU","maximumImplCPU","minimumImplCPU","multiplyImplCPU","negImpl","negImplCPU","notEqualImplCPU","prodImpl","prodImplCPU","rangeImpl","rangeImplCPU","rsqrtImplCPU","scatterImpl","scatterImplCPU","sigmoidImplCPU","simpleAbsImpl","simpleAbsImplCPU","sliceImpl","sliceImplCPU","sparseFillEmptyRowsImpl","sparseFillEmptyRowsImplCPU","sparseReshapeImpl","sparseReshapeImplCPU","sparseSegmentReductionImpl","sparseSegmentReductionImplCPU","sqrtImplCPU","stridedSliceImpl","stridedSliceImplCPU","stringNGramsImpl","stringNGramsImplCPU","stringSplitImpl","stringSplitImplCPU","stringToHashBucketFastImpl","stringToHashBucketFastImplCPU","subImplCPU","tileImpl","tileImplCPU","topKImpl","topKImplCPU","transposeImpl","transposeImplCPU","uniqueImpl","uniqueImplCPU","shared","getVecChannels","getChannels","PackProgram","channels","outOfBoundsCondition","getOutOfBoundsCondition","setup","getSetup","getOutput","getSourceCoordsArr","dims","coord","cond","innerDims","sourceCoords","ReshapePackedProgram","thisRC","shader_util.getLogicalCoordinatesFromFlatIndexByUniform","TextureManager","acquireTexture","shapeRC","usage","physicalTexType","getPhysicalFromLogicalTextureType","shapeKey","getKeyFromTextureShape","freeTextures","usedTextures","texBytes","computeBytes","numFreeTextures","numUsedTextures","_numBytesFree","newTexture","shift","PACKED_2X2_FLOAT32","PACKED_2X2_FLOAT16","UNPACKED_FLOAT32","UNPACKED_FLOAT16","PACKED_4X1_UNSIGNED_BYTE","_numBytesAllocated","releaseTexture","logicalTexType","deleteTexThreshold","texList","texIndex","splice","logEnabled","total","freeRatio","round","numBytesAllocated","numBytesFree","getNumUsedTextures","getNumFreeTextures","tex","internalFormatForPhysicalTexType","packedWidth","packedHeight","numBytesForInternalFormat","UPLOAD","RENDER","getPhysicalTextureForRendering","PIXELS","shapeRowsCol","UnaryOpProgram","opSnippet","ABS","CLONE","UnaryOpPackedProgram","UnpackProgram","getSourceCoords","whereImpl","kernel_impls","binaryCaches","CPU_HANDOFF_SIZE_THRESHOLD","MathBackendWebGL","KernelBackend","gpuResource","super","WeakMap","WeakSet","newGPGPU","binaryCache","gpgpuCreatedLocally","textureManager","numMBBeforeWarning","global","screen","window","devicePixelRatio","DataStorage","engine","nextDataId","numDataIds","pendingDeletes","write","checkNumericalProblems","dataId","refCount","has","incRef","decRef","move","disposeIntermediateTensorInfo","tensorInfo","disposeData","readSync","complexTensorInfos","unary_op.CLONE","runWebGLProgram","convertAndCacheOnCPU","shouldTimeProgram","activeTimers","now","realValues","real","imagValues","imag","mergeRealAndImagArrays","getValuesFromTexture","downloadWaitMs","read","pendingRead","subscribers","tmpDownloadTarget","decode","tmpData","tex_util.getDenseTexShape","ps","all","dTypeVals","delete","pendingDisposal","removeDataId","readToGPU","options","gpuResouorce","tmpTarget","customTexShape","tensorRef","makeTensorFromTensorInfo","bufferSync","strings","decodeString","webgl_util.canBeRepresented","shouldUsePackedProgram","webgl_util.getShapeAs3D","timerAvailable","time","oldActiveTimers","newActiveTimers","outerMostTime","programTimersStack","flattenedActiveTimerQueries","flatten","filter","flattenedActiveTimerNames","uploadWaitMs","kernelMs","wallMs","sum","ms","memory","unreliable","numBytesInGPU","numBytesInGPUAllocated","numBytesInGPUFree","startTimer","startMs","endMs","endTimer","timerQuery","force","add","releaseGPUData","key","origDataId","dataRefCount","getTexture","uploadToGPU","getDataInfo","shouldExecuteOnCPU","sizeThreshold","every","getGPGPUContext","where","condition","condVals","dataSync","packedUnaryOp","outInfo","compileAndRun","outValues","makeOutput","unary_op.ABS","makeTensorInfo","isString","encodedValues","unpackTensor","packTensor","packedReshape","afterShape","input3DShape","webgl_util.getBatchDim","webgl_util.getRowsCols","input3D","afterShapeAs3D","customValues","texSize","outputDtype","customUniformValues","preventEagerUnpackingOfOutput","outData","packedOutput","outPackingScheme","tex_util.PackingScheme","texelShape","outTexUsage","dataToDispose","inputsData","uniformValues","webgl_util.isReshapeFree","savedInput","outputData","keyInputs","concat","hasOffset","xTexShape","shader_compiler.getUniformInfoFromShape","rank1","rank2","rank34","isLogicalShapTexShapeEqual","isScalar","isInOutTexShapeEqual","isTexShapeGreaterThanOne","keyUserCode","gpgpu_math.makeShaderKey","binary","getAndSaveBinary","inputInfos","inShapeInfos","source","shader_compiler.makeShader","gpgpu_math.compileProgram","outTex","uniform1f","Infinity","NaN","varLoc","varOffsetLoc","varShapeLoc","varTexShapeLoc","uniform1iv","uniform2iv","uniform3iv","uniform4iv","uniform2i","uniform1fv","outShapeLoc","customLoc","customValue","uniform2fv","uniform3fv","uniform4fv","gpgpu_math.runProgram","info","glFlushThreshold","lastGlFlushTime","unpacked","getBinary","getTextureManager","HTMLCanvasElement","remove","floatPrecision","floatPrecisionValue","tidy","debugFlag","underflowCheckValue","scalar","epsilon","webgl_util.getTextureShapeFromLogicalShape","isByteArray","Uint8ClampedArray","tempDenseInputTexShape","tempDenseInputHandle","tempDenseInputTexData","preventEagerUnpacking","encodedOutputTarget","outputTexData","float32Values","float32ToTypedArray","texType","warnedAboutMemory","mb","toFixed","bytesPerElement","checkCompileCompletion","entries","checkCompletion_","checkCompileCompletionAsync","checkCompletionAsync_","p","COMPLETION_STATUS_KHR","nextFrame","webgl_util.logShaderSourceAndInfoLog","forceHalfFloat","isBrowser","registerBackend","webgl","BinaryOpProgram","BinaryOpPackedProgram","checkOutOfBounds","checkOutOfBoundsString","identity","args","backend","identityConfig","kernelName","Identity","backendName","kernelFunc","complex","complexInfo","realTensorInfo","imagTensorInfo","complexConfig","Complex","LEAKYRELU","LEAKYRELU_PACKED","leakyReluConfig","LeakyRelu","$alpha","PRELU","PRELU_PACKED","preluConfig","Prelu","unaryKernelFunc","packedOpSnippet","cpuKernelImpl","webglBackend","$dtype","xData","binaryKernelFunc","supportsComplex","aData","bData","complexParts","aPart","bPart","aHandle","bHandle","complexOutput","decodedAVals","decodedBVals","out","mapActivationToShaderProgram","activation","packed","CHECK_NAN_SNIPPET","MatMulPackedProgram","transposeA","transposeB","addBias","hasPreluActivation","hasLeakyreluActivation","sharedDim","sharedDimensionPacked","aSample","bSample","aSwizzle","bSwizzle","activationSnippet","applyActivationSnippet","addBiasSnippet","batchASnippet","batchBSnippet","COMPLEX_MULTIPLY","BinaryOpComplexProgram","MUL","multiply","realProgram","binaryop_complex_gpu.COMPLEX_MULTIPLY","imagProgram","realPart","imagPart","cpuMultiply","multiplyConfig","Multiply","reshape","$shape","inferFromImplicitShape","$xSize","xTexData","reshapeConfig","Reshape","MeanProgram","reduceInfo","divisor","windowSize","outSize","windowSizeNearestVec4","windowSizeVec4Remainder","updateSnippet","denominator","isInt","toPrecision","ReduceProgram","reduceType","initializationValue","compareOp","vecType","reductionType","reductionStages","stages","computeOptimalWindowSize","getReductionStages","previousResult","TransposeProgram","newDim","switched","originalOrder","switchedCoords","getSwitchedCoords","TransposePackedProgram","outputOrder","switchedOrder","nextColumn","getc","keepDims","reductionIndices","origAxes","axes","permutedAxes","getAxesPermutation","sumInputIsTransposed","sumInput","getInnerMostAxes","assertAxesAreInnerMostDims","sumOutShape","expandShapeToKeepDim","reshapedInput","reduced","sumOutType","sumImpl","sumConfig","Sum","transpose","cpuTranspose","transposeConfig","Transpose","batchMatMulImpl","bias","preluActivationWeights","leakyreluAlpha","innerShapeA","innerShapeB","outerShapeA","outerShapeB","outerDimsA","outerDimsB","batchDimA","batchDimB","broadcast_util","a3dShape","b3dShape","a3d","b3d","intermediates","hasBias","hasPreluActivationWeights","hasLeakyreluAlpha","fusedActivation","aVec","bVec","shouldReshapeB","aVec3d","bVec3d","$leakyreluAlpha","outReshaped","_fusedMatMulConfig","_FusedMatMul","absConfig","Abs","acos","acosConfig","Acos","acosh","acoshConfig","Acosh","ADD","addKernelFunc","cpuAdd","addConfig","Add","AddNProgram","shapes","snippets","variable","operation","AddNPackedProgram","addNConfig","AddN","addN","tensors","midIndex","leftSide","rightSide","d1","d2","allConfig","All","permutedX","a2D","anyConfig","Any","ArgMinMaxProgram","firstPass","compOp","indexSnippet","ArgMinMaxPackedProgram","sourceLocSetup","sourceRank","sourceLocDType","inChannel","intChannels","srcRCoords","srcGCoords","srcBCoords","srcACoords","fetchCandidateIdx","fetchValue","getBestIndicesAChannelSnippet","argReduce","bestIndicesA","argReducePacked","argMinMaxReduce","intermediateTensorInfos","xtexData","xUnPacked","reshaped","argMaxConfig","ArgMax","$x","argMinConfig","ArgMin","asin","asinConfig","Asin","asinh","asinhConfig","Asinh","atan","atanConfig","Atan","atan2","CHECK_NAN_SNIPPET_BINARY","atan2Config","Atan2","atanh","atanhConfig","Atanh","Pool2DProgram","convInfo","poolType","computePositions","flattenPositions","includeBatchInIndex","filterWidth","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","padTop","padInfo","top","padLeft","isAvgPool","batchFlattenPositionStr","inHeight","inWidth","inChannels","flattenPositionStr","filterWidthNearestVec4","filterWidthVec4Remainder","Pool3DProgram","strideDepth","dilationDepth","effectiveFilterDepth","padFront","front","inDepth","avgPoolConfig","AvgPool","filterSize","dimRoundingMode","eitherStridesOrDilationsAreOne","computePool2DInfo","filterHeight","avgPoolProgram","avgPool3DConfig","AvgPool3D","dataFormat","computePool3DInfo","AvgPool2DBackpropProgram","avgMultiplier","outHeight","outWidth","AvgPool3DBackpropProgram","filterDepth","outDepth","avgPool3DGradConfig","AvgPool3DGrad","dy","avgPoolBackpropProgram","avgPoolGradConfig","AvgPoolGrad","batchMatMulConfig","BatchMatMul","BatchNormProgram","meanShape","varianceShape","offsetShape","scaleShape","varianceEpsilon","offsetSnippet","scaleSnippet","BatchNormPackedProgram","batchNormConfig","FusedBatchNorm","mean","variance","scale","finalInputs","SliceProgram","destSize","getCoords","body","SlicePackedProgram","sourceLoc","getChannel","upperRow","lowerRow","$begin","$size","parseSliceParams","assertParamsValid","newTexData","assign","shallowSlice","sliceConfig","Slice","batchToSpaceNDConfig","BatchToSpaceND","blockShape","crops","getReshaped","permuted","getPermuted","reshapedPermuted","getReshapedPermuted","sliceBeginCoords","getSliceBeginCoords","getSliceSize","toDispose","reshapedIntermediate","transposedIntermediate","reshapedIntermediate2","sliced","bincountConfig","Bincount","weights","broadcastArgsConfig","BroadcastArgs","s0","s1","s0Vals","s1Vals","broadcastShape","from","notEqual","notEqualConfig","NotEqual","realConfig","Real","castConfig","Cast","cast","zerosTensor","tf","zeros","floatX","hasEncodingLoss","int","zerosTensorInfo","CEIL","ceilConfig","Ceil","ClipProgram","ClipPackedProgram","clipByValueConfig","ClipByValue","clipValueMin","clipValueMax","ComplexAbsProgram","makeComplexComponentTensorInfo","complexTensor","complexPart","complexAbsConfig","ComplexAbs","programInputs","ConcatProgram","computeOutShape","offsets","lastIndex","lastShift","ConcatPackedProgram","lastChannels","allChannels","getValueSnippet","shiftedChannels","channelIdx","imagConfig","Imag","reals","imags","realConcated","imagConcated","r","runOnCpu","tensors2D","innerSize","inputsValShapes","finalOutShape","computeTensors2D","reshapedResult","$inputs","assertParamsConsistent","concatConfig","Concat","Conv2DProgram","inputDepthNearestVec4","inputDepthVec4Remainder","isChannelsLast","rowDim","colDim","channelDim","Conv3DProgram","Im2ColPackedProgram","boundsCheckingSnippet","unrolled","conv2dByMatMul","sharedMatMulDim","outerShapeX","outerShapeFilter","outChannels","preluActivationWeightsInNhwcFormat","xReshaped","originalXTexDataShape","filterReshaped","pointwiseConv","pointwiseConvTexData","xInNhwcFormat","xInNhwcFormatShape","outInNHWCFormat","conv2dWithIm2Row","x2ColShape","xSqueezed","w2Row","im2ColProgram","im2Col","im2ColReshaped","matmulProgram","conv2DConfig","Conv2D","dilations","$dataFormat","convertConv2DDataFormat","computeConv2DInfo","Conv2DDerFilterProgram","filterShape","Conv2DDerInputProgram","Conv3DDerFilterProgram","Conv3DDerInputProgram","conv2DBackpropFilterConfig","Conv2DBackpropFilter","conv2DBackpropInputConfig","Conv2DBackpropInput","conv3DConfig","Conv3D","computeConv3DInfo","conv3DBackpropFilterV2Config","Conv3DBackpropFilterV2","conv3DBackpropInputConfig","Conv3DBackpropInputV2","cos","CHECK_NAN_SNIPPET_UNARY","cosConfig","Cos","cosh","coshConfig","Cosh","CropAndResizeProgram","imageShape","boxShape","cropSize","method","extrapolationValue","imageHeight","imageWidth","numBoxes","cropHeight","cropWidth","methodId","inputHeightFloat","inputWidthFloat","heightRatio","heightScale","inY","widthRatio","widthScale","inX","cropAndResizeConfig","CropAndResize","image","boxes","boxInd","CumOpType","CumProgram","exclusive","reverse","initVal","Prod","val","idxString","getFinalCoord","cumImpl","permutation","permutedAxis","log2","prevResult","reverseTransposedResult","getUndoAxesPermutation","cumprodConfig","Cumprod","cumsumConfig","Cumsum","denseBincountConfig","DenseBincount","DepthToSpaceProgram","blockSize","getHeightCoordString","getWidthCoordString","getDepthCoordString","getOutputDepthSize","getInputSamplingString","depthToSpaceConfig","DepthToSpace","outputHeight","outputWidth","outputDepth","DepthwiseConv2DProgram","hasLeakyReluAlpha","channelMul","DepthwiseConvPacked2DProgram","texelsAcross","texelC","colIndex","nextTexelOffset","depthwiseConv2dNativeConfig","DepthwiseConv2dNative","$dilations","DepthwiseConv2DDerFilterProgram","DepthwiseConv2DDerInputProgram","depthwiseConv2dNativeBackpropFilterConfig","DepthwiseConv2dNativeBackpropFilter","depthwiseConv2dNativeBackpropInputConfig","DepthwiseConv2dNativeBackpropInput","DiagProgram","diagConfig","Diag","flat","Dilation2DProgram","dilation2DConfig","Dilation2D","computeDilation2DInfo","einsumConfig","Einsum","equation","allDims","summedDims","idDims","decodeEinsumEquation","checkEinsumDimSizes","path","steps","getEinsumComputePath","nSteps","numDimsRemaining","tensorsToDispose","idTerm","permutationIndices","expandDims","dimsToExpand","getEinsumPermutation","isIdentityPermutation","elu","eluConfig","Elu","eluGradConfig","EluGrad","equal","equalConfig","Equal","erf","ERF_P","ERF_A1","ERF_A2","ERF_A3","ERF_A4","ERF_A5","erfConfig","Erf","expConfig","Exp","$dim","expandDimsConfig","ExpandDims","EXPM1","expm1Config","Expm1","FFTProgram","component","inverse","innerDim","exponentMultiplierSnippet","PI","resultDenominator","opString","fftImpl","inputSize","innerDimensionSize","input2D","complexOutputReshaped","fftConfig","FFT","FillProgram","inferDtype","fillConfig","Fill","FlipLeftRightProgram","flipLeftRightConfig","FlipLeftRight","FLOOR","floorConfig","Floor","floorDiv","floorDivConfig","FloorDiv","FromPixelsProgram","FromPixelsPackedProgram","fromPixelsConfig","FromPixels","numChannels","isVideo","HTMLVideoElement","isImage","HTMLImageElement","videoWidth","videoHeight","fromPixels2DContext","drawImage","tempPixelHandle","fusedConv2DConfig","FusedConv2D","alignInputWithDataFormat","alignedInput","fusedDepthwiseConv2DConfig","FusedDepthwiseConv2D","shouldPackDepthwiseConv","GatherNDProgram","sliceDim","stridesType","strideString","gatherNdConfig","GatherNd","resultShape","prepareAndValidate","flattenIndices","flattenX","outValue","GatherProgram","currentCoords","gatherV2","batchDims","parsedAxis","indicesVals","axisDim","segment_util","collectGatherOpShapeInfo","indicesSize","outerSize","dimSize","gatherV2Config","GatherV2","greater","greaterConfig","Greater","greaterEqual","greaterEqualConfig","GreaterEqual","ifftConfig","IFFT","isFinite","isFiniteConfig","IsFinite","isInf","isInfConfig","IsInf","isNaNConfig","IsNan","less","lessConfig","Less","lessEqual","lessEqualConfig","LessEqual","linSpaceConfig","LinSpace","logConfig","Log","log1p","log1pConfig","Log1p","logicalAnd","logicalAndConfig","LogicalAnd","logicalNot","logicalNotConfig","LogicalNot","logicalOr","logicalOrConfig","LogicalOr","LRNProgram","radius","beta","rad","maxD","powOperator","basis","LRNPackedProgram","LRNConfig","LRN","depthRadius","LRNGradProgram","LRNGradConfig","LRNGrad","maxInputIsTransposed","maxInput","maxInputValues","maxOutShape","reshapedOutput","maxConfig","Max","maximum","maximumConfig","Maximum","maxPoolConfig","MaxPool","maxPoolProgram","maxPool3DConfig","MaxPool3D","MaxPool2DBackpropProgram","MaxPool3DBackpropProgram","maxPool3DGradConfig","MaxPool3DGrad","maxPool3dPositionsProgram","maxPool3dPositions","maxPoolBackpropProgram","maxPoolGradConfig","MaxPoolGrad","maxPoolPositionsProgram","maxPoolPositions","maxPoolBackPropProgram","maxPoolWithArgmaxConfig","MaxPoolWithArgmax","indexes","poolOutput","maxPoolWithArgmaxImpl","meanConfig","Mean","meanInputIsTransposed","meanInput","meanInputValues","meanOutShape","meanImpl","minConfig","Min","minimum","minimumConfig","Minimum","MirrorPadProgram","paddings","mode","unpackedCoords","MirrorPadPackedProgram","cLimit","padSetup","mirrorPadConfig","MirrorPad","mod","modConfig","Mod","MultinomialProgram","numOutcomes","numSamples","realDiv","realDivConfig","RealDiv","SUB","sub","cpuSub","subConfig","Sub","softmax","logits","maxLogit","expandedShape","maxLogitsReshaped","sumExp","sumExpReshaped","softmaxConfig","Softmax","multinomialConfig","Multinomial","seed","normalized","probs","negConfig","Neg","nonMaxSuppressionV3Impl","nonMaxSuppressionV3Config","NonMaxSuppressionV3","scores","maxOutputSize","iouThreshold","scoreThreshold","boxesVals","scoresVals","selectedIndices","nonMaxSuppressionV4Impl","nonMaxSuppressionV4Config","NonMaxSuppressionV4","padToMaxOutputSize","validOutputs","nonMaxSuppressionV5Impl","nonMaxSuppressionV5Config","NonMaxSuppressionV5","softNmsSigma","maxOutputSizeVal","iouThresholdVal","scoreThresholdVal","softNmsSigmaVal","selectedScores","OneHotProgram","onValue","offValue","oneHotConfig","OneHot","zerosLike","zerosLikeConfig","ZerosLike","onesLikeConfig","OnesLike","onesLike","packConfig","Pack","assertShapesMatch","expandedT","PadProgram","constantValue","PadPackedProgram","componentSetup","paddingArea","padV2","padV2Config","PadV2","pow","powConfig","Pow","prodConfig","range","rangeConfig","Range","reciprocal","reciprocalConfig","Reciprocal","relu","reluConfig","Relu","relu6","relu6Config","Relu6","ResizeBilinearProgram","newHeight","newWidth","alignCorners","halfPixelCenters","oldHeight","oldWidth","effectiveInSize","effectiveOutSize","sourceFracIndexRC","ResizeBilinearPackedProgram","resizeBilinearConfig","ResizeBilinear","images","ResizeBilinearBackpropProgram","dyShape","xHeight","xWidth","yHeight","yWidth","effectiveXSize","effectiveYSize","invHeightScale","invWidthScale","winHeight","winWidth","resizeBilinearGradConfig","ResizeBilinearGrad","ResizeNearestNeighborProgram","roundBase","ResizeNearestNeighborPackedProgram","resizeNearestNeighborConfig","ResizeNearestNeighbor","ResizeNearestNeigborBackpropProgram","resizeNearestNeighborGradConfig","ResizeNearestNeighborGrad","ReverseProgram","inCoords","getInCoord","ReversePackedProgram","nextRow","inCoordsArray","channels1","getR","getG","getB","getA","reverseConfig","Reverse","$dims","RotateProgram","fillValue","fillSnippet","rotateWithOffsetConfig","RotateWithOffset","radians","center","centerX","centerY","getImageCenter","sin","roundConfig","Round","rsqrt","rsqrtConfig","Rsqrt","ScatterProgram","updateSize","indicesRank","updatesRank","summingDupeIndex","indicesString","indicesSnippet","updatesString","updatesSnippet","scatterNdConfig","ScatterNd","calculateShapes","SearchSortedProgram","numInputs","numValues","side","webGL1LoopHead","loopHead","boundComparator","searchSortedConfig","SearchSorted","sortedSequence","SelectProgram","cRank","cCoords","abCoords","cCoordVars","abCoordVars","selectConfig","Select","selu","SELU_SCALEALPHA","SELU_SCALE","seluConfig","Selu","sigmoid","sigmoidConfig","Sigmoid","signConfig","Sign","sinConfig","Sin","sinh","sinhConfig","Sinh","softplus","softplusConfig","Softplus","spaceToBatchNDConfig","SpaceToBatchND","completePaddings","paddedX","reshapedPaddedShape","permutedReshapedPaddedPermutation","reshapedPaddedX","paddedXT","sparseFillEmptyRowsConfig","SparseFillEmptyRows","$indices","$values","$denseShape","$defaultValue","outputIndicesShape","sparseReshapeConfig","SparseReshape","$inputShape","$inputIndices","sparseSegmentMeanConfig","SparseSegmentMean","$data","$segmentIds","outputDataShape","sparseSegmentSumConfig","SparseSegmentSum","sparseToDenseConfig","SparseToDense","sparseIndices","sparseValues","updatesBuf","splitVConfig","SplitV","numOrSizeSplits","splitSizes","prepareSplitSize","sliceT","SQRT","sqrtConfig","Sqrt","square","squareConfig","Square","SQUARED_DIFFERENCE","squaredDifference","squaredDifferenceConfig","SquaredDifference","stepConfig","Step","StridedSliceProgram","inputDtype","newCoords","outputAxis","stridedSliceConfig","StridedSlice","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","finalShapeSparse","finalShape","isIdentity","sliceDim0","isSimpleSlice","$end","$strides","sliceInfo","resultReshaped","stringNGramsConfig","StringNGrams","$dataSplits","stringSplitConfig","StringSplit","$input","$delimiter","stringToHashBucketFastConfig","StringToHashBucketFast","tan","tanConfig","Tan","tanh","tanhConfig","Tanh","TileProgram","tile","buf","tileConfig","Tile","SwapProgram","MergeProgram","disposeIntermediateTensorInfoOrNull","roundUpToPow2","pow2","topKConfig","TopK","TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD","TOPK_K_CPU_HANDOFF_THRESHOLD","xIsPacked","x2D","kPow2","lastDimPow2","getInputs","runSwap","dir","inc","NEGATIVE_INFINITY","prevIndices","len","mergeProgram","prevValues","TransformProgram","interpolation","fillMode","interpolationModeId","fillModeId","transformConfig","Transform","transforms","uniqueConfig","Unique","unpackConfig","Unpack","SegmentOpProgram","segOpInfo","segOpType","numSegments","checkValueOutOfBounds","checkSegmentIdOutOfBounds","kernelConfigs","UnsortedSegmentSum","outputDType","segOpCompute","segOpComputeOptimalWindowSize","rangeInfo","tileInfo","kernelConfig","registerKernel"],"mappings":"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GACAG,GACAtrB,GACAwrB,GACAjS,GACAoS,GACAG,GACAE,GACAnrB,GACAsrB,GACAG,GACAE,GACAE,GACAG,GACAG,GACAG,GACAG,GACAU,GACAI,GACAO,GACAG,GACAE,GACAG,GACAI,GACAK,GACAK,GACAK,GACAO,GACAG,GACAS,GACAG,GACAsB,GACA5uB,GACAivB,GACAG,GACAU,GACAK,GACA3d,GACAse,GACAK,GACAG,GACAU,GACAG,GACAv1B,GACAy1B,GACAE,GACA7f,GACAkb,GACA8E,GACAG,GACAG,GACAzyB,GACAszB,GACAe,GACAK,GACAG,GACAa,GACAM,GACAQ,GACAG,GACAW,GACAU,GACAS,GACAK,GACAG,GACAE,GACAE,GACAG,GACAtpB,GACAie,GACAwL,GACAE,GACAQ,GACAO,GACAI,GACAK,GACAE,GACAK,GACAO,GACAG,GACAI,GACAE,GACAM,GACAgB,GACAG,GACAI,GACA/Q,GACAvqB,GACAy7B,GACAG,GACAK,GACAO,GACAsB,GACA19B,GACA69B,GACAE,GD7OoD,CACpDlmC,WAAY2mC,qBACZzmC,YAAa,QACbC,oBArFiCN,GAKjC,MAAMp4B,OAACA,EAAMq4B,QAAEA,EAAO1oB,MAAEA,GAASyoB,GAC3BlhC,EAACA,EAACqlB,WAAEA,GAAcvc,GAClB8+D,YAACA,GAAenvD,EAEhBmP,EAAQ5nB,EAAEpQ,MAAMkF,OAEhBmiD,EAAY,GAElB,IAAIlvB,EAAO,EACX,MAAM+5B,EAAcniD,eAAa8oC,mBAAmB,CAAC1gB,GAAOH,GAC5D,IAAI2lB,EAAYvtC,EACG,MAAf8hD,IACFvU,EAAYjE,GAAU,CAACxgC,OAAQ,CAAC9I,EAAAA,GAAImhC,QAAAA,EAAS1oB,MAAO,CAACkP,KAAMm6B,KAC3D7K,EAAU72C,KAAKmtC,GACfxlB,EAAOpoB,eAAaipC,iBAAiB,EAAGhhB,GAAO,IAGjD,MAAMrmB,EAAW5B,eAAaosD,aAAa9R,gBACvC1M,EAAU39C,MAAOm4B,EAAM6/C,GACrBtgE,EAASxX,OAAKC,cAAc,CAACw9C,EAAU39C,MAAMm4B,KAC7CylB,EACF5H,GAAQ,CAAC98B,OAAQ,CAAC9I,EAAGutC,GAAYpM,QAAAA,EAAS1oB,MAAO,CAAC7oB,MAAO,EAAE,EAAG0X,MAClE2vC,EAAU72C,KAAKotC,GAEf,MAAMy6B,EAAc/+B,aAAWlpC,EAAEvC,OAE3ByqE,EACF,CAACloE,EAAe2nE,EAAiCtiD,EAChD5nB,EAAiBmqE,KAChB,MAAMrhD,EAAYvmB,EAAEpQ,MAAM,GACpB0X,EAAStH,EAAEpQ,MAAM,GACjB02C,EACF3mC,eAAaosD,aAAaoc,8BACtB7gE,EAAQsgE,GAEV/xE,EAAU,IAAI4xE,GADF,CAACnhC,WAAAA,EAAYh/B,OAAAA,EAAQif,UAAAA,EAAWqhD,YAAAA,GACFD,GAC1CzpE,EAASijC,EAAQ7H,cAAczjC,EAAS,CAACmK,EAAGqlB,GAAa5nB,GAG/D,GAFAw5C,EAAU72C,KAAKlC,GAEXA,EAAOtO,MAAM,KAAOg4E,EACtB,OAAO1pE,EAET,MAAMkqE,EAAYpQ,GAAM,CACtB72B,QAAAA,EACA1oB,MAAO,CAAC2H,MAAO,EAAGC,KAAMunD,EAAatnD,KAAM,EAAG7iB,MAAO,aAEjD4qE,EAAWlD,GAAK,CACpBr8D,OAAQ,CAAC9I,EAAGooE,GACZjnC,QAAAA,EACA1oB,MAAO,CAACwO,KAAM,CAAC3f,EAASg/B,MAG1B2Q,EAAU72C,KAAKgoE,GACfnxB,EAAU72C,KAAKioE,GAIf,OADIH,EAAahqE,EAAQypE,EAAWU,EAAU5qE,EAAOmqE,IAOrDz4B,EACFvJ,GAAQ,CAAC98B,OAAQ,CAAC9I,EAJFkoE,EAChB16B,EAAK,qBAAsBnoB,EAAY4iD,EAAaL,IAGjBzmC,QAAAA,EAAS1oB,MAAO,CAAC7oB,MAAO2R,KAE/D,IAAI0P,EAASk+B,EACb,GAAmB,MAAf2S,EAAqB,CACvB7K,EAAU72C,KAAK+uC,GACf,MAAMxnB,EAAOhoB,eAAawiD,uBAAuBL,GACjD7wC,EAASq4B,GAAU,CAACxgC,OAAQ,CAAC9I,EAAGiR,GAASkwB,QAAAA,EAAS1oB,MAAO,CAACkP,KAAAA,KAI5D,OADAsvB,EAAU35C,SAAQC,GAAK4jC,EAAQrN,8BAA8Bv2B,KACtD0T,ICkPP0lD,IAGF,IAAK,MAAM2R,KAAgBP,GACzBQ,iBAAeD,mHC7VD"}